cd /usr0/swasey/ml96/Local/Bugs/0063/
tilt -fshowHIL -fshowPhasesplit -fcheckPhasesplit mapfile-bug
Warning: setting TILT_LIBDIR to /usr0/swasey/t
Starting compilation           : Wed Nov 14 14:10:03 2001   0.0 sec
Warning: only compiling to assembly because non-native
Mapfile mapfile-bug with 1 units processed.
Imports read.
Dependency graph computed: 1 nodes and 0 edges.
Not reducing dependency graph.
Creating directories.
1 necessary units:   join
Start compiling files          : Wed Nov 14 14:10:03 2001   0.0 sec
Starting slave ringtail.lemur.20564.
  [Plan for join:   generate  cleanup]
  [Sending FLUSH_ALL to ringtail.lemur.20564]
  [Calling ringtail.lemur.20564 to compile join]
Slave received FLUSH_ALL.
Setting PtrWriteBarrier to true
Setting FullWriteBarrier to true
Setting MirrorGlobal to true
Setting MirrorPtrArray to false
Setting BranchingTraps to true
Setting UptoElaborate to false
Setting UptoPhasesplit to false
Setting UptoClosureConvert to false
Setting UptoRtl to false
Setting UptoAsm to true
Setting debug_asm to true
Setting keep_asm to true
Setting compress_asm to true
Setting ManagerChat to true
Setting ManagerVerbose to true
Setting TimeEachFile to false
Setting makeBackups to false
Setting ShowWrittenContext to false
Setting WriteUnselfContext to false
Setting ShowTools to false
  [Compiling join to assembly]
  [0 imports of total size 0 were cached.
   0 imports of total size 0 were uncached and took 0.0 seconds.]
  [Added contexts.]
  [Parsing join-bug.sml]
  [Elaborating join-bug.sml non-constrained]
SBNDS:
          [JoinWithArg_FCT > functor_var_1009 = 
**            FUNC(funct_arg_1000: [ParserData_STR > _1001 : LR_TABLE_951] ->
**            STR[pairlist_TYC > pairlist_1002 = CON_PATH(funct_arg_1000.ParserData_STR. pairlist_TYC), 
**                pairlist_sumarg_INT > pairlist_sumarg_1004 = CON_PATH(funct_arg_1000.ParserData_STR. pairlist_sumarg_INT), 
**                pairlist_sum_INT > pairlist_sum_1003 = CON_PATH(funct_arg_1000.ParserData_STR. pairlist_sum_INT), 
**                +Npairlist_in_INT > pairlist_in_1005 = MPROJ(funct_arg_1000,ParserData_STR).+Npairlist_in_INT, 
**                +Npairlist_out_INT > pairlist_out_1006 = MPROJ(funct_arg_1000,ParserData_STR).+Npairlist_out_INT, 
**                +Epairlist_INT > eqfun_1007 =  $POLY$ MPROJ(MPROJ(funct_arg_1000,ParserData_STR),+Epairlist_INT), 
**                +O+Dpairlist_INT > dt_1008 = 
***                  STR[pairlist_INT > copy_pairlist_956 = 
****                        CON_PATH(funct_arg_1000.ParserData_STR. +O+Dpairlist_INT. pairlist_INT), 
***                      expose_INT > exposer_mod_992 = 
****                         $POLY$ MPROJ(MPROJ(MPROJ(funct_arg_1000,ParserData_STR),+O+Dpairlist_INT),expose_INT), 
***                      EMPTY > _994 =  $POLY$ MPROJ(MPROJ(MPROJ(funct_arg_1000,ParserData_STR),+O+Dpairlist_INT),EMPTY)]]
**            : 
**            [pairlist_TYC > pairlist_1002 : KIND(1 -> TYPE) = CON_PATH(funct_arg_1000.ParserData_STR. pairlist_TYC), 
**             pairlist_sumarg_INT > pairlist_sumarg_1004 : KIND(0) = CON_PATH(funct_arg_1000.ParserData_STR. pairlist_sumarg_INT), 
**             pairlist_sum_INT > pairlist_sum_1003 : KIND(1 -> TYPE) = CON_PATH(funct_arg_1000.ParserData_STR. pairlist_sum_INT), 
**             +Npairlist_in_INT > pairlist_in_1005 : 
***               CON_COERCION(['a_952],
***                            CON_APP(CON_PATH(funct_arg_1000.ParserData_STR. pairlist_sum_INT); 'a_952),
***                            CON_APP(CON_PATH(funct_arg_1000.ParserData_STR. pairlist_TYC); 'a_952)), 
**             +Npairlist_out_INT > pairlist_out_1006 : 
***               CON_COERCION(['a_952],
***                            CON_APP(CON_PATH(funct_arg_1000.ParserData_STR. pairlist_TYC); 'a_952),
***                            CON_APP(CON_PATH(funct_arg_1000.ParserData_STR. pairlist_sum_INT); 'a_952)), 
**             +Epairlist_INT > eqfun_1007 : 
***                $POLY$ SIGS_SELF(funct_arg_1000.ParserData_STR. +Epairlist_INT, 
***                       UNSELF_SIG = NONE
***                       SELF_SIG = SIGF(mpoly_var_953, ['a_TYV > 'a_952 : TYPE] =>
***                                          [it_INT > +Epairlist_INT_995 : 
****                                             ({CON_APP(CON_PATH(funct_arg_1000.ParserData_STR. pairlist_TYC);
****                                                       CON_PATH(mpoly_var_953.'a_TYV)) *
****                                               CON_APP(CON_PATH(funct_arg_1000.ParserData_STR. pairlist_TYC);
****                                                       CON_PATH(mpoly_var_953.'a_TYV))} ->
****                                             CON_MU(/-\(_259)(SUM[(false, true); 2; ()]))#0)])
***                       ), 
**             +O+Dpairlist_INT > dt_1008 : 
***               [pairlist_INT > copy_pairlist_956 : KIND(1 -> TYPE) == CON_PATH(funct_arg_1000.ParserData_STR. pairlist_TYC), 
***                expose_INT > exposer_mod_992 : 
****                   $POLY$ SIGS_SELF(funct_arg_1000.ParserData_STR. +O+Dpairlist_INT. expose_INT, 
****                          UNSELF_SIG = NONE
****                          SELF_SIG = SIGF(mpoly_var_953, ['a_TYV > 'a_952 : TYPE] =>
****                                             [it_INT > exposer_991 : 
*****                                                (CON_APP(CON_PATH(funct_arg_1000.ParserData_STR. pairlist_TYC);
*****                                                         CON_PATH(mpoly_var_953.'a_TYV)) =>
*****                                                CON_APP(CON_PATH(funct_arg_1000.ParserData_STR. pairlist_sum_INT);
*****                                                        CON_PATH(mpoly_var_953.'a_TYV))) == 
*****                                                   /TOTALNONRECUR\anonfun_971
*****                                                         (exposee_970 : CON_APP(CON_PATH(funct_arg_1000.ParserData_STR.
*****                                                                                                        pairlist_TYC);
*****                                                                                CON_PATH(mpoly_var_953.'a_TYV)))
*****                                                         : CON_APP(CON_PATH(funct_arg_1000.ParserData_STR. pairlist_sum_INT);
*****                                                                   CON_PATH(mpoly_var_953.'a_TYV)) =
*****                                                   COERCE(MPROJ(funct_arg_1000,ParserData_STR).+Npairlist_out_INT,
*****                                                          [CON_PATH(mpoly_var_953.'a_TYV)],
*****                                                          exposee_970)])
****                          ), 
***                EMPTY > _994 : 
****                   $POLY$ SIGS_SELF(funct_arg_1000.ParserData_STR. +O+Dpairlist_INT. EMPTY, 
****                          UNSELF_SIG = NONE
****                          SELF_SIG = SIGF(mpoly_var_953, ['a_TYV > 'a_952 : TYPE] =>
****                                             [it_INT > _993 : 
*****                                                CON_APP(CON_PATH(funct_arg_1000.ParserData_STR. pairlist_TYC);
*****                                                        CON_PATH(mpoly_var_953.'a_TYV)) == 
*****                                                   COERCE(MPROJ(funct_arg_1000,ParserData_STR).+Npairlist_in_INT,
*****                                                          [CON_PATH(mpoly_var_953.'a_TYV)],
*****                                                          INJ(0,
*****                                                              CON_APP(CON_PATH(funct_arg_1000.ParserData_STR.
*****                                                                                              pairlist_sum_INT);
*****                                                                      CON_PATH(mpoly_var_953.'a_TYV))))])
****                          )]])]
ENTRIES:
          CONTEXT_SIGNAT: LR_TABLE_SIG > LR_TABLE_951 = [pairlist_TYC > pairlist_954 : KIND(1 -> TYPE), 
*                                                        pairlist_sumarg_INT > pairlist_sumarg_962 : KIND(0) = /-\('a_998)(), 
*                                                        pairlist_sum_INT > pairlist_sum_963 : 
**                                                          KIND(1 -> TYPE) = 
**                                                             /-\('a_999)SUM[(EMPTY); 1; CON_APP(pairlist_sumarg_962; 'a_999)], 
*                                                        +Npairlist_in_INT > pairlist_in_965 : 
**                                                          CON_COERCION(['a_952],
**                                                                       CON_APP(pairlist_sum_963; 'a_952),
**                                                                       CON_APP(pairlist_954; 'a_952)), 
*                                                        +Npairlist_out_INT > pairlist_out_966 : 
**                                                          CON_COERCION(['a_952],
**                                                                       CON_APP(pairlist_954; 'a_952),
**                                                                       CON_APP(pairlist_sum_963; 'a_952)), 
*                                                        +Epairlist_INT > poly+Epairlist_INT_996 : 
**                                                           $POLY$ SIGF(mpoly_var_953, ['a_TYV > 'a_952 : TYPE] =>
**                                                                          [it_INT > +Epairlist_INT_995 : 
***                                                                             ({CON_APP(pairlist_954;
***                                                                                       CON_PATH(mpoly_var_953.'a_TYV)) *
***                                                                               CON_APP(pairlist_954;
***                                                                                       CON_PATH(mpoly_var_953.'a_TYV))} ->
***                                                                             CON_MU(/-\(_259)(SUM[(false, true); 2; ()]))#0)]), 
*                                                        +O+Dpairlist_INT > pairlist_961 : 
**                                                          
**        +1   [pairlist_INT > copy_pairlist_956 : KIND(1 -> TYPE) == pairlist_954, 
**        +1    expose_INT > exposer_mod_992 : 
***       +1        $POLY$ SIGF(mpoly_var_953, ['a_TYV > 'a_952 : TYPE] =>
***       +1                       [it_INT > exposer_991 : 
****      +1                           (CON_APP(pairlist_954; CON_PATH(mpoly_var_953.'a_TYV)) =>
****      +1                           CON_APP(pairlist_sum_963; CON_PATH(mpoly_var_953.'a_TYV))) == 
****      +1                              /TOTALNONRECUR\anonfun_971
****      +1                                    (exposee_970 : CON_APP(pairlist_954; CON_PATH(mpoly_var_953.'a_TYV)))
****      +1                                    : CON_APP(pairlist_sum_963; CON_PATH(mpoly_var_953.'a_TYV)) =
****      +1                              COERCE(pairlist_out_966, [CON_PATH(mpoly_var_953.'a_TYV)], exposee_970)]), 
**        +1    EMPTY > _994 : 
***       +1        $POLY$ SIGF(mpoly_var_953, ['a_TYV > 'a_952 : TYPE] =>
***       +1                       [it_INT > _993 : 
****      +1                           CON_APP(pairlist_954; CON_PATH(mpoly_var_953.'a_TYV)) == 
****      +1                              COERCE(pairlist_in_965,
****      +1                                     [CON_PATH(mpoly_var_953.'a_TYV)],
****      +1                                     INJ(0, CON_APP(pairlist_sum_963; CON_PATH(mpoly_var_953.'a_TYV))))])]]
          CONTEXT_SDEC: JoinWithArg_FCT > functor_var_1009 : 
**                         SIGF(funct_arg_1000, [ParserData_STR > _1001 : LR_TABLE_951] ->
**                                 [pairlist_TYC > pairlist_1002 : 
***                                    KIND(1 -> TYPE) = 
***                                       CON_PATH(funct_arg_1000.ParserData_STR. pairlist_TYC), 
**                                  pairlist_sumarg_INT > pairlist_sumarg_1004 : 
***                                    KIND(0) = 
***                                       CON_PATH(funct_arg_1000.ParserData_STR. pairlist_sumarg_INT), 
**                                  pairlist_sum_INT > pairlist_sum_1003 : 
***                                    KIND(1 -> TYPE) = 
***                                       CON_PATH(funct_arg_1000.ParserData_STR. pairlist_sum_INT), 
**                                  +Npairlist_in_INT > pairlist_in_1005 : 
***                                    CON_COERCION(['a_952],
***                                                 CON_APP(CON_PATH(funct_arg_1000.ParserData_STR. pairlist_sum_INT); 'a_952),
***                                                 CON_APP(CON_PATH(funct_arg_1000.ParserData_STR. pairlist_TYC); 'a_952)), 
**                                  +Npairlist_out_INT > pairlist_out_1006 : 
***                                    CON_COERCION(['a_952],
***                                                 CON_APP(CON_PATH(funct_arg_1000.ParserData_STR. pairlist_TYC); 'a_952),
***                                                 CON_APP(CON_PATH(funct_arg_1000.ParserData_STR. pairlist_sum_INT); 'a_952)), 
**                                  +Epairlist_INT > eqfun_1007 : 
***                                     $POLY$ SIGS_SELF(funct_arg_1000.ParserData_STR. +Epairlist_INT, 
***                                            UNSELF_SIG = NONE
***                                            SELF_SIG = SIGF(mpoly_var_953, ['a_TYV > 'a_952 : TYPE] =>
***                                                               [it_INT > +Epairlist_INT_995 : 
****                                                                  ({CON_APP(CON_PATH(funct_arg_1000.ParserData_STR.
****                                                                                                    pairlist_TYC);
****                                                                            CON_PATH(mpoly_var_953.'a_TYV)) *
****                                                                    CON_APP(CON_PATH(funct_arg_1000.ParserData_STR.
****                                                                                                    pairlist_TYC);
****                                                                            CON_PATH(mpoly_var_953.'a_TYV))} ->
****                                                                  CON_MU(/-\(_259)(SUM[(false, true); 2; ()]))#0)])
***                                            ), 
**                                  +O+Dpairlist_INT > dt_1008 : 
***                                    [pairlist_INT > copy_pairlist_956 : 
****                                       KIND(1 -> TYPE) == 
****                                          CON_PATH(funct_arg_1000.ParserData_STR. pairlist_TYC), 
***                                     expose_INT > exposer_mod_992 : 
****                                        $POLY$ SIGS_SELF(funct_arg_1000.ParserData_STR. +O+Dpairlist_INT. expose_INT, 
****                                               UNSELF_SIG = NONE
****                                               SELF_SIG = 
****      +1   SIGF(mpoly_var_953, ['a_TYV > 'a_952 : TYPE] =>
****      +1           [it_INT > exposer_991 : 
*****     +1               (CON_APP(CON_PATH(funct_arg_1000.ParserData_STR. pairlist_TYC); CON_PATH(mpoly_var_953.'a_TYV)) =>
*****     +1               CON_APP(CON_PATH(funct_arg_1000.ParserData_STR. pairlist_sum_INT); CON_PATH(mpoly_var_953.'a_TYV))) == 
*****     +1                  /TOTALNONRECUR\anonfun_971
*****     +1                        (exposee_970 : CON_APP(CON_PATH(funct_arg_1000.ParserData_STR. pairlist_TYC);
*****     +1                                               CON_PATH(mpoly_var_953.'a_TYV)))
*****     +1                        : CON_APP(CON_PATH(funct_arg_1000.ParserData_STR. pairlist_sum_INT); CON_PATH(mpoly_var_953.'a_TYV)) =
*****     +1                  COERCE(MPROJ(funct_arg_1000,ParserData_STR).+Npairlist_out_INT,
*****     +1                         [CON_PATH(mpoly_var_953.'a_TYV)],
*****     +1                         exposee_970)])
****                                               ), 
***                                     EMPTY > _994 : 
****                                        $POLY$ SIGS_SELF(funct_arg_1000.ParserData_STR. +O+Dpairlist_INT. EMPTY, 
****                                               UNSELF_SIG = NONE
****                                               SELF_SIG = 
****      +1   SIGF(mpoly_var_953, ['a_TYV > 'a_952 : TYPE] =>
****      +1           [it_INT > _993 : 
*****     +1               CON_APP(CON_PATH(funct_arg_1000.ParserData_STR. pairlist_TYC); CON_PATH(mpoly_var_953.'a_TYV)) == 
*****     +1                  COERCE(MPROJ(funct_arg_1000,ParserData_STR).+Npairlist_in_INT,
*****     +1                         [CON_PATH(mpoly_var_953.'a_TYV)],
*****     +1                         INJ(0,
*****     +1                             CON_APP(CON_PATH(funct_arg_1000.ParserData_STR. pairlist_sum_INT);
*****     +1                                     CON_PATH(mpoly_var_953.'a_TYV))))])
****                                               )]])

gc_context: 29 items in original context.  0 items in reduced context.
  [writing TM/any/join-bug.sml.il - unnecessary]
===== Starting Phasesplit: join                          =====
  Initial context is phase-split
  Bindings are phase-split
  Imports are computed
  Exports are phase-split
PASS: Phasesplit
Phasesplit

          [functor_var_c_1041 = 
*          FUN(funct_arg_c_1043 ::  REC_K{ParserData > _c_1045 : 
*                                         REC_K{pairlist > pairlist_1048 :  Arrow_k(Open; _1047 : TYPE; TYPE),
*                                               pairlist_sumarg > pairlist_sumarg_1051 : 
*                                               SINGLE(LET  _1050 =  FUN('a_1049 ::  TYPE) = CREC{}
*                                                      IN   _1050
*                                                      END),
*                                               pairlist_sum > pairlist_sum_1054 : 
*                                               SINGLE(LET  _1053 = 
*                                                           FUN('a_1052 ::  TYPE) = SUM(1,1)(APP(pairlist_sumarg_1051,('a_1052)))
*                                                      IN   _1053
*                                                      END)}})
*              = LET  funct_arg_ParserData_c_1090 = funct_arg_c_1043.ParserData
*                     pairlist_1092 = funct_arg_c_1043.ParserData. pairlist
*                     pairlist_sumarg_1093 = funct_arg_c_1043.ParserData. pairlist_sumarg
*                     pairlist_sum_1094 = funct_arg_c_1043.ParserData. pairlist_sum
*                IN   CREC{pairlist = pairlist_1092, pairlist_sumarg = pairlist_sumarg_1093, pairlist_sum = pairlist_sum_1094}
*                END,
*          /LEAF\DEPfunctor_var_r_1042
*            (funct_arg_c_1043 :: 
*               REC_K{ParserData > _c_1045 : 
*                     REC_K{pairlist > pairlist_1048 :  Arrow_k(Open; _1047 : TYPE; TYPE),
*                           pairlist_sumarg > pairlist_sumarg_1051 :  SINGLE(LET  _1050 =  FUN('a_1049 ::  TYPE) = CREC{}
*                                                                            IN   _1050
*                                                                            END),
*                           pairlist_sum > pairlist_sum_1054 : 
*                           SINGLE(LET  _1053 =  FUN('a_1052 ::  TYPE) = SUM(1,1)(APP(pairlist_sumarg_1051,('a_1052)))
*                                  IN   _1053
*                                  END)}} ;; 
*             funct_arg_r_1044 : 
*               Unknown : 
*               DEP_RECORD[ ParserData > _r_1046]
*                 (DEP_RECORD[
*                  +Npairlist_in > pairlist_in_1056, +Npairlist_out > pairlist_out_1058, +Epairlist > poly+Epairlist_INT_r_1060]
*                    (COERCION[ 'a_1055 ](APP(funct_arg_c_1043.ParserData. pairlist_sum,('a_1055)),
*         +1   APP(funct_arg_c_1043.ParserData. pairlist,
*         +1     ('a_1055))),
*                     COERCION[ 'a_1057 ](APP(funct_arg_c_1043.ParserData. pairlist,('a_1057)),APP(funct_arg_c_1043.ParserData.
*                                                                                                                   pairlist_sum,
*                                                                                                ('a_1057))),
*                     ALLARROW(Open; TOTAL; (mpoly_var_c_1061 :: REC_K{'a > 'a_1063 :  TYPE}); 
*                        (mpoly_var_r_1062 :: DEP_RECORD[ ]); 0; 
*                        ALLARROW(Open; PARTIAL; (); 
*                           (RECORD[1, 2]
*                              (APP(funct_arg_c_1043.ParserData. pairlist,(mpoly_var_c_1061.'a)),
*                               APP(funct_arg_c_1043.ParserData. pairlist,(mpoly_var_c_1061.'a)))); 0; 
*                           PROJ(MU_NR((_1064=SUM(2,2)(CREC{}))),1))))) ;; 
*             )
*          ->LET  funct_arg_ParserData_c_1090 = funct_arg_c_1043.ParserData
*                 pairlist_1092 = funct_arg_c_1043.ParserData. pairlist
*                 pairlist_sumarg_1093 = funct_arg_c_1043.ParserData. pairlist_sumarg
*                 pairlist_sum_1094 = funct_arg_c_1043.ParserData. pairlist_sum
*                 _c_1100 = CREC{pairlist = pairlist_1092,
*                                pairlist_sumarg = pairlist_sumarg_1093,
*                                pairlist_sum = pairlist_sum_1094}
*            IN   DEP_RECORD[ +Npairlist_in > pairlist_in_1079, +Npairlist_out > pairlist_out_1081, +Epairlist > eqfun_r_1083]
*                   (COERCION[ 'a_1078 ](APP(funct_arg_c_1043.ParserData. pairlist_sum,('a_1078)),
*         +1   APP(funct_arg_c_1043.ParserData. pairlist,
*         +1     ('a_1078))),
*                    COERCION[ 'a_1080 ](APP(funct_arg_c_1043.ParserData. pairlist,('a_1080)),APP(funct_arg_c_1043.ParserData.
*                                                                                                                  pairlist_sum,
*                                                                                               ('a_1080))),
*                    ALLARROW(Open; TOTAL; (mpoly_var_c_1084 :: REC_K{'a > 'a_1086 :  TYPE}); 
*                       (mpoly_var_r_1085 :: DEP_RECORD[ ]); 0; 
*                       ALLARROW(Open; PARTIAL; (); 
*                          (RECORD[1, 2]
*                             (APP(funct_arg_c_1043.ParserData. pairlist,(mpoly_var_c_1084.'a)),
*                              APP(funct_arg_c_1043.ParserData. pairlist,(mpoly_var_c_1084.'a)))); 0; 
*                          PROJ(MU_NR((_1087=SUM(2,2)(CREC{}))),1))))
*            END =
*          Let  funct_arg_ParserData_c_1090 = funct_arg_c_1043.ParserData
*               pairlist_1092 = funct_arg_c_1043.ParserData. pairlist
*               pairlist_sumarg_1093 = funct_arg_c_1043.ParserData. pairlist_sumarg
*               pairlist_sum_1094 = funct_arg_c_1043.ParserData. pairlist_sum
*               _c_1100 = CREC{pairlist = pairlist_1092, pairlist_sumarg = pairlist_sumarg_1093, pairlist_sum = pairlist_sum_1094}
*               funct_arg_ParserData_r_1091 : Unknown = select[ParserData][](funct_arg_r_1044)
*               pairlist_in_1095 : Unknown = select[+Npairlist_in][](funct_arg_ParserData_r_1091)
*               pairlist_out_1096 : Unknown = select[+Npairlist_out][](funct_arg_ParserData_r_1091)
*               eqfun_r_1098 : Unknown = select[+Epairlist][](select[ParserData][](funct_arg_r_1044))
*               _r_1101 : Unknown = 
*                 record(+Npairlist_in>pairlist_in_1095, +Npairlist_out>pairlist_out_1096, +Epairlist>eqfun_r_1098)
*          In   _r_1101
*          End]
*         IMPORTS:
*         
*         EXPORTS:
*         JoinWithArg_FCT_c = functor_var_c_1041
*         JoinWithArg_FCT_r = functor_var_r_1042
*         
  Done checking context
  Done validating imports
Traverse:Variable 'a_1078 not found in context!

 Constructor variables, kinds, and equations are :
'a_1055::TYPE

 Expression variables and constructors are :

 Constructor variables, kinds, and equations are :

 Expression variables and constructors are :
'a_1055
'a_1078

 Constructor variables, kinds, and equations are :
'a_1055::TYPE
funct_arg_c_1043::          REC_K{ParserData > _c_1045 : 
*               REC_K{pairlist > pairlist_1048 :  Arrow_k(Open; _1047 : TYPE; TYPE),
*                     pairlist_sumarg > pairlist_sumarg_1051 :  SINGLE(LET  _1050 =  FUN('a_1049 ::  TYPE) = CREC{}
*                                                                      IN   _1050
*                                                                      END),
*                     pairlist_sum > pairlist_sum_1054 : 
*                     SINGLE(LET  _1053 =  FUN('a_1052 ::  TYPE) = SUM(1,1)(APP(pairlist_sumarg_1051,('a_1052)))
*                            IN   _1053
*                            END)}}

 Expression variables and constructors are :

 Constructor variables, kinds, and equations are :
funct_arg_c_1043::          REC_K{ParserData > _c_1045 : 
*               REC_K{pairlist > pairlist_1048 :  Arrow_k(Open; _1047 : TYPE; TYPE),
*                     pairlist_sumarg > pairlist_sumarg_1051 :  SINGLE(LET  _1050 =  FUN('a_1049 ::  TYPE) = CREC{}
*                                                                      IN   _1050
*                                                                      END),
*                     pairlist_sum > pairlist_sum_1054 : 
*                     SINGLE(LET  _1053 =  FUN('a_1052 ::  TYPE) = SUM(1,1)(APP(pairlist_sumarg_1051,('a_1052)))
*                            IN   _1053
*                            END)}}

 Expression variables and constructors are :
APP(funct_arg_c_1043.ParserData. pairlist,('a_1055))
APP(funct_arg_c_1043.ParserData. pairlist,('a_1078))

 Constructor variables, kinds, and equations are :
funct_arg_c_1043::          REC_K{ParserData > _c_1045 : 
*               REC_K{pairlist > pairlist_1048 :  Arrow_k(Open; _1047 : TYPE; TYPE),
*                     pairlist_sumarg > pairlist_sumarg_1051 :  SINGLE(LET  _1050 =  FUN('a_1049 ::  TYPE) = CREC{}
*                                                                      IN   _1050
*                                                                      END),
*                     pairlist_sum > pairlist_sum_1054 : 
*                     SINGLE(LET  _1053 =  FUN('a_1052 ::  TYPE) = SUM(1,1)(APP(pairlist_sumarg_1051,('a_1052)))
*                            IN   _1053
*                            END)}}

 Expression variables and constructors are :

 Constructor variables, kinds, and equations are :
funct_arg_c_1043::          REC_K{ParserData > _c_1045 : 
*               REC_K{pairlist > pairlist_1048 :  Arrow_k(Open; _1047 : TYPE; TYPE),
*                     pairlist_sumarg > pairlist_sumarg_1051 :  SINGLE(LET  _1050 =  FUN('a_1049 ::  TYPE) = CREC{}
*                                                                      IN   _1050
*                                                                      END),
*                     pairlist_sum > pairlist_sum_1054 : 
*                     SINGLE(LET  _1053 =  FUN('a_1052 ::  TYPE) = SUM(1,1)(APP(pairlist_sumarg_1051,('a_1052)))
*                            IN   _1053
*                            END)}}

 Expression variables and constructors are :
          COERCION[ 'a_1055 ](APP(funct_arg_c_1043.ParserData. pairlist_sum,('a_1055)),APP(funct_arg_c_1043.ParserData. pairlist,
*                                                                                        ('a_1055)))
          COERCION[ 'a_1078 ](APP(funct_arg_c_1043.ParserData. pairlist_sum,('a_1078)),APP(funct_arg_c_1043.ParserData. pairlist,
*                                                                                        ('a_1078)))

 Constructor variables, kinds, and equations are :
funct_arg_c_1043::          REC_K{ParserData > _c_1045 : 
*               REC_K{pairlist > pairlist_1048 :  Arrow_k(Open; _1047 : TYPE; TYPE),
*                     pairlist_sumarg > pairlist_sumarg_1051 :  SINGLE(LET  _1050 =  FUN('a_1049 ::  TYPE) = CREC{}
*                                                                      IN   _1050
*                                                                      END),
*                     pairlist_sum > pairlist_sum_1054 : 
*                     SINGLE(LET  _1053 =  FUN('a_1052 ::  TYPE) = SUM(1,1)(APP(pairlist_sumarg_1051,('a_1052)))
*                            IN   _1053
*                            END)}}

 Expression variables and constructors are :

 Constructor variables, kinds, and equations are :
funct_arg_c_1043::          REC_K{ParserData > _c_1045 : 
*               REC_K{pairlist > pairlist_1048 :  Arrow_k(Open; _1047 : TYPE; TYPE),
*                     pairlist_sumarg > pairlist_sumarg_1051 :  SINGLE(LET  _1050 =  FUN('a_1049 ::  TYPE) = CREC{}
*                                                                      IN   _1050
*                                                                      END),
*                     pairlist_sum > pairlist_sum_1054 : 
*                     SINGLE(LET  _1053 =  FUN('a_1052 ::  TYPE) = SUM(1,1)(APP(pairlist_sumarg_1051,('a_1052)))
*                            IN   _1053
*                            END)}}

 Expression variables and constructors are :
          LET  funct_arg_ParserData_c_1090 = funct_arg_c_1043.ParserData
*              pairlist_1092 = funct_arg_c_1043.ParserData. pairlist
*              pairlist_sumarg_1093 = funct_arg_c_1043.ParserData. pairlist_sumarg
*              pairlist_sum_1094 = funct_arg_c_1043.ParserData. pairlist_sum
*              _c_1100 = CREC{pairlist = pairlist_1092, pairlist_sumarg = pairlist_sumarg_1093, pairlist_sum = pairlist_sum_1094}
*         IN   RECORD[+Npairlist_in, +Npairlist_out, +Epairlist]
*                (COERCION[ 'a_1055 ](APP(funct_arg_c_1043.ParserData. pairlist_sum,('a_1055)),APP(funct_arg_c_1043.ParserData.
*                                                                                                                   pairlist,
*                                                                                                ('a_1055))),
*                 COERCION[ 'a_1057 ](APP(funct_arg_c_1043.ParserData. pairlist,('a_1057)),APP(funct_arg_c_1043.ParserData.
*                                                                                                               pairlist_sum,
*                                                                                            ('a_1057))),
*                 ALLARROW(Open; TOTAL; (mpoly_var_c_1061 :: REC_K{'a > 'a_1063 :  TYPE}); 
*                    (mpoly_var_r_1062 :: DEP_RECORD[ ]); 0; 
*                    ALLARROW(Open; PARTIAL; (); 
*                       (RECORD[1, 2]
*                          (APP(funct_arg_c_1043.ParserData. pairlist,(mpoly_var_c_1061.'a)),
*                           APP(funct_arg_c_1043.ParserData. pairlist,(mpoly_var_c_1061.'a)))); 0; 
*                       PROJ(MU_NR((_1064=SUM(2,2)(CREC{}))),1))))
*         END
          LET  funct_arg_ParserData_c_1090 = funct_arg_c_1043.ParserData
*              pairlist_1092 = funct_arg_c_1043.ParserData. pairlist
*              pairlist_sumarg_1093 = funct_arg_c_1043.ParserData. pairlist_sumarg
*              pairlist_sum_1094 = funct_arg_c_1043.ParserData. pairlist_sum
*              _c_1100 = CREC{pairlist = pairlist_1092, pairlist_sumarg = pairlist_sumarg_1093, pairlist_sum = pairlist_sum_1094}
*         IN   DEP_RECORD[ +Npairlist_in > pairlist_in_1079, +Npairlist_out > pairlist_out_1081, +Epairlist > eqfun_r_1083]
*                (COERCION[ 'a_1078 ](APP(funct_arg_c_1043.ParserData. pairlist_sum,('a_1078)),APP(funct_arg_c_1043.ParserData.
*                                                                                                                   pairlist,
*                                                                                                ('a_1078))),
*                 COERCION[ 'a_1080 ](APP(funct_arg_c_1043.ParserData. pairlist,('a_1080)),APP(funct_arg_c_1043.ParserData.
*                                                                                                               pairlist_sum,
*                                                                                            ('a_1080))),
*                 ALLARROW(Open; TOTAL; (mpoly_var_c_1084 :: REC_K{'a > 'a_1086 :  TYPE}); 
*                    (mpoly_var_r_1085 :: DEP_RECORD[ ]); 0; 
*                    ALLARROW(Open; PARTIAL; (); 
*                       (RECORD[1, 2]
*                          (APP(funct_arg_c_1043.ParserData. pairlist,(mpoly_var_c_1084.'a)),
*                           APP(funct_arg_c_1043.ParserData. pairlist,(mpoly_var_c_1084.'a)))); 0; 
*                       PROJ(MU_NR((_1087=SUM(2,2)(CREC{}))),1))))
*         END
Error while calling module_valid
tilt: Unbound

Compilation exited abnormally with code 1 at Wed Nov 14 14:10:04
