Number: 0121
Title:       nonexhaustive binding failure in optimize1
Keywords:    optimizer
Submitter:   rwh
Date:        08/16/02
Version:     CVS
System:      any
Severity:    critical
Problem:     compiler faults with nonexhaustive binding failure in optimize1
Code:        
Transcript:  
Comments:    
	[Leaf] This was actually an elaborator/phase splitter bug.  The phase
	splitter takes advantage of elaborator invariants that were not 
	correctly being maintained: in particular that datatype labels
	are never actually used (since we inline constructors).
	
Fix:         
	[Leaf] More sanity checking code was added to the phase-splitter.
	Derek fixed the actual bug in the elaborator.

[Derek] The phase-splitter expects that all references to a datatype
constructor have been inlined by the elaborator, and it therefore can
eliminate the "inner module" of a datatype.  This turned out not to be
the case, in particular when coercing a polymorphic datatype
constructor to a polyval spec.  (Actually, there are other references
made to a datatype inner module, but they are only within other
datatype inner modules which get eliminated by the phase-splitter as
well, e.g. when coercing a datatype to a datatype spec, we copy a path
to the inner module to make the result shorter.)

This appeared to be a long-standing bug, as there was no code in place
to do inlining when coercing from a polymorphic value.  Now there is.

Test: m0059
Owner: rwh
Status: closed
