Number: 0039
Title:       Real numbers are broken.
Keywords:    Elaborator, Runtime, Basis
Submitter:   David Swasey <swasey@cs.cmu.edu>
Date:        12/21/00
Version:     CVS
System:	     all
Severity:    major
Problem:
	The elaborator does not do any range checks on floating point
	literals (see make_float_overload).

	The basis structures Real, Math, and IEEEReal are buggy and
	incomplete.

	Some specific errors from ../../Test/m0096/mapfile are:

		scalb : real * int -> real is not provided by the runtime
		which prevents these tests from running

		scalb(x,y) = x * 2^y

		Scale the first argument by 2 raised to the second argument.	 Raise
		Float("underflow") or Float("overflow") as appropriate.

		  (* This function is IEEE double-precision specific;
		     it works correctly on subnormal inputs and outputs;
		     we do not apply it to inf's and nan's *)
		    fun scalb (x, k) = 
			let val j = Assembly.A.logb x 
		            val k' = I.+(k,j)
		         in if j = ~1023
		            then scalb(x*two_to_the_54, I.-(k,54))        (*2*)
		            else if lessu(I.+(k',1022),2046)              
			         then Assembly.A.scalb(x,k)		  (*1*)
		            else if I.<(k',0)
		                 then if I.<(k',I.-(~1022,54))
				      then 0.0                            (*3*)
		                      else scalb(x,I.+(k,54)) * 
		                                     two_to_the_minus_54  (*4*)
		                 else x * plusInfinity                    (*5*)
		        end
		 (* Proof of correctness of scalb:      (Appel)
		     1. if x is normal and x*2^k is normal 
		           then case (*1*) applies, computes right answer
		     2. if x is subnormal and x*2^k is normal
		           then case (*2*) reduces problem to case 1.
		     3. if x*2^k is sub-subnormal (i.e. 0)
		           then case (*3*) applies, returns 0.0
		     4. if x*2^k is subnormal
		           then ~1076 < k' <= ~1023, case (*4*) applies,
		                 computes right answer
		     5. if x*2^k is supernormal (i.e. infinity)
		           then case (*5*) computes right answer
		*)

	Some specific errors from ../../Test/m0097/mapfile are:

		We can not tell because of the scalb problem.

	Some specific errors from ../../Test/m0100/mapfile are:

		We may get Real.maxFinite wrong
		We may get Real.minPos wrong
		We may get Real.minNormalPos wrong
		We probably get Real.precision wrong

	Some specific errors from ../../Test/m0101/mapfile are:

		We do not pass the Real.class tests because Real.class depends on
		scalb and that is not provided by the runtime.

	Some specific errors from ../../Test/m0102/mapfile are:

		The test calculates minNormalPos = minPos which is wrong.
		Real.minNormalPos = 1 which is wrong.

	On the alpha, TILT fails some of the simple tests in
	../../Test/0001/mapfile; the runtime says "Invalid Float
	operation; probably NAN operand; cannot patch result, resuming
	anyway".  This happens with other floating point code.  Dbx
	catches some floating point exceptions/signals before the
	"Invalid" message is printed.  The old bug list had this to say:

	>(6) floating point is wrong right now
	>	Currently, we place a trap barrier after each floating point instruction.
	>	We use the "su" version of the floating point instruction.
	>	For overflow and division by zero, our signal handler is not even
	>		called and the OS puts the right answer there.
	>		For NaNs, the right answer is put there but our
	>		signal handler is also called.  For this case, we just return.
	>	The OS handler may not be able to detect the correct answer
	>		if the floating point instruction's src and dest registers are the same.

Code:
Transcript:
Comments:
Fix:

	* Updated ../../Basis/Numeric/real-format.sml to match the
	new basis library spec.

	Fixes errors from ../../Test/m0099/mapfile:

		Real.toString 0.0 = "0.0" rather than "0"
		Similarly for ~2.0, ~1.0, 1.0, 2.0.

	Fixes errors from ../../Test/m0101/mapfile:

		Real.fmt(GEN NONE)0.0 = "0" not "0.0"
		Real.fmt(GEN NONE)1E21 = "1E21" not "1e21"
		Real.fmt(GEN (SOME 1))~1.0 = "~1" not "~1.0"
		Real.fmt(GEN (SOME 1))0.0 = "0" not "0.0"
		Real.fmt(GEN (SOME 1))1E21 = "1E21" not "1e21"
		Real.fmt(GEN (SOME 10))0.0 = "0" not "0.0"
		Real.fmt(GEN (SOME 10))1E21 = "1E21" not "1e21"

	* Upated ../../Basis/Numeric/math64c.sml to fix asin, acos, atan2,
	and ln errors.

	Fixes errors from ../../Test/m0033/mapfile:

		val test5d = tst0 "test5d" (if Real.isNan(asin 1.1) then "OK" else "WRONG")
		val test5e = tst0 "test5e" (if Real.isNan(asin ~1.1) then "OK" else "WRONG")
		val test6d = tst0 "test6d" (if Real.isNan(acos 1.1) then "OK" else "WRONG")
		val test6e = tst0 "test6e" (if Real.isNan(acos ~1.1) then "OK" else "WRONG")
		val test8a = tst2 "test8a" (atan2, 0.0, 0.0, 0.0);
		val test10e = tst0 "test10e" (if Real.isNan(ln ~1.0) then "OK" else "WRONG")

	Fixes errors from ../../Test/m0098/mapfile:

		print(concat[Real.toString(Real.Math.ln ~1.0), "\n"])

	printed ~inf rather than nan.

Test: 0001 m0033 m0096 m0097 m0098 m0099 m0100 m0101 m0102
Owner: swasey
Status: open
