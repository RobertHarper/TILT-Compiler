Number: 0153
Title:       Sharing abstract type and eqtype specs is broken.
Keywords:    type sharing
Submitter:   dreyer
Date:        08/26/02
Version:     
System:      
Severity:    reject
Problem:     

When we share a type and eqtype spec after the fact, the semantics of
the Definition are that the types are shared and both are viewed as
supporting equality (since one of them did already, and they're now
equivalent types!).  Bob and Leaf think this is strange, although I think
it's the only sensible thing.  In any case, we fail to implement this
in the example below because, after sharing, t still does not come
equipped with an equality function and it normalizes to itself.

Note that if you switch the order of "type t" and "eqtype u" in S, the
example elaborates, and it also elaborates if you change the spec of f
to "val f:int->u".  I think this conclusively demonstrates that what
is implemented is not a semantically valid alternative to the
Definition, and I doubt that one exists.

Code:        

(*$import *)

signature S = sig type t eqtype u sharing type t = u val f:int->t end

structure X :> S = struct type t = int type u = int fun f(x) = x end;

val y = X.f(3) = X.f(5)

Transcript:  

Error:  application is ill-typed.
  Function domain:           {teq_15684_22 *
*          teq_15684_22}
  Argument type:           {CON_PATH(strbindvar_15653.t_TYC) *
*          CON_PATH(strbindvar_15653.t_TYC)}
  Expanded function domain:           {teq_15684_22 *
*          teq_15684_22}
  Expanded argument type:           {CON_PATH(strbindvar_15653.t_TYC) *
*          CON_PATH(strbindvar_15653.t_TYC)}
unknown Warning: top-level unresolved tyvar -- setting to unit: tv_15687_25
Error: toil.sml: unresolved equality

Comments:

	We decided that the elaborator should only define equality
	functions (that is, +Et sdecs/sbnds) where abstract types are
	defined.

	The code generated by the datatype compiler has to be reorganized
	to accomplish this.

	Patching an eqtype spec with where type make the spec transparant
	so that any +E should be eliminated.  For example, elaborating

			sig etype 'a t end where type 'a t = 'a ref

	should not yield an sdecs with a +E.

Fix:         
Test: bug153
Owner: swasey
Status: open
