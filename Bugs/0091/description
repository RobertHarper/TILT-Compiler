Number: 0091
Title:       Unresolved equality expressions breaking elaborator
Keywords:    Elaborator, type inference, equality
Submitter:   Chris Stone and Perry Cheng
Date:        8/15/02
Version:     CVS
System:	     any
Severity:    major
Problem:
	Code involving equality at underdetermined types doesn't elaborate
        (which is an improvement, as it used to fail in the phase-splitter).

        Not exactly the same as, but possibly related to, bug 0055.

Code:

                (*$import List *)
                val test12 = (List.concat [] = [])


Transcript:

           [Elaborating test.sml non-constrained]
           Warning: top-level unresolved tyvar -- setting to type unit: tv_740525_29377

           uncaught exception Option
           raised at: boot/option.sml:17.25-17.31
                      Elaborator/equal.sml:68.7
                      Elaborator/equal.sml:393.24
                      Top/slave.sml:82.17 

Comments:

        In the original code, a tyvar and an overloaded expression
	that were generated by polymorphic instantiation were
	erroneously unconnected.  This eventually would fail because
	although the tyvar is set to unit (default top-level
	behavior), the overloaded expression (aka hole) was not filled
	and the phase-splitter would croak.

        In the improved but still broken code, the connection is made
	and the function Toil.eq_help now sees the tyvar and should
	check that the associated overloaded expression is set.
	However, when calling the equality compiler on the tyvar which
	is now set to unit (by the earlier phases of overload_wrap),
	we encounter an exception indicating that somehow we cannot
	generate a equality function at that tyvar.

	[tom7] Rather than manually setting it to unit, I con_eq it.
        Unification seems to invoke the equality compiler correctly. 
	I can compile the code above and the rest of the basis.

Fix:    Figure out why equality compiler is raising NoEqExp on that tyvar.
Test:   m0031
Owner: swasey
Status: open
