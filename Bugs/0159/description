Number: 0159
Title:       Phase splitter bombing on datatype replication.
Keywords:    datatype replication,elaborator,phase splitter
Submitter:   swasey
Date:        10/23/02
Version:     CVS
System:      any
Severity:    exception
Problem:     The compiler bombs with tonil.sml: Use of datatype label detected.
Code:
	(*$import *)
	datatype t = A
	val () =
	    let
		datatype t = datatype t
	    in  ()
	    end
Transcript:  
Comments:    
Fix:         

[dreyer] The problem was as follows:

"datatype t = datatype t" was being translated as

DTModule* |> x = [type t = t, val expose = expose, ...]

where DTModule was an open datatype label.  The phase-splitter relies on datatype
modules being given datatype labels so that it knows to throw them away.

However, we were elaborating core-level let-expressions by throwing away the
labels of the let-bound variables, i.e. the test case was elaborated as

let x = [type t = t, val expose = expose, ...] in () end

so the phase-splitter got confused.  The fix was simply to enclose the sbnds
generated by the let-declarations inside an *open* module, i.e. to follow the
Harper-Stone specification precisely.

(Note: A slight problem with this fix was that infix declarations made
inside the let were no longer being seen by the body of the let
(because they were inside the open module), but the fix for this was
simply to hoist out any such infix declarations and add them to the
context when typechecking the body of the let.)

Test: bug159
Owner: swasey
Status: closed
