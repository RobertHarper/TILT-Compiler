cd /usr0/swasey/ml96/Local/Bugs/0064/
tilt -fcheckReify1 -fshowReify1 -fshowInline1 mapfile-bug
Warning: setting TILT_LIBDIR to /usr0/swasey/t
Starting compilation           : Thu Nov 15 14:15:09 2001   0.0 sec
Warning: only compiling to assembly because non-native
Mapfile mapfile-bug with 2 units processed.
Imports read.
Dependency graph computed: 2 nodes and 1 edges.
Not reducing dependency graph.
Creating directories.
2 necessary units:   Prelude  Graph
Start compiling files          : Thu Nov 15 14:15:09 2001   0.0 sec
Starting slave ringtail.lemur.26063.
  [Plan for Graph:   generate  cleanup]
  [These files are up-to-date already:  Prelude]
  [Sending FLUSH_ALL to ringtail.lemur.26063]
  [Calling ringtail.lemur.26063 to compile Graph]
Slave received FLUSH_ALL.
Setting PtrWriteBarrier to true
Setting FullWriteBarrier to true
Setting MirrorGlobal to true
Setting MirrorPtrArray to false
Setting BranchingTraps to true
Setting UptoElaborate to false
Setting UptoPhasesplit to false
Setting UptoClosureConvert to false
Setting UptoRtl to false
Setting UptoAsm to true
Setting debug_asm to true
Setting keep_asm to true
Setting compress_asm to true
Setting ManagerChat to true
Setting ManagerVerbose to true
Setting TimeEachFile to false
Setting makeBackups to false
Setting ShowWrittenContext to false
Setting WriteUnselfContext to false
Setting ShowTools to false
  [Compiling Graph to assembly]
  [0 imports of total size 0 were cached.
   1 imports of total size 1140 were uncached and took 0.0 seconds.]
  [Added contexts.]
  [Parsing graph-bug.sml]
  [Elaborating graph-bug.sml non-constrained]
gc_context: 41 items in original context.  12 items in reduced context.
  [writing TM/any/graph-bug.sml.il - unnecessary]
===== Starting Phasesplit: Graph                         =====
  Initial context is phase-split
  Bindings are phase-split
  Imports are computed
  Exports are phase-split
===== Starting Rename: Graph                             =====
===== Starting Optimize1: Graph                          =====
===== Starting Vararg: Graph                             =====
===== Starting Inline1: Graph                            =====
  0 functions inlined once.
  0 copies of 0 other functions inlined.
PASS: Inline1
Inline1

          [test_1027 : Unknown = 
*            Handle[UNIT] Let  _1022 : Unknown = record()
*                         In   _1022
*                         End
*            With handle_exn_1016: EXN = 
*                 Let  shortResultType_1017 = UNIT
*                      _1026 : Unknown = 
*                        EXN_SWITCH(handle_exn_1016: EXN, 
*                             exnarg_var_1018, 
*                             Let  stamp_1023 : Unknown = select[stamp][](_r_1012)
*                             In   stamp_1023
*                             End: Unknown: Let  _1024 : Unknown = record()
*                                                                                            In   _1024
*                                                                                            End
*                             DEFAULT = Let  _1025 : Unknown = Raise(handle_exn_1016,shortResultType_1017)
*                                       In   _1025
*                                       End) : shortResultType_1017
*                 In   _1026
*                 End]
*         IMPORTS:
*         +O_A_INT_c = _c_990 : REC_K{A > _993 :  Arrow_k(Open; _992 : TYPE; TYPE),
*                                     A_sumarg > _996 :  SINGLE(LET  _995 =  FUN(_994 ::  TYPE) = CREC{}
*                                                               IN   _995
*                                                               END),
*                                     A_sum > _999 :  SINGLE(LET  _998 =  FUN(_997 ::  TYPE) = SUM(1,1)(APP(_996,(_997)))
*                                                            IN   _998
*                                                            END)}
*         Cycle_c = _c_1011 : REC_K{}
*         Cycle_r > _r_1012 : Unknown : DEP_RECORD[ stamp > _1013, mk > _1014]
*                                         (EXNTAG(APP(_c_990.A,(INT32))),
*                                          VARARG[Open=>](LET  type_1032 = _c_990.A
*                                                              type_1033 = APP(type_1032,(INT32))
*                                                         IN   type_1033
*                                                         END, EXN))
*         EXPORTS:
*         test = test_1027
*         
===== Starting Reify1: Graph                             =====
PASS: Reify1
Reify1

          [test_1027 : Trace = 
*            Handle[UNIT] Let  _1022 : Trace = record()
*                         In   _1022
*                         End
*            With handle_exn_1016: EXN = 
*                 Let  STATIC shortResultType_1017 = UNIT
*                      _1026 : Trace = 
*                        EXN_SWITCH(handle_exn_1016: EXN, 
*                             exnarg_var_1018, 
*                             Let  stamp_1023 : Int = select[stamp][](_r_1012)
*                             In   stamp_1023
*                             End: Compute(reify_1034): Let  _1024 : Trace = record()
*                                                                                                    In   _1024
*                                                                                                    End
*                             DEFAULT = Let  _1025 : Trace = Raise(handle_exn_1016,shortResultType_1017)
*                                       In   _1025
*                                       End) : shortResultType_1017
*                 In   _1026
*                 End]
*         IMPORTS:
*         +O_A_INT_c = _c_990 : REC_K{A > _993 :  Arrow_k(Open; _992 : TYPE; TYPE),
*                                     A_sumarg > _996 :  SINGLE(LET  _995 =  FUN(_994 ::  TYPE) = CREC{}
*                                                               IN   _995
*                                                               END),
*                                     A_sum > _999 :  SINGLE(LET  _998 =  FUN(_997 ::  TYPE) = SUM(1,1)(APP(_996,(_997)))
*                                                            IN   _998
*                                                            END)}
*         Cycle_c = _c_1011 : REC_K{}
*         Cycle_r > _r_1012 : Trace : DEP_RECORD[ stamp > _1013, mk > _1014]
*                                       (EXNTAG(APP(_c_990.A,(INT32))),
*                                        VARARG[Open=>](LET  type_1032 = _c_990.A
*                                                            type_1033 = APP(type_1032,(INT32))
*                                                       IN   type_1033
*                                                       END, EXN))
*         EXPORTS:
*         test = test_1027
*         
  Done checking context
  Done validating imports

 Constructor variables, kinds, and equations are :
shortResultType_1017 = UNIT::SINGLE_TYPE(UNIT)
_c_1011::REC_K{}
_c_990::          REC_K{A > _993 :  Arrow_k(Open; _992 : TYPE; TYPE),
*               A_sumarg > _996 :  Arrow_k(Open; _994 : TYPE; REC_K{}),
*               A_sum > _999 :  Arrow_k(Open; _997 : TYPE; SINGLE_TYPE(SUM(1,1)(APP(_996,(_997)))))}

 Expression variables and constructors are :
_r_1012:          DEP_RECORD[ stamp > _1013, mk > _1014]
*           (EXNTAG(APP(_c_990.A,(INT32))), VARARG[Open=>](LET  type_1032 = _c_990.A
*                                                               type_1033 = APP(type_1032,(INT32))
*                                                          IN   type_1033
*                                                          END, EXN))
handle_exn_1016:EXN
exnarg_var_1018:APP(_c_990.A,(INT32))
Error while calling module_valid
tilt: NilStatic::niltrace_valid: variable reify_1034 not in context

Compilation exited abnormally with code 1 at Thu Nov 15 14:15:09
