===== Starting Hoist: PreString                          =====
Imports Processed
PASS: Hoist
Hoist

          [reify_1199 = APP(_c_1018.list,(VECTOR(INT8))),
*          shortResultType_1045 = UNIT,
*          type_1098 = VECTOR(INT8),
*          type_1102 = _c_1018.list_sum,
*          type_1103 = VECTOR(INT8),
*          type_1104 = APP(type_1102,(type_1103)),
*          reify_1211 = APP(_c_1018.list,(type_1103)),
*          type_1109 = MU_NR((_1057=SUM(2,2)(CREC{}))),
*          type_1110 = type_1109.1,
*          type_1111 = CREC{},
*          type_1112 = SUM(2,2)(type_1111),
*          type_1165 = _c_1018.list,
*          type_1166 = VECTOR(INT8),
*          type_1167 = APP(type_1165,(type_1166)),
*          repeat_casevar_1047 : Trace = record(),
*          _1096 : Trace = record(),
*          /NORECUR\anonfun_1046
*            ( ;;  ;; )
*          =>shortResultType_1045 =
*          _1096,
*          +Nlist_out_1097 : Int = select[+Nlist_out][](_r_1019),
*          _1113 : Int = UNFOLD( ,type_1110,type_1112 ),
*          _1114 : Trace = EmptyVectorValue,
*          _1118 : Trace = record(),
*          funarg_1161 : Trace = _1118,
*          repeat_casevar_1186 : Trace = record(),
*          _1187 : Trace = record(),
*          _1162 : Trace = _1187,
*          _1119 : Trace = _1162,
*          _1122 : Trace = record(),
*          funarg_1171 : Trace = _1122,
*          repeat_casevar_1190 : Trace = record(),
*          _1191 : Trace = record(),
*          _1172 : Trace = _1191,
*          _1123 : Trace = _1172,
*          /\ find_1148
*            ( ;; mvar_1044 : Compute(reify_1199) : APP(_c_1018.list,(VECTOR(INT8))) ;; )
*          ->UNIT =
*          Let  find_1149 : Trace = make_vararg[Open][APP(_c_1018.list,(VECTOR(INT8))), UNIT](find_1148)
*               _1101 : Trace = COERCE( +Nlist_out_1097[type_1098],mvar_1044 )
*               _1124 : Trace = 
*                 SUM_SWITCH(_1101: APP(_c_1018.list_sum,(VECTOR(INT8))), 
*                      sumswitch_arg_1053, 
*                      1: Trace:: 
*                        Let  _1105 : Trace = project_known1[type_1104](sumswitch_arg_1053)
*                             v1_1106 : Trace = select[1][](_1105)
*                             v2_1107 : Compute(reify_1211) = select[2][](_1105)
*                             _1115 : Trace = record(1>v1_1106, 2>_1114)
*                             funarg_1156 : Trace = _1115
*                             funarg_1_1157 : Trace = select[1][](funarg_1156)
*                             funarg_2_1158 : Trace = select[2][](funarg_1156)
*                             _1121 : Trace = 
*                               SUM_SWITCH(Let  _1159 : Trace = App_Open(_1042;  ; funarg_1_1157, funarg_2_1158;  )
*                                               _1116 : Trace = _1159
*                                               _1117 : Trace = COERCE( _1113[],_1116 )
*                                          In   _1117
*                                          End: SUM(2,2)
*                                                                                                                      (CREC{}), 
*                                    unused_1058, 
*                                    0: Trace:: _1119
*                                    1: Trace:: Let  _1168 : Trace = make_onearg[Open][type_1167, UNIT](find_1149)
*                                                    _1169 : Trace = App_Open(_1168;  ; v2_1107;  )
*                                                    _1120 : Trace = _1169
*                                               In   _1120
*                                               End
*                                    NODEFAULT) : shortResultType_1045
*                        In   _1121
*                        End
*                      DEFAULT = _1123) : shortResultType_1045
*          In   _1124
*          End,
*          find_1043 : Trace = make_vararg[Open][APP(_c_1018.list,(VECTOR(INT8))), UNIT](find_1148)]
*         IMPORTS:
*         +O_list_INT_c = _c_1018 : REC_K{list > _1021 :  Arrow_k(Open; _1020 : TYPE; TYPE),
*                                         list_sumarg > _1024 : 
*                                         SINGLE(LET  _1023 =  FUN(_1022 ::  TYPE) = RECORD[1, 2](_1022, APP(_1021,(_1022)))
*                                                IN   _1023
*                                                END),
*                                         list_sum > _1027 : 
*                                         SINGLE(LET  _1026 =  FUN(_1025 ::  TYPE) = SUM(1,2)(APP(_1024,(_1025)))
*                                                IN   _1026
*                                                END)}
*         +O_list_INT_r > _r_1019 : Trace : DEP_RECORD[ +Nlist_in > _1029, +Nlist_out > _1031, +Elist > _r_1033]
*                                             (COERCION[ _1028 ](LET  type_1064 = _c_1018.list_sum
*                                                                     type_1065 = APP(type_1064,(_1028))
*                                                                IN   type_1065
*                                                                END,
*         +1   LET  type_1066 = _c_1018.list
*         +1        type_1067 = APP(type_1066,(_1028))
*         +1   IN   type_1067
*         +1   END),
*                                              COERCION[ _1030 ](LET  type_1068 = _c_1018.list
*                                                                     type_1069 = APP(type_1068,(_1030))
*                                                                IN   type_1069
*                                                                END,
*         +1   LET  type_1070 = _c_1018.list_sum
*         +1        type_1071 = APP(type_1070,(_1030))
*         +1   IN   type_1071
*         +1   END),
*                                              ALLARROW(Open; TOTAL; (_c_1034 :: REC_K{'a > _1036 :  TYPE}); 
*                                                 (_r_1035 :: LET  type_1078 = DEP_RECORD[ +E'a > _1038]
*                                                                                (ALLARROW(Open; PARTIAL; (); 
*                                                                                    (_c_1034.'a, _c_1034.'a); 0; 
*                                                                                    LET  type_1076 = MU_NR((_1037=SUM(2,2)
*                                                                                                                    (CREC{})))
*                                                                                         type_1077 = type_1076.1
*                                                                                    IN   type_1077
*                                                                                    END))
*                                                             IN   type_1078
*                                                             END); 0; 
*                                                 LET  type_1089 = ALLARROW(Open; PARTIAL; (); 
*                                                                     (APP(_c_1018.list,(_c_1034.'a)),
*                                                                      APP(_c_1018.list,(_c_1034.'a))); 0; 
*                                                                     LET  type_1087 = MU_NR((_1039=SUM(2,2)(CREC{})))
*                                                                          type_1088 = type_1087.1
*                                                                     IN   type_1088
*                                                                     END)
*                                                 IN   type_1089
*                                                 END))
*         +Estring > _1042 : Trace : ALLARROW(Open; PARTIAL; (); 
*                                       (VECTOR(INT8), VECTOR(INT8)); 0; 
*                                       LET  type_1094 = MU_NR((_1041=SUM(2,2)(CREC{})))
*                                            type_1095 = type_1094.1
*                                       IN   type_1095
*                                       END)
*         EXPORTS:
*         find = find_1043
*         
  Done checking context
  Done validating imports
  Done validating module
  Done validating exports
