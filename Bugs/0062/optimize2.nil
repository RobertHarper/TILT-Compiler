===== Starting Optimize2: PreString                      =====
PASS: Optimize2
Optimize2

          [shortResultType_1045 = UNIT,
*          type_1098 = VECTOR(INT8),
*          type_1102 = _c_1018.list_sum,
*          type_1104 = APP(type_1102,(type_1098)),
*          reify_1211 = APP(_c_1018.list,(type_1098)),
*          type_1109 = MU_NR((_1057=SUM(2,2)(CREC{}))),
*          type_1110 = type_1109.1,
*          type_1111 = CREC{},
*          type_1112 = SUM(2,2)(type_1111),
*          type_1165 = _c_1018.list,
*          repeat_casevar_1047 : Trace = record(),
*          +Nlist_out_1097 : Int = select[+Nlist_out][](_r_1019),
*          _1113 : Int = UNFOLD( ,type_1110,type_1112 ),
*          funarg_2_1114 : Trace = EmptyVectorValue,
*          /\ find_1148
*            ( ;; mvar_1044 : Compute(reify_1199) : APP(type_1165,(VECTOR(INT8))) ;; )
*          ->UNIT =
*          Let  _1101 : Trace = COERCE( +Nlist_out_1097[type_1098],mvar_1044 )
*               _1124 : Trace = 
*                 SUM_SWITCH(_1101: APP(type_1102,(VECTOR(INT8))), 
*                      sumswitch_arg_1053, 
*                      1: Trace:: 
*                        Let  _1105 : Trace = project_known1[type_1104](sumswitch_arg_1053)
*                             v1_1106 : Trace = select[1][](_1105)
*                             v2_1107 : Compute(reify_1211) = select[2][](_1105)
*                             _1121 : Trace = 
*                               SUM_SWITCH(Let  _1159 : Trace = App_Open(_1042;  ; v1_1106, funarg_2_1114;  )
*                                               _1117 : Trace = COERCE( _1113[],_1159 )
*                                          In   _1117
*                                          End: SUM(2,2)(CREC{}), 
*                                    unused_1058, 
*                                    0: Trace:: repeat_casevar_1047
*                                    1: Trace:: Let  _1169 : Trace = App_Open(find_1148;  ; v2_1107;  )
*                                               In   _1169
*                                               End
*                                    NODEFAULT) : shortResultType_1045
*                        In   _1121
*                        End
*                      DEFAULT = repeat_casevar_1047) : shortResultType_1045
*          In   _1124
*          End,
*          find_1043 : Trace = make_vararg[Open][APP(type_1165,(VECTOR(INT8))), UNIT](find_1148)]
*         IMPORTS:
*         +O_list_INT_c = _c_1018 : REC_K{list > _1021 :  Arrow_k(Open; _1020 : TYPE; TYPE),
*                                         list_sumarg > _1024 : 
*                                         SINGLE(LET  _1023 =  FUN(_1022 ::  TYPE) = RECORD[1, 2](_1022, APP(_1021,(_1022)))
*                                                IN   _1023
*                                                END),
*                                         list_sum > _1027 : 
*                                         SINGLE(LET  _1026 =  FUN(_1025 ::  TYPE) = SUM(1,2)(APP(_1024,(_1025)))
*                                                IN   _1026
*                                                END)}
*         +O_list_INT_r > _r_1019 : Trace : DEP_RECORD[ +Nlist_in > _1029, +Nlist_out > _1031, +Elist > _r_1033]
*                                             (COERCION[ _1028 ](LET  type_1064 = _c_1018.list_sum
*                                                                     type_1065 = APP(type_1064,(_1028))
*                                                                IN   type_1065
*                                                                END,
*         +1   LET  type_1066 = _c_1018.list
*         +1        type_1067 = APP(type_1066,(_1028))
*         +1   IN   type_1067
*         +1   END),
*                                              COERCION[ _1030 ](LET  type_1068 = _c_1018.list
*                                                                     type_1069 = APP(type_1068,(_1030))
*                                                                IN   type_1069
*                                                                END,
*         +1   LET  type_1070 = _c_1018.list_sum
*         +1        type_1071 = APP(type_1070,(_1030))
*         +1   IN   type_1071
*         +1   END),
*                                              ALLARROW(Open; TOTAL; (_c_1034 :: REC_K{'a > _1036 :  TYPE}); 
*                                                 (_r_1035 :: LET  type_1078 = DEP_RECORD[ +E'a > _1038]
*                                                                                (ALLARROW(Open; PARTIAL; (); 
*                                                                                    (_c_1034.'a, _c_1034.'a); 0; 
*                                                                                    LET  type_1076 = MU_NR((_1037=SUM(2,2)
*                                                                                                                    (CREC{})))
*                                                                                         type_1077 = type_1076.1
*                                                                                    IN   type_1077
*                                                                                    END))
*                                                             IN   type_1078
*                                                             END); 0; 
*                                                 LET  type_1089 = ALLARROW(Open; PARTIAL; (); 
*                                                                     (APP(_c_1018.list,(_c_1034.'a)),
*                                                                      APP(_c_1018.list,(_c_1034.'a))); 0; 
*                                                                     LET  type_1087 = MU_NR((_1039=SUM(2,2)(CREC{})))
*                                                                          type_1088 = type_1087.1
*                                                                     IN   type_1088
*                                                                     END)
*                                                 IN   type_1089
*                                                 END))
*         +Estring > _1042 : Trace : ALLARROW(Open; PARTIAL; (); 
*                                       (VECTOR(INT8), VECTOR(INT8)); 0; 
*                                       LET  type_1094 = MU_NR((_1041=SUM(2,2)(CREC{})))
*                                            type_1095 = type_1094.1
*                                       IN   type_1095
*                                       END)
*         EXPORTS:
*         find = find_1043
*         
  Done checking context
  Done validating imports

 Constructor variables, kinds, and equations are :
type_1165 = _c_1018.list::Arrow_k(Open; _1020 : TYPE; SINGLE_TYPE(APP(_c_1018.list,(_1020))))
type_1112 = SUM(2,2)(type_1111)::SINGLE_TYPE(SUM(2,2)(type_1111))
type_1111 = CREC{}::REC_K{}
type_1110 = PROJ(MU_NR((_1057=SUM(2,2)(CREC{}))),1)::SINGLE_TYPE(type_1109.1)
type_1109 = MU_NR((_1057=SUM(2,2)(CREC{})))::REC_K{1 > _1243 :  SINGLE_TYPE(PROJ(MU_NR((_1057=SUM(2,2)(CREC{}))),1))}
reify_1211 = APP(_c_1018.list,(type_1098))::SINGLE_TYPE(APP(_c_1018.list,(type_1098)))
type_1104 = APP(type_1102,(type_1098))::SINGLE_TYPE(APP(type_1102,(type_1098)))
type_1102 = _c_1018.list_sum::Arrow_k(Open; _1025 : TYPE; SINGLE_TYPE(APP(_c_1018.list_sum,(_1025))))
type_1098 = VECTOR(INT8)::SINGLE_TYPE(VECTOR(INT8))
shortResultType_1045 = UNIT::SINGLE_TYPE(UNIT)
_c_1018::          REC_K{list > _1021 :  Arrow_k(Open; _1020 : TYPE; TYPE),
*               list_sumarg > _1024 :  Arrow_k(Open; _1022 : TYPE; SINGLE_TYPE(RECORD[1, 2](_1022, APP(_1021,(_1022))))),
*               list_sum > _1027 :  Arrow_k(Open; _1025 : TYPE; SINGLE_TYPE(SUM(1,2)(APP(_1024,(_1025)))))}

 Expression variables and constructors are :
_r_1019:          DEP_RECORD[ +Nlist_in > _1029, +Nlist_out > _1031, +Elist > _r_1033]
*           (COERCION[ _1028 ](LET  type_1064 = _c_1018.list_sum
*                                   type_1065 = APP(type_1064,(_1028))
*                              IN   type_1065
*                              END,LET  type_1066 = _c_1018.list
*                                                                           type_1067 = APP(type_1066,(_1028))
*                                                                      IN   type_1067
*                                                                      END),
*            COERCION[ _1030 ](LET  type_1068 = _c_1018.list
*                                   type_1069 = APP(type_1068,(_1030))
*                              IN   type_1069
*                              END,LET  type_1070 = _c_1018.list_sum
*                                                                           type_1071 = APP(type_1070,(_1030))
*                                                                      IN   type_1071
*                                                                      END),
*            ALLARROW(Open; TOTAL; (_c_1034 :: REC_K{'a > _1036 :  TYPE}); 
*               (_r_1035 :: LET  type_1078 = DEP_RECORD[ +E'a > _1038]
*                                              (ALLARROW(Open; PARTIAL; (); 
*                                                  (_c_1034.'a, _c_1034.'a); 0; 
*                                                  LET  type_1076 = MU_NR((_1037=SUM(2,2)(CREC{})))
*                                                       type_1077 = type_1076.1
*                                                  IN   type_1077
*                                                  END))
*                           IN   type_1078
*                           END); 0; 
*               LET  type_1089 = ALLARROW(Open; PARTIAL; (); 
*                                   (APP(_c_1018.list,(_c_1034.'a)), APP(_c_1018.list,(_c_1034.'a))); 0; 
*                                   LET  type_1087 = MU_NR((_1039=SUM(2,2)(CREC{})))
*                                        type_1088 = type_1087.1
*                                   IN   type_1088
*                                   END)
*               IN   type_1089
*               END))
_1042:          ALLARROW(Open; PARTIAL; (); (VECTOR(INT8), VECTOR(INT8)); 0; LET  type_1094 = MU_NR((_1041=SUM(2,2)(CREC{})))
*                                                                           type_1095 = type_1094.1
*                                                                      IN   type_1095
*                                                                      END)
repeat_casevar_1047:UNIT
+Nlist_out_1097:          COERCION[ _1030 ](LET  type_1068 = _c_1018.list
*                                type_1069 = APP(type_1068,(_1030))
*                           IN   type_1069
*                           END,LET  type_1070 = _c_1018.list_sum
*                                                                        type_1071 = APP(type_1070,(_1030))
*                                                                   IN   type_1071
*                                                                   END)
_1113:COERCION[  ](type_1110,type_1112)
funarg_2_1114:VECTOR(INT8)
find_1148:ALLARROW(Open; PARTIAL; (); (APP(type_1165,(VECTOR(INT8)))); 0; UNIT)
Error while calling module_valid
tilt: NilStatic::niltrace_valid: variable reify_1199 not in context

Compilation exited abnormally with code 1 at Thu Nov  8 16:19:32
