cd /usr0/swasey/ml96/Local/Bugs/0059/
tilt -fshowHIL -fshowHILContext mapfile-bug
Warning: setting TILT_LIBDIR to /usr0/swasey/t
Starting compilation           : Tue Oct 30 16:53:09 2001   0.0 sec
Warning: only compiling to assembly because non-native
Mapfile mapfile-bug with 1 units processed.
Imports read.
Dependency graph computed: 1 nodes and 0 edges.
Not reducing dependency graph.
Creating directories.
1 necessary units:   Join
Start compiling files          : Tue Oct 30 16:53:09 2001   0.08 sec
Starting slave c1660464-a.ehlls1.pa.home.com.953.
  [Plan for Join:   generate  cleanup]
  [Sending FLUSH_ALL to c1660464-a.ehlls1.pa.home.com.953]
  [Calling c1660464-a.ehlls1.pa.home.com.953 to compile Join]
Slave received FLUSH_ALL.
Setting PtrWriteBarrier to true
Setting FullWriteBarrier to true
Setting MirrorGlobal to true
Setting MirrorPtrArray to false
Setting BranchingTraps to true
Setting UptoElaborate to false
Setting UptoPhasesplit to false
Setting UptoClosureConvert to false
Setting UptoRtl to false
Setting UptoAsm to true
Setting debug_asm to true
Setting keep_asm to true
Setting compress_asm to true
Setting ManagerChat to true
Setting ManagerVerbose to true
Setting TimeEachFile to false
Setting makeBackups to false
Setting ShowWrittenContext to false
Setting WriteUnselfContext to false
Setting ShowTools to false
  [Compiling Join to assembly]
  [0 imports of total size 0 were cached.
   0 imports of total size 0 were uncached and took 0.0 seconds.]
  [Added contexts.]
  [Parsing join-bug.sml]
  [Elaborating join-bug.sml non-constrained]

CONTEXT:
          ---- Fixity ----
*         
*         ---- Overload ----
*         
*         ---- Pathmap ----
*         ->_TYC --> ->_723 : PC_CON_INLINE->_723: KIND(2 -> TYPE)= /-\(_715, _716)(_715 -> _716))
*         real_TYC --> real_724 : PC_CON_INLINEreal_724: TYPE= FLOAT64)
*         int_TYC --> int_725 : PC_CON_INLINEint_725: TYPE= INT32)
*         word_TYC --> word_726 : PC_CON_INLINEword_726: TYPE= UINT32)
*         char_TYC --> char_727 : PC_CON_INLINEchar_727: TYPE= UINT8)
*         exn_TYC --> exn_728 : PC_CON_INLINEexn_728: TYPE= ANY)
*         unit_TYC --> unit_729 : PC_CON_INLINEunit_729: TYPE= UNIT)
*         ref_TYC --> ref_730 : PC_CON_INLINEref_730: KIND(1 -> TYPE)= /-\(_717)REF(_717))
*         array_TYC --> array_731 : PC_CON_INLINEarray_731: KIND(1 -> TYPE)= /-\(_718)_718 ARRAY)
*         vector_TYC --> vector_732 : PC_CON_INLINEvector_732: KIND(1 -> TYPE)= /-\(_719)_719 VECTOR)
*         not --> not_745 : PC_EXP_INLINEnot_745: (CON_MU(/-\(_259)(SUM[(false, true); 2; ()]))#0 ->
*                                                 CON_MU(/-\(_259)(SUM[(false, true); 2; ()]))#0)= 
*         +1   /NONRECUR\anonfun_744
*         +1         (not_arg_742 : CON_MU(/-\(_259)(SUM[(false, true); 2; ()]))#0)
*         +1         : CON_MU(/-\(_259)(SUM[(false, true); 2; ()]))#0 =
*         +1   CASE(arg = COERCE(UNFOLD([], CON_MU(/-\(_259)(SUM[(false, true); 2; ()]))#0, SUM[(false, true); 2; ()]), [], not_arg_742):
*         +1        SUM[(false, true); 2; ()],
*         +1        resultType = CON_MU(/-\(_259)(SUM[(false, true); 2; ()]))#0,
*         +1        boundVar = unused_743,
*         +1        0: COERCE(FOLD([], SUM[(false, true); 2; ()], CON_MU(/-\(_259)(SUM[(false, true); 2; ()]))#0),
*         +1                  [],
*         +1                  INJ(1, SUM[(false, true); 2; ()])),
*         +1        1: COERCE(FOLD([], SUM[(false, true); 2; ()], CON_MU(/-\(_259)(SUM[(false, true); 2; ()]))#0),
*         +1                  [],
*         +1                  INJ(0, SUM[(false, true); 2; ()])),
*         +1        Default: ---))
*         ord --> ord_747 : PC_EXP_INLINEord_747: (UINT8 -> INT32)= UINT2INT(8->32)[])
*         real --> real_748 : PC_EXP_INLINEreal_748: (INT32 -> FLOAT64)= INT2FLOAT[])
*         ref --> ref_mod_818 : PC_$POLY$MOD(ref_mod_818: SIGS_SELF(ref_mod_818, 
*                                                         UNSELF_SIG = NONE
*                                                         SELF_SIG = SIGF(_812, [ref_INT > _813 : TYPE] =>
*                                                                            [it_INT > ref_817 : 
**                                                                               (CON_PATH(_812.ref_INT) ->
**                                                                               REF(CON_PATH(_812.ref_INT))) == 
**                                                                                  /NONRECUR\anonfun_815
**                                                                                        (_814 : CON_PATH(_812.ref_INT))
**                                                                                        : REF(CON_PATH(_812.ref_INT)) =
**                                                                                  MK_REF[CON_PATH(_812.ref_INT)][_814]])
*                                                         ))
*         ! --> !_mod_825 : PC_$POLY$MOD(!_mod_825: SIGS_SELF(!_mod_825, 
*                                                   UNSELF_SIG = NONE
*                                                   SELF_SIG = SIGF(_819, [!_INT > _820 : TYPE] =>
*                                                                      [it_INT > !_824 : 
**                                                                         (REF(CON_PATH(_819.!_INT)) -> CON_PATH(_819.!_INT)) == 
**                                                                            /NONRECUR\anonfun_822
**                                                                                  (_821 : REF(CON_PATH(_819.!_INT)))
**                                                                                  : CON_PATH(_819.!_INT) =
**                                                                            DEREF[CON_PATH(_819.!_INT)][_821]])
*                                                   ))
*         := --> :=_mod_832 : PC_$POLY$MOD(:=_mod_832: SIGS_SELF(:=_mod_832, 
*                                                      UNSELF_SIG = NONE
*                                                      SELF_SIG = SIGF(_826, [:=_INT > _827 : TYPE] =>
*                                                                         [it_INT > :=_831 : 
**                                                                            ({REF(CON_PATH(_826.:=_INT)) *
**                                                                              CON_PATH(_826.:=_INT)} -> UNIT) == 
**                                                                               /NONRECUR\anonfun_829
**                                                                                     (_828 : {REF(CON_PATH(_826.:=_INT)) *
**                                                                                              CON_PATH(_826.:=_INT)})
**                                                                                     : UNIT =
**                                                                               SETREF[CON_PATH(_826.:=_INT)][(_828)#1_~48,
**                                                                                                             (_828)#2_~48]])
*                                                      ))
*         +O_bool_INT --> _bool_912 : PC_MOD(_bool_912: SIGS_SELF(_bool_912, 
*                                                       UNSELF_SIG = NONE
*                                                       SELF_SIG = 
*         +1   [bool_TYC > bool_907 : TYPE == CON_MU(/-\(vdt_bool_921)(SUM[(false, true); 2; ()]))#0, 
*         +1    bool_sumarg_INT > bool_sumarg_915 : KIND(0) = (), 
*         +1    bool_sum_INT > bool_sum_916 : TYPE = SUM[(false, true); 2; CON_PATH(_bool_912.bool_sumarg_INT)], 
*         +1    +Nbool_in_INT > bool_in_919 : CON_COERCION([], CON_PATH(_bool_912.bool_sum_INT), CON_PATH(_bool_912.bool_TYC)), 
*         +1    +Nbool_out_INT > bool_out_920 : CON_COERCION([], CON_PATH(_bool_912.bool_TYC), CON_PATH(_bool_912.bool_sum_INT)), 
*         +1    +Ebool_INT > +Ebool_INT_948 : ({CON_PATH(_bool_912.bool_TYC) *
**        +1                                    CON_PATH(_bool_912.bool_TYC)} -> CON_MU(/-\(_259)(SUM[(false, true); 2; ()]))#0), 
*         +1    +O+Dbool_INT > bool_914 : 
**        +1       SIGS_SELF(_bool_912.+O+Dbool_INT, 
**        +1       UNSELF_SIG = NONE
**        +1       SELF_SIG = [bool_INT > copy_bool_909 : TYPE == CON_PATH(_bool_912.bool_TYC), 
**        +1                   expose_INT > exposer_942 : 
***       +1                      (CON_PATH(_bool_912.bool_TYC) => CON_PATH(_bool_912.bool_sum_INT)) == 
***       +1                         /TOTALNONRECUR\anonfun_925
***       +1                               (exposee_924 : CON_PATH(_bool_912.bool_TYC))
***       +1                               : CON_PATH(_bool_912.bool_sum_INT) =
***       +1                         COERCE(_bool_912.+Nbool_out_INT, [], exposee_924), 
**        +1                   false > _944 : 
***       +1                      CON_PATH(_bool_912.bool_TYC) == 
***       +1                         COERCE(_bool_912.+Nbool_in_INT, [], INJ(0, CON_PATH(_bool_912.bool_sum_INT))), 
**        +1                   true > _946 : 
***       +1                      CON_PATH(_bool_912.bool_TYC) == 
***       +1                         COERCE(_bool_912.+Nbool_in_INT, [], INJ(1, CON_PATH(_bool_912.bool_sum_INT)))]
**        +1       )]
*                                                       ))
*         bool_TYC --> _bool_912.bool_TYC : PC_CON_INLINECON_PATH(_bool_912.bool_TYC): TYPE= CON_MU(/-\(vdt_bool_921)
*                                                                                                   (SUM[(false, true); 2; ()]))#0)
*         bool_sumarg_INT --> _bool_912.bool_sumarg_INT : PC_CON(CON_PATH(_bool_912.bool_sumarg_INT): KIND(0)= ())
*         bool_sum_INT --> _bool_912.bool_sum_INT : PC_CON(CON_PATH(_bool_912.bool_sum_INT): TYPE= 
*         +1   SUM[(false, true); 2; CON_PATH(_bool_912.bool_sumarg_INT)])
*         +Nbool_in_INT --> _bool_912.+Nbool_in_INT : PC_EXP(_bool_912.+Nbool_in_INT: 
*         +1   CON_COERCION([], CON_PATH(_bool_912.bool_sum_INT), CON_PATH(_bool_912.bool_TYC)))
*         +Nbool_out_INT --> _bool_912.+Nbool_out_INT : PC_EXP(_bool_912.+Nbool_out_INT: 
*         +1   CON_COERCION([], CON_PATH(_bool_912.bool_TYC), CON_PATH(_bool_912.bool_sum_INT)))
*         +Ebool_INT --> _bool_912.+Ebool_INT : PC_EXP(_bool_912.+Ebool_INT: ({CON_PATH(_bool_912.bool_TYC) *
*                                                                              CON_PATH(_bool_912.bool_TYC)} ->
*                                                                            CON_MU(/-\(_259)(SUM[(false, true); 2; ()]))#0))
*         +O+Dbool_INT --> _bool_912.+O+Dbool_INT : PC_MOD(MPROJ(_bool_912,+O+Dbool_INT): 
*         +1   SIGS_SELF(_bool_912.+O+Dbool_INT, 
*         +1   UNSELF_SIG = NONE
*         +1   SELF_SIG = [bool_INT > copy_bool_909 : TYPE == CON_PATH(_bool_912.bool_TYC), 
*         +1               expose_INT > exposer_942 : 
**        +1                  (CON_PATH(_bool_912.bool_TYC) => CON_PATH(_bool_912.bool_sum_INT)) == 
**        +1                     /TOTALNONRECUR\anonfun_925
**        +1                           (exposee_924 : CON_PATH(_bool_912.bool_TYC))
**        +1                           : CON_PATH(_bool_912.bool_sum_INT) =
**        +1                     COERCE(_bool_912.+Nbool_out_INT, [], exposee_924), 
*         +1               false > _944 : 
**        +1                  CON_PATH(_bool_912.bool_TYC) == 
**        +1                     COERCE(_bool_912.+Nbool_in_INT, [], INJ(0, CON_PATH(_bool_912.bool_sum_INT))), 
*         +1               true > _946 : 
**        +1                  CON_PATH(_bool_912.bool_TYC) == 
**        +1                     COERCE(_bool_912.+Nbool_in_INT, [], INJ(1, CON_PATH(_bool_912.bool_sum_INT)))]
*         +1   ))
*         bool_INT --> _bool_912.+O+Dbool_INT. bool_INT : PC_CON_INLINECON_PATH(_bool_912.+O+Dbool_INT. bool_INT): TYPE= 
*         +1   CON_PATH(_bool_912.bool_TYC))
*         expose_INT --> _bool_912.+O+Dbool_INT. expose_INT : 
*         +1   PC_EXP_INLINEMPROJ(_bool_912,+O+Dbool_INT).expose_INT: (CON_PATH(_bool_912.bool_TYC) =>
*         +1                                                          CON_PATH(_bool_912.bool_sum_INT))= 
*         +2   /TOTALNONRECUR\anonfun_925
*         +2         (exposee_924 : CON_PATH(_bool_912.bool_TYC))
*         +2         : CON_PATH(_bool_912.bool_sum_INT) =
*         +2   COERCE(_bool_912.+Nbool_out_INT, [], exposee_924))
*         false --> _bool_912.+O+Dbool_INT. false : PC_EXP_INLINEMPROJ(_bool_912,+O+Dbool_INT).false: CON_PATH(_bool_912.bool_TYC)= COERCE(_bool_912.+Nbool_in_INT,
*         +1            [],
*         +1            INJ(0,
*         +1                CON_PATH(_bool_912.bool_sum_INT))))
*         true --> _bool_912.+O+Dbool_INT. true : PC_EXP_INLINEMPROJ(_bool_912,+O+Dbool_INT).true: CON_PATH(_bool_912.bool_TYC)= 
*         +1   COERCE(_bool_912.+Nbool_in_INT, [], INJ(1, CON_PATH(_bool_912.bool_sum_INT))))
*         TiltPrim_STR --> TiltPrim_950 : PC_$POLY$MOD(TiltPrim_950: 
*         +1   SIGS_SELF(TiltPrim_950, 
*         +1   UNSELF_SIG = NONE
*         +1   SELF_SIG = [vector_length > vector_length_mod_905 : 
**        +1                   $POLY$ SIGS_SELF(TiltPrim_950.vector_length, 
**        +1                          UNSELF_SIG = NONE
**        +1                          SELF_SIG = SIGF(_899, [vector_length_INT > _900 : TYPE] =>
**        +1                                             [it_INT > vector_length_904 : 
***       +1                                                 (CON_PATH(_899.vector_length_INT) VECTOR => UINT32) == 
***       +1                                                    /TOTALNONRECUR\anonfun_902
***       +1                                                          (_901 : CON_PATH(_899.vector_length_INT) VECTOR)
***       +1                                                          : UINT32 =
***       +1                                                    length_unknownVector[CON_PATH(_899.vector_length_INT)][_901]])
**        +1                          ), 
*         +1               array_length > array_length_mod_898 : 
**        +1                   $POLY$ SIGS_SELF(TiltPrim_950.array_length, 
**        +1                          UNSELF_SIG = NONE
**        +1                          SELF_SIG = SIGF(_892, [array_length_INT > _893 : TYPE] =>
**        +1                                             [it_INT > array_length_897 : 
***       +1                                                 (CON_PATH(_892.array_length_INT) ARRAY => UINT32) == 
***       +1                                                    /TOTALNONRECUR\anonfun_895
***       +1                                                          (_894 : CON_PATH(_892.array_length_INT) ARRAY)
***       +1                                                          : UINT32 =
***       +1                                                    length_unknownArray[CON_PATH(_892.array_length_INT)][_894]])
**        +1                          ), 
*         +1               unsafe_update > unsafe_update_mod_891 : 
**        +1                   $POLY$ SIGS_SELF(TiltPrim_950.unsafe_update, 
**        +1                          UNSELF_SIG = NONE
**        +1                          SELF_SIG = SIGF(_885, [unsafe_update_INT > _886 : TYPE] =>
**        +1                                             [it_INT > unsafe_update_890 : 
***       +1                                                 ({CON_PATH(_885.unsafe_update_INT) ARRAY *
***       +1                                                   UINT32 *
***       +1                                                   CON_PATH(_885.unsafe_update_INT)} -> UNIT) == 
***       +1                                                    /NONRECUR\anonfun_888
***       +1                                                          (_887 : {CON_PATH(_885.unsafe_update_INT) ARRAY *
***       +1                                                                   UINT32 *
***       +1                                                                   CON_PATH(_885.unsafe_update_INT)})
***       +1                                                          : UNIT =
***       +1                                                    update_unknownArray[CON_PATH(_885.unsafe_update_INT)][(_887)#1_~48,
***       +1                                                                                                          (_887)#2_~48,
***       +1                                                                                                          (_887)#3_~48]])
**        +1                          ), 
*         +1               unsafe_vsub > unsafe_vsub_mod_884 : 
**        +1                   $POLY$ SIGS_SELF(TiltPrim_950.unsafe_vsub, 
**        +1                          UNSELF_SIG = NONE
**        +1                          SELF_SIG = SIGF(_878, [unsafe_vsub_INT > _879 : TYPE] =>
**        +1                                             [it_INT > unsafe_vsub_883 : 
***       +1                                                 ({CON_PATH(_878.unsafe_vsub_INT) VECTOR *
***       +1                                                   UINT32} =>
***       +1                                                 CON_PATH(_878.unsafe_vsub_INT)) == 
***       +1                                                    /TOTALNONRECUR\anonfun_881
***       +1                                                          (_880 : {CON_PATH(_878.unsafe_vsub_INT) VECTOR *
***       +1                                                                   UINT32})
***       +1                                                          : CON_PATH(_878.unsafe_vsub_INT) =
***       +1                                                    sub_unknownVector[CON_PATH(_878.unsafe_vsub_INT)][(_880)#1_~48,
***       +1                                                                                                      (_880)#2_~48]])
**        +1                          ), 
*         +1               unsafe_vector > unsafe_vector_mod_877 : 
**        +1                   $POLY$ SIGS_SELF(TiltPrim_950.unsafe_vector, 
**        +1                          UNSELF_SIG = NONE
**        +1                          SELF_SIG = SIGF(_871, [unsafe_vector_INT > _872 : TYPE] =>
**        +1                                             [it_INT > unsafe_vector_876 : 
***       +1                                                 ({UINT32 *
***       +1                                                   CON_PATH(_871.unsafe_vector_INT)} =>
***       +1                                                 CON_PATH(_871.unsafe_vector_INT) VECTOR) == 
***       +1                                                    /TOTALNONRECUR\anonfun_874
***       +1                                                          (_873 : {UINT32 *
***       +1                                                                   CON_PATH(_871.unsafe_vector_INT)})
***       +1                                                          : CON_PATH(_871.unsafe_vector_INT) VECTOR =
***       +1                                                    create_unknownVector[CON_PATH(_871.unsafe_vector_INT)][(_873)#1_~48,
***       +1                                                                                                           (_873)#2_~48]])
**        +1                          ), 
*         +1               unsafe_sub > unsafe_sub_mod_870 : 
**        +1                   $POLY$ SIGS_SELF(TiltPrim_950.unsafe_sub, 
**        +1                          UNSELF_SIG = NONE
**        +1                          SELF_SIG = SIGF(_864, [unsafe_sub_INT > _865 : TYPE] =>
**        +1                                             [it_INT > unsafe_sub_869 : 
***       +1                                                 ({CON_PATH(_864.unsafe_sub_INT) ARRAY *
***       +1                                                   UINT32} -> CON_PATH(_864.unsafe_sub_INT)) == 
***       +1                                                    /NONRECUR\anonfun_867
***       +1                                                          (_866 : {CON_PATH(_864.unsafe_sub_INT) ARRAY *
***       +1                                                                   UINT32})
***       +1                                                          : CON_PATH(_864.unsafe_sub_INT) =
***       +1                                                    sub_unknownArray[CON_PATH(_864.unsafe_sub_INT)][(_866)#1_~48,
***       +1                                                                                                    (_866)#2_~48]])
**        +1                          ), 
*         +1               unsafe_vector2array > unsafe_vector2array_mod_863 : 
**        +1                   $POLY$ SIGS_SELF(TiltPrim_950.unsafe_vector2array, 
**        +1                          UNSELF_SIG = NONE
**        +1                          SELF_SIG = SIGF(_857, [unsafe_vector2array_INT > _858 : TYPE] =>
**        +1                                             [it_INT > unsafe_vector2array_862 : 
***       +1                                                 (CON_PATH(_857.unsafe_vector2array_INT) VECTOR ->
***       +1                                                 CON_PATH(_857.unsafe_vector2array_INT) ARRAY) == 
***       +1                                                    /NONRECUR\anonfun_860
***       +1                                                          (_859 : CON_PATH(_857.unsafe_vector2array_INT) VECTOR)
***       +1                                                          : CON_PATH(_857.unsafe_vector2array_INT) ARRAY =
***       +1                                                    vector2array_unknownVector[CON_PATH(_857.unsafe_vector2array_INT)]
***       +2   [_859]])
**        +1                          ), 
*         +1               unsafe_array2vector > unsafe_array2vector_mod_856 : 
**        +1                   $POLY$ SIGS_SELF(TiltPrim_950.unsafe_array2vector, 
**        +1                          UNSELF_SIG = NONE
**        +1                          SELF_SIG = SIGF(_850, [unsafe_array2vector_INT > _851 : TYPE] =>
**        +1                                             [it_INT > unsafe_array2vector_855 : 
***       +1                                                 (CON_PATH(_850.unsafe_array2vector_INT) ARRAY ->
***       +1                                                 CON_PATH(_850.unsafe_array2vector_INT) VECTOR) == 
***       +1                                                    /NONRECUR\anonfun_853
***       +1                                                          (_852 : CON_PATH(_850.unsafe_array2vector_INT) ARRAY)
***       +1                                                          : CON_PATH(_850.unsafe_array2vector_INT) VECTOR =
***       +1                                                    array2vector_unknownArray[CON_PATH(_850.unsafe_array2vector_INT)][_852]])
**        +1                          ), 
*         +1               empty_vector > empty_vector_mod_849 : 
**        +1                   $POLY$ SIGS_SELF(TiltPrim_950.empty_vector, 
**        +1                          UNSELF_SIG = NONE
**        +1                          SELF_SIG = SIGF(_845, [empty_vector_INT > _846 : TYPE] =>
**        +1                                             [it_INT > empty_vector_848 : 
***       +1                                                 CON_PATH(_845.empty_vector_INT) VECTOR == 
***       +1                                                    createempty_unknownVector[CON_PATH(_845.empty_vector_INT)][]])
**        +1                          ), 
*         +1               empty_array > empty_array_mod_844 : 
**        +1                   $POLY$ SIGS_SELF(TiltPrim_950.empty_array, 
**        +1                          UNSELF_SIG = NONE
**        +1                          SELF_SIG = SIGF(_840, [empty_array_INT > _841 : TYPE] =>
**        +1                                             [it_INT > empty_array_843 : 
***       +1                                                 CON_PATH(_840.empty_array_INT) ARRAY == 
***       +1                                                    createempty_unknownArray[CON_PATH(_840.empty_array_INT)][]])
**        +1                          ), 
*         +1               unsafe_array > unsafe_array_mod_839 : 
**        +1                   $POLY$ SIGS_SELF(TiltPrim_950.unsafe_array, 
**        +1                          UNSELF_SIG = NONE
**        +1                          SELF_SIG = SIGF(_833, [unsafe_array_INT > _834 : TYPE] =>
**        +1                                             [it_INT > unsafe_array_838 : 
***       +1                                                 ({UINT32 *
***       +1                                                   CON_PATH(_833.unsafe_array_INT)} ->
***       +1                                                 CON_PATH(_833.unsafe_array_INT) ARRAY) == 
***       +1                                                    /NONRECUR\anonfun_836
***       +1                                                          (_835 : {UINT32 *
***       +1                                                                   CON_PATH(_833.unsafe_array_INT)})
***       +1                                                          : CON_PATH(_833.unsafe_array_INT) ARRAY =
***       +1                                                    create_unknownArray[CON_PATH(_833.unsafe_array_INT)][(_835)#1_~48,
***       +1                                                                                                         (_835)#2_~48]])
**        +1                          ), 
*         +1               orbyte > orbyte_811 : ({UINT8 *
**        +1                                       UINT8} -> UINT8) == OR_UINT8[], 
*         +1               andbyte > andbyte_810 : ({UINT8 *
**        +1                                         UINT8} -> UINT8) == AND_UINT8[], 
*         +1               !! > !!_809 : (UINT32 -> UINT32) == NOT_UINT32[], 
*         +1               || > ||_808 : ({UINT32 *
**        +1                               UINT32} -> UINT32) == OR_UINT32[], 
*         +1               ^^ > ^^_807 : ({UINT32 *
**        +1                               UINT32} -> UINT32) == XOR_UINT32[], 
*         +1               && > &&_806 : ({UINT32 *
**        +1                               UINT32} -> UINT32) == AND_UINT32[], 
*         +1               << > <<_805 : ({UINT32 *
**        +1                               INT32} -> UINT32) == LSHIFT_UINT32[], 
*         +1               float2int > float2int_804 : (FLOAT64 -> INT32) == FLOAT2INT[], 
*         +1               int2float > int2float_803 : (INT32 -> FLOAT64) == INT2FLOAT[], 
*         +1               int32touint8 > int32touint8_802 : (INT32 -> UINT8) == INT2UINT(32->8)[], 
*         +1               int32touint32 > int32touint32_801 : (INT32 -> UINT32) == INT2UINT(32->32)[], 
*         +1               uint32touint8 > uint32touint8_800 : (UINT32 -> UINT8) == UINT2UINT(32->8)[], 
*         +1               uint32toint32 > uint32toint32_799 : (UINT32 -> INT32) == UINT2INT(32->32)[], 
*         +1               uint8touint32 > uint8touint32_798 : (UINT8 -> UINT32) == UINT2UINT(8->32)[], 
*         +1               uint8toint32 > uint8toint32_797 : (UINT8 -> INT32) == UINT2INT(8->32)[], 
*         +1               uintv8touintv32 > uintv8touintv32_796 : (UINT8 VECTOR -> UINT32 VECTOR) == UINTV2UINTV(8->32)[], 
*         +1               uinta8touinta32 > uinta8touinta32_795 : (UINT8 ARRAY -> UINT32 ARRAY) == UINTA2UINTA(8->32)[], 
*         +1               orb > orb_794 : ({INT32 *
**        +1                                 INT32} -> INT32) == orI32[], 
*         +1               xorb > xorb_793 : ({INT32 *
**        +1                                   INT32} -> INT32) == xorI32[], 
*         +1               andb > andb_792 : ({INT32 *
**        +1                                   INT32} -> INT32) == andI32[], 
*         +1               ~>> > ~>>_791 : ({INT32 *
**        +1                                 INT32} -> INT32) == rshiftI32[], 
*         +1               >> > >>_790 : ({UINT32 *
**        +1                               INT32} -> UINT32) == rshiftUI32[], 
*         +1               notb > notb_789 : (INT32 -> INT32) == NOT_INT32[], 
*         +1               fminus > fminus_788 : ({FLOAT64 *
**        +1                                       FLOAT64} -> FLOAT64) == minusF64[], 
*         +1               fmult > fmult_787 : ({FLOAT64 *
**        +1                                     FLOAT64} -> FLOAT64) == mulF64[], 
*         +1               fplus > fplus_786 : ({FLOAT64 *
**        +1                                     FLOAT64} -> FLOAT64) == plusF64[], 
*         +1               bminus > bminus_785 : ({UINT8 *
**        +1                                       UINT8} -> UINT8) == minusUI8[], 
*         +1               bmult > bmult_784 : ({UINT8 *
**        +1                                     UINT8} -> UINT8) == mulUI8[], 
*         +1               bplus > bplus_783 : ({UINT8 *
**        +1                                     UINT8} -> UINT8) == plusUI8[], 
*         +1               uminus > uminus_782 : ({UINT32 *
**        +1                                       UINT32} -> UINT32) == minusUI32[], 
*         +1               umult > umult_781 : ({UINT32 *
**        +1                                     UINT32} -> UINT32) == mulUI32[], 
*         +1               uplus > uplus_780 : ({UINT32 *
**        +1                                     UINT32} -> UINT32) == plusUI32[], 
*         +1               iminus > iminus_779 : ({INT32 *
**        +1                                       INT32} -> INT32) == minusI32[], 
*         +1               imult > imult_778 : ({INT32 *
**        +1                                     INT32} -> INT32) == mulI32[], 
*         +1               iplus > iplus_777 : ({INT32 *
**        +1                                     INT32} -> INT32) == plusI32[], 
*         +1               fabs > fabs_776 : (FLOAT64 -> FLOAT64) == ABS_FLOAT64[], 
*         +1               fneg > fneg_775 : (FLOAT64 -> FLOAT64) == NEG_FLOAT64[], 
*         +1               ineg > ineg_774 : (INT32 -> INT32) == NEG_INT32[], 
*         +1               ugte > ugte_773 : ({UINT32 *
**        +1                                   UINT32} -> CON_MU(/-\(_256)(SUM[(false, true); 2; ()]))#0) == greatereqUI32[], 
*         +1               ulte > ulte_772 : ({UINT32 *
**        +1                                   UINT32} -> CON_MU(/-\(_256)(SUM[(false, true); 2; ()]))#0) == lesseqUI32[], 
*         +1               ugt > ugt_771 : ({UINT32 *
**        +1                                 UINT32} -> CON_MU(/-\(_256)(SUM[(false, true); 2; ()]))#0) == greaterUI32[], 
*         +1               ult > ult_770 : ({UINT32 *
**        +1                                 UINT32} -> CON_MU(/-\(_256)(SUM[(false, true); 2; ()]))#0) == lessUI32[], 
*         +1               fgte > fgte_769 : ({FLOAT64 *
**        +1                                   FLOAT64} -> CON_MU(/-\(_256)(SUM[(false, true); 2; ()]))#0) == greaterF64[], 
*         +1               flte > flte_768 : ({FLOAT64 *
**        +1                                   FLOAT64} -> CON_MU(/-\(_256)(SUM[(false, true); 2; ()]))#0) == lesseqF64[], 
*         +1               fgt > fgt_767 : ({FLOAT64 *
**        +1                                 FLOAT64} -> CON_MU(/-\(_256)(SUM[(false, true); 2; ()]))#0) == greaterF64[], 
*         +1               flt > flt_766 : ({FLOAT64 *
**        +1                                 FLOAT64} -> CON_MU(/-\(_256)(SUM[(false, true); 2; ()]))#0) == lessF64[], 
*         +1               bgte > bgte_765 : ({UINT8 *
**        +1                                   UINT8} -> CON_MU(/-\(_256)(SUM[(false, true); 2; ()]))#0) == greatereqUI8[], 
*         +1               blte > blte_764 : ({UINT8 *
**        +1                                   UINT8} -> CON_MU(/-\(_256)(SUM[(false, true); 2; ()]))#0) == lesseqUI8[], 
*         +1               bgt > bgt_763 : ({UINT8 *
**        +1                                 UINT8} -> CON_MU(/-\(_256)(SUM[(false, true); 2; ()]))#0) == greaterUI8[], 
*         +1               blt > blt_762 : ({UINT8 *
**        +1                                 UINT8} -> CON_MU(/-\(_256)(SUM[(false, true); 2; ()]))#0) == lessUI8[], 
*         +1               igte > igte_761 : ({INT32 *
**        +1                                   INT32} -> CON_MU(/-\(_256)(SUM[(false, true); 2; ()]))#0) == greatereqI32[], 
*         +1               ilte > ilte_760 : ({INT32 *
**        +1                                   INT32} -> CON_MU(/-\(_256)(SUM[(false, true); 2; ()]))#0) == lesseqI32[], 
*         +1               igt > igt_759 : ({INT32 *
**        +1                                 INT32} -> CON_MU(/-\(_256)(SUM[(false, true); 2; ()]))#0) == greaterI32[], 
*         +1               ilt > ilt_758 : ({INT32 *
**        +1                                 INT32} -> CON_MU(/-\(_256)(SUM[(false, true); 2; ()]))#0) == lessI32[], 
*         +1               fdiv > fdiv_757 : ({FLOAT64 *
**        +1                                   FLOAT64} -> FLOAT64) == divF64[], 
*         +1               irem > irem_756 : ({INT32 *
**        +1                                   INT32} -> INT32) == remI32[], 
*         +1               iquot > iquot_755 : ({INT32 *
**        +1                                     INT32} -> INT32) == quotI32[], 
*         +1               umod > umod_754 : ({UINT32 *
**        +1                                   UINT32} -> UINT32) == modUI32[], 
*         +1               udiv > udiv_753 : ({UINT32 *
**        +1                                   UINT32} -> UINT32) == divUI32[], 
*         +1               bmod > bmod_752 : ({UINT8 *
**        +1                                   UINT8} -> UINT8) == modUI8[], 
*         +1               bdiv > bdiv_751 : ({UINT8 *
**        +1                                   UINT8} -> UINT8) == divUI8[], 
*         +1               float_neq > float_neq_750 : ({FLOAT64 *
**        +1                                             FLOAT64} -> CON_MU(/-\(_256)(SUM[(false, true); 2; ()]))#0) == neqF64[], 
*         +1               float_eq > float_eq_749 : ({FLOAT64 *
**        +1                                           FLOAT64} -> CON_MU(/-\(_256)(SUM[(false, true); 2; ()]))#0) == eqF64[], 
*         +1               littleEndian > littleEndian_746 : 
**        +1                  CON_MU(/-\(_259)(SUM[(false, true); 2; ()]))#0 == 
**        +1                     COERCE(FOLD([], SUM[(false, true); 2; ()], CON_MU(/-\(_259)(SUM[(false, true); 2; ()]))#0),
**        +1                            [],
**        +1                            INJ(1, SUM[(false, true); 2; ()])), 
*         +1               vector_TYC > vector_741 : KIND(1 -> TYPE) == /-\(_722)_722 VECTOR, 
*         +1               array_TYC > array_740 : KIND(1 -> TYPE) == /-\(_721)_721 ARRAY, 
*         +1               ref_TYC > ref_739 : KIND(1 -> TYPE) == /-\(_720)REF(_720), 
*         +1               unit_TYC > unit_738 : TYPE == UNIT, 
*         +1               exn_TYC > exn_737 : TYPE == ANY, 
*         +1               uint8_TYC > uint8_736 : TYPE == UINT8, 
*         +1               uint32_TYC > uint32_735 : TYPE == UINT32, 
*         +1               int32_TYC > int32_734 : TYPE == INT32, 
*         +1               float64_TYC > float64_733 : TYPE == FLOAT64]
*         +1   ))
*         SBNDS:
          [JoinWithArg_FCT > functor_var_1013 = 
**            FUNC(funct_arg_993: [Arg_STR > _994 : S_951] ->
**            MOD_LET origSeal_1012 = STR[A_STR > strbindvar_1007 = MPROJ(MPROJ(funct_arg_993,Arg_STR),A_STR)]
**            IN  MOD_SEAL(origSeal_1012,
**                         [A_STR > _992 : 
***                            [B_STR > _991 : 
****                               [term_TYC > term_953 : 
*****                                  TYPE = 
*****                                     CON_PATH(funct_arg_993.Arg_STR. A_STR. B_STR. +O+Dterm_INT. term_INT), 
****                                term_sumarg_INT > term_sumarg_961 : KIND(0) = (), 
****                                term_sum_INT > term_sum_962 : TYPE = SUM[(T); 1; term_sumarg_961], 
****                                +Nterm_in_INT > term_in_964 : CON_COERCION([], term_sum_962, term_953), 
****                                +Nterm_out_INT > term_out_965 : CON_COERCION([], term_953, term_sum_962), 
****                                +Eterm_INT > +Eterm_INT_989 : ({term_953 *
*****                                                               term_953} -> CON_MU(/-\(_259)(SUM[(false, true); 2; ()]))#0), 
****                                +O+Dterm_INT > term_960 : 
*****                                  [term_INT > copy_term_955 : TYPE == term_953, 
*****                                   expose_INT > exposer_985 : 
******                                     (term_953 => term_sum_962) == 
******                                        /TOTALNONRECUR\anonfun_969
******                                              (exposee_968 : term_953)
******                                              : term_sum_962 =
******                                        COERCE(term_out_965, [], exposee_968), 
*****                                   T > _987 : term_953 == COERCE(term_in_964, [], INJ(0, term_sum_962))]]]])
**            END
**            : 
**            [A_STR > _992 : 
***               [B_STR > _991 : 
****                  [term_TYC > term_953 : TYPE = CON_PATH(funct_arg_993.Arg_STR. A_STR. B_STR. +O+Dterm_INT. term_INT), 
****                   term_sumarg_INT > term_sumarg_961 : KIND(0) = (), 
****                   term_sum_INT > term_sum_962 : TYPE = SUM[(T); 1; term_sumarg_961], 
****                   +Nterm_in_INT > term_in_964 : CON_COERCION([], term_sum_962, term_953), 
****                   +Nterm_out_INT > term_out_965 : CON_COERCION([], term_953, term_sum_962), 
****                   +Eterm_INT > +Eterm_INT_989 : ({term_953 *
*****                                                  term_953} -> CON_MU(/-\(_259)(SUM[(false, true); 2; ()]))#0), 
****                   +O+Dterm_INT > term_960 : 
*****                     [term_INT > copy_term_955 : TYPE == term_953, 
*****                      expose_INT > exposer_985 : 
******                        (term_953 => term_sum_962) == 
******                           /TOTALNONRECUR\anonfun_969
******                                 (exposee_968 : term_953)
******                                 : term_sum_962 =
******                           COERCE(term_out_965, [], exposee_968), 
*****                      T > _987 : term_953 == COERCE(term_in_964, [], INJ(0, term_sum_962))]]]])]
ENTRIES:
          CONTEXT_SIGNAT: S_SIG > S_951 = [A_STR > _992 : 
**                                            [B_STR > _991 : 
***                                               [term_TYC > term_953 : TYPE, 
***                                                term_sumarg_INT > term_sumarg_961 : KIND(0) = (), 
***                                                term_sum_INT > term_sum_962 : TYPE = SUM[(T); 1; term_sumarg_961], 
***                                                +Nterm_in_INT > term_in_964 : CON_COERCION([], term_sum_962, term_953), 
***                                                +Nterm_out_INT > term_out_965 : CON_COERCION([], term_953, term_sum_962), 
***                                                +Eterm_INT > +Eterm_INT_989 : 
****                                                  ({term_953 *
****                                                    term_953} -> CON_MU(/-\(_259)(SUM[(false, true); 2; ()]))#0), 
***                                                +O+Dterm_INT > term_960 : 
****                                                  [term_INT > copy_term_955 : TYPE == term_953, 
****                                                   expose_INT > exposer_985 : 
*****                                                     (term_953 => term_sum_962) == 
*****                                                        /TOTALNONRECUR\anonfun_969
*****                                                              (exposee_968 : term_953)
*****                                                              : term_sum_962 =
*****                                                        COERCE(term_out_965, [], exposee_968), 
****                                                   T > _987 : term_953 == COERCE(term_in_964, [], INJ(0, term_sum_962))]]]]
          CONTEXT_SDEC: JoinWithArg_FCT > functor_var_1013 : 
**                         SIGF(funct_arg_993, [Arg_STR > _994 : S_951] ->
**                                 [A_STR > _992 : 
***                                    [B_STR > _991 : 
****                                       [term_TYC > term_953 : 
*****                                          TYPE = 
*****                                             CON_PATH(funct_arg_993.Arg_STR. A_STR. B_STR. +O+Dterm_INT. term_INT), 
****                                        term_sumarg_INT > term_sumarg_961 : KIND(0) = (), 
****                                        term_sum_INT > term_sum_962 : TYPE = SUM[(T); 1; term_sumarg_961], 
****                                        +Nterm_in_INT > term_in_964 : CON_COERCION([], term_sum_962, term_953), 
****                                        +Nterm_out_INT > term_out_965 : CON_COERCION([], term_953, term_sum_962), 
****                                        +Eterm_INT > +Eterm_INT_989 : 
*****                                          ({term_953 *
*****                                            term_953} -> CON_MU(/-\(_259)(SUM[(false, true); 2; ()]))#0), 
****                                        +O+Dterm_INT > term_960 : 
*****                                          [term_INT > copy_term_955 : TYPE == term_953, 
*****                                           expose_INT > exposer_985 : 
******                                             (term_953 => term_sum_962) == 
******                                                /TOTALNONRECUR\anonfun_969
******                                                      (exposee_968 : term_953)
******                                                      : term_sum_962 =
******                                                COERCE(term_out_965, [], exposee_968), 
*****                                           T > _987 : term_953 == COERCE(term_in_964, [], INJ(0, term_sum_962))]]]])

gc_context: 29 items in original context.  0 items in reduced context.
  [writing TM/any/join-bug.sml.il - unnecessary]
===== Starting Phasesplit: Join                          =====
  Initial context is phase-split
tilt: tonil.sml: use of datatype labels detected

Compilation exited abnormally with code 1 at Tue Oct 30 16:53:11
