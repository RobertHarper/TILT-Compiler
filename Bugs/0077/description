Number: 0077
Title:       Memory corruption error.
Keywords:    Runtime, processes.
Submitter:   David Swasey <swasey@cs.cmu.edu>
Date:        5/20/02
Version:     CVS
System:	     solaris
Severity:    major
Problem:
	The MakeRelease program fails with the following error:

	; ./MakeRelease.sparc.exe :pserver:swasey_tilt@cvs.concert.cs.cmu.edu:/cvsroot -rrelease_may_2002
	Performing CVS export.
	Proc 0:  Memory error at 60363529 with PC = -278084192
	Bus Error
	BUS_ADRALN invalid address alignment
	./MakeRelease.sparc.exe: command returned non-zero exit status: /usr/local/bin/cvs -Q -d :pserver:swasey_tilt@cvs.concert.cs.cmu.edu:/cvsroot export -rrelease_may_2002 -d tilt-20020520 ml96
	status=1
	; 
Code:	     In preparation.
Transcript:
Comments:
	During the loop in string_list_to_array_malloc(), the result
	array gets corrupted.  That is, if I dump the array after each
	iteration, I see

		dumping 0..6
		v[0] at 0x39a23a8 = 0x39a1b70 <<cvs>>
		v[1] at 0x39a23ac = 0x39a1b80 <<-Q>>
		v[2] at 0x39a23b0 = 0x39a1b90 <<-d>>
		v[3] at 0x39a23b4 = 0x39cbfb0 <<:pserver:swasey_tilt@cvs.concert.cs.cmu.edu:/cvsroot>>
		v[4] at 0x39a23b8 = 0x39a1ba0 <<export>>
		v[5] at 0x39a23bc = 0x387898 <<-rrelease_may_2002>>
		v[6] at 0x39a23c0 = 0x39a1bb0 <<-d>>
		Breakpoint 1, string_list_to_array_malloc (list=0x652077e0) at $ml96/Runtime/posix.c:948
		(gdb) c
		Continuing.
		dumping 0..7
		v[0] at 0x39a23a8 = 0x39a1b70 <<cvs>>
		v[1] at 0x39a23ac = 0x39a1b80 <<-Q>>
		v[2] at 0x39a23b0 = 0x39a1b90 <<-d>>
		v[3] at 0x39a23b4 = 0x39cbfb0 <<:pserver:swasey_tilt@cvs.concert.cs.cmu.edu:/cvsroot>>
		v[4] at 0x39a23b8 = 0x39a1ba1 <<xport>>
		v[5] at 0x39a23bc = 0x387898 <<-rrelease_may_2002>>
		v[6] at 0x39a23c0 = 0x74696c74
		Program received signal SIGSEGV, Segmentation fault.
		0xef6a3ec0 in strlen ()
		(gdb)

	Is this a malloc/ML heap conflict?  Probably.  As you can see
	below, malloc is corrupting memory it previously returned.  My
	theory is malloc's bookkeeping data structure has been trashed
	by the mutator.

		dumping 0..6
		v[0] at 0x39a23a8 = 0x39a1b70 <<cvs>>
		v[1] at 0x39a23ac = 0x39a1b80 <<-Q>>
		v[2] at 0x39a23b0 = 0x39a1b90 <<-d>>
		v[3] at 0x39a23b4 = 0x39cbfb0 <<:pserver:swasey_tilt@cvs.concert.cs.cmu.edu:/cvsroot>>
		v[4] at 0x39a23b8 = 0x39a1ba0 <<export>>
		v[5] at 0x39a23bc = 0x387898 <<-rrelease_may_2002>>
		v[6] at 0x39a23c0 = 0x39a1bb0 <<-d>>

		Breakpoint 1, string_list_to_array_malloc (list=0x652077e0) at posix.c:948
		(gdb) x/w 0x39a23b8
		0x39a23b8 <_end+56734040>:	0x039a1ba0
		(gdb) help watch
		Set a watchpoint for an expression.
		A watchpoint stops execution of your program whenever the value of
		an expression changes.
		(gdb) watch *(char**)0x39a23b8
		Watchpoint 2: *(char **) 60433336
		(gdb) c
		Continuing.
		Watchpoint 2: *(char **) 60433336

		Old value = 0x39a1ba0 "export"
		New value = 0x39a1ba1 "xport"
		0xef6cb6e0 in _smalloc ()
		(gdb) where
		#0  0xef6cb6e0 in _smalloc ()
		#1  0xef6cb710 in malloc ()
		#2  0xfc720 in emalloc (size=14) at posix.c:187
		#3  0xfc8c4 in mlstring2cstring_malloc (mlstring=0x652075f0) at posix.c:222
		#4  0xfe854 in string_list_to_array_malloc (list=0x652077d4) at posix.c:946
		#5  0xff0fc in posix_process_exec (mlpath=0x194a00, args=0x65207c98) at posix.c:1145
		#6  0xa1d58 in code_116261 ()
		#7  0x19328c in anonfun_162776 ()
		(gdb)

	malloc(3C) uses brk(2).  getrlimit(2) returns the maximum size
	of the data segment in rlim.rlim_max.  We could use this to
	map our pages higher.  We can use setrlimit(2) to manage the
	amount of space brk (malloc) can grab.  Interesting limits:
	RLIMIT_DATA, RLIMIT_VMEM (max address space value, aka
	RLIMIT_AS).

	mapmalloc(3X) is a simple malloc replacement that uses mmap
	instead of sbrk to allocate space.  Linking against this
	allocator does not help: We still crash but not in the same
	place.  XXX I have not checked whether this is the same or a
	different bug.

	What does SML/NJ do?  They use the system malloc/free as we
	do.  They have several primitive memory implementations.  One
	uses anonymous calls to mmap to allocate generations (akin to
	our Heaps).  This is the difference: We specify an address in
	our calls to mmap.  This makes us vulnerable in two ways.
	First, malloc calls can extend the data segment (via sbrk/brk)
	so that it overlaps the addresses we specify to mmap.  Second,
	if the OS screws up the book-keeping for mmap-with-addresses,
	then malloc could own the same pages.  (Recall that some
	malloc implementations use both (s)brk and mmap to get
	memory.)

	Possible changes:

	        1 Try to tune the system malloc to avoid our address
	          ranges by using setrlimit.

		2 Grab and tune a malloc implementation to gaurantee
		  no conflicts.  The SML/NJ people were, at one time,
		  doing this with Doug Lea's allocator.

		3 Use getrlimit to figure out our address space limit;
		  that is, improve the estimate address_bytes in
		  memobj_init.  (This is a separate issue.)

	We may give up on specifying what address ranges the ML heaps
	and stacks lie in.  This gives us some more options.

	Possible changes:

		 a Use mmap without specifying addresses.

		 b Use malloc to get pages.

	IMO, a-b are cleaner than 1-3 and make our code easier to
	maintain.

	Cons:

	1 Complicates our interface to exec since we should restore
	  the original resource limits prior to launching a child.
	  May require different tuning for different systems.  Eg, the
	  limit to impose on brk depends on how much under the hood
	  allocating is done by the C library.

	2 Clunky unless we have another need for a different or better
	  malloc implementation.

	a-b This will probably complicate predicates on addresses
	  which may lead to unacceptable slowdowns.  (Actually, this
	  will only complicate the predicate isSomeHeap and will only
	  slow down debugging code which is not normally turned on.)

	b Increases our reliance on the system malloc.  We may need to
	  swap in a better implementation.  May conflict with our
	  (paranoid) use of mprotect.  XXX This is easy to test.

	Pros:

	3 A definite (and easy) win if we stick with fixed addresses.

	a-b More portable than our current design.

	a Easier to implement than b (given our current code).

	b Easier to understand than a.

	I will implement (a) as a proof-of-concept and then consider
	(b) to simplify the code.  [Perry suggests stopping at (a)
	because some malloc implementations can not handle large
	requests.]

	The implementation of (a) led to SEGV in MakeRelease.sparc.exe
	and other TITL-compiled binaries.  See ../0079/SEGVbug for
	debugging notes.

	The problem persisted after (a) was working.  I tried to
	run the generated program under purify.  This failed
	because purify could not handle our explict manipulation
	of the stack.  I ran the program under electric fence,
	which is considerably less invasive than purify and found
	the bug.

	The problem was string_list_to_array_malloc was allocating
	too little memory to hold the array.  For a list of length n,
	it was allocating an array of n bytes, not n words.
Fix:
	Left the mmap fix in the compiler.  While our GC was not
	conflicting with malloc, the way we were getting memory
	made this a possibility.

	Left a -fefence flag in the compiler.  If anyone wants to
	use it, they will have to edit the path to the electric
	fense library in Top/tools.sml.
Test:
Owner: swasey
Status: closed
