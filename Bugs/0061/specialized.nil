PASS: Specialize
Specialize

          [functor_var_c_1027 = 
*          FUN(funct_arg_c_1029 ::  REC_K{ParserData > _c_1031 : 
*                                         REC_K{token > token_1034 :  Arrow_k(Open; _1033 : TYPE; TYPE),
*                                               token_sumarg > token_sumarg_1037 : 
*                                               SINGLE(LET  _1036 =  FUN('a_1035 ::  TYPE) = CREC{}
*                                                      IN   _1036
*                                                      END),
*                                               token_sum > token_sum_1040 : 
*                                               SINGLE(LET  _1039 = 
*                                                           FUN('a_1038 ::  TYPE) = SUM(1,1)(APP(token_sumarg_1037,('a_1038)))
*                                                      IN   _1039
*                                                      END)}})
*              = CREC{},
*          /LEAF\DEPfunctor_var_r_1028
*            (funct_arg_c_1068 :: 
*               REC_K{ParserData > _c_1067 : 
*                     REC_K{token > token_1060 :  Arrow_k(Open; _1059 : TYPE; TYPE),
*                           token_sumarg > token_sumarg_1063 :  SINGLE(LET  _1062 =  FUN('a_1061 ::  TYPE) = CREC{}
*                                                                      IN   _1062
*                                                                      END),
*                           token_sum > token_sum_1066 : 
*                           SINGLE(LET  _1065 =  FUN('a_1064 ::  TYPE) = SUM(1,1)(APP(token_sumarg_1063,('a_1064)))
*                                  IN   _1065
*                                  END)}} ;; 
*             funct_arg_r_1030 : 
*               Trace : 
*               DEP_RECORD[ ParserData > _r_1032]
*                 (DEP_RECORD[ +Ntoken_in > token_in_1042, +Ntoken_out > token_out_1044, +Etoken > poly+Etoken_INT_r_1046]
*                    (COERCION[ 'a_1041 ](LET  type_1069 = funct_arg_c_1068.ParserData
*                                              type_1070 = type_1069.token_sum
*                                              type_1071 = APP(type_1070,('a_1041))
*                                         IN   type_1071
*                                         END,
*         +1   LET  type_1072 = funct_arg_c_1068.ParserData
*         +1        type_1073 = type_1072.token
*         +1        type_1074 = APP(type_1073,('a_1041))
*         +1   IN   type_1074
*         +1   END),
*                     COERCION[ 'a_1043 ](LET  type_1075 = funct_arg_c_1068.ParserData
*                                              type_1076 = type_1075.token
*                                              type_1077 = APP(type_1076,('a_1043))
*                                         IN   type_1077
*                                         END,
*         +1   LET  type_1078 = funct_arg_c_1068.ParserData
*         +1        type_1079 = type_1078.token_sum
*         +1        type_1080 = APP(type_1079,('a_1043))
*         +1   IN   type_1080
*         +1   END),
*                     ALLARROW(Open; TOTAL; (mpoly_var_c_1047 :: REC_K{'a > 'a_1049 :  TYPE}); 
*                        (mpoly_var_r_1048 :: DEP_RECORD[ ]); 0; 
*                        LET  type_1093 = ALLARROW(Open; PARTIAL; (); 
*                                            (APP(funct_arg_c_1068.ParserData. token,(mpoly_var_c_1047.'a)),
*                                             APP(funct_arg_c_1068.ParserData. token,(mpoly_var_c_1047.'a))); 0; 
*                                            LET  type_1091 = MU_NR((_1050=SUM(2,2)(CREC{})))
*                                                 type_1092 = type_1091.1
*                                            IN   type_1092
*                                            END)
*                        IN   type_1093
*                        END))) ;; 
*             )
*          ->DEP_RECORD[ ] =
*          Let  _r_1098 : Trace = record()
*          In   _r_1098
*          End]
*         IMPORTS:
*         
*         EXPORTS:
*         JoinWithArg_FCT_c = functor_var_c_1027
*         JoinWithArg_FCT_r = functor_var_r_1028
*         
