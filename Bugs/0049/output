Warning: setting TILT_LIBDIR to /usr0/swasey/ml96
Starting compilation           : Wed Jun 20 12:06:16 2001   0.0 sec
Warning: only compiling to assembly because non-native
Mapfile mapfile with 1 units processed.
Imports read.
Dependency graph computed: 1 nodes and 0 edges.
Not reducing dependency graph.
Creating directories.
1 necessary units:   Nilbug
Start compiling files          : Wed Jun 20 12:06:16 2001   0.01 sec
Starting slave c1660464-b.ehlls1.pa.home.com.4464.
  [Plan for Nilbug:   elaborate  generate  cleanup]
  [Sending FLUSH_ALL to c1660464-b.ehlls1.pa.home.com.4464]
  [Calling c1660464-b.ehlls1.pa.home.com.4464 to compile Nilbug]
Slave received FLUSH_ALL.
Setting PtrWriteBarrier to true
Setting FullWriteBarrier to true
Setting MirrorGlobal to true
Setting MirrorPtrArray to false
Setting BranchingTraps to true
Setting UptoElaborate to false
Setting UptoPhasesplit to false
Setting UptoClosureConvert to false
Setting UptoRtl to false
Setting UptoAsm to true
Setting debug_asm to true
Setting keep_asm to true
Setting compress_asm to true
Setting ManagerChat to true
Setting ManagerVerbose to true
Setting TimeEachFile to false
Setting makeBackups to false
Setting ShowWrittenContext to false
Setting WriteUnselfContext to false
Setting ShowTools to false
  [0 imports of total size 0 were cached.
   0 imports of total size 0 were uncached and took 0.0 seconds.]
  [Added contexts.]
  [Parsing nilbug.sml]
  [Elaborating nilbug.sml non-constrained]
gc_context: 17 items in original context.  0 items in reduced context.
  [writing TM/any/nilbug.sml.il]
  [Compiling Nilbug to assembly]
===== Starting Phasesplit: Nilbug                        =====
  Initial context is phase-split
  Bindings are phase-split
  Imports are computed
  Exports are phase-split
===== Starting Rename: Nilbug                            =====
===== Starting Optimize1: Nilbug                         =====
PASS: Optimize1
Optimize1

          [_990 =  FUN('a_987 ::  TYPE) = MU((vdt_bar_988=SUM(0,1)(vdt_foo_989), vdt_foo_989=SUM(0,1)(vdt_bar_988))),
*          _1041 =  FUN('a_1040 ::  TYPE) = PROJ(APP(_990,('a_1040)),1),
*          _1044 =  FUN('a_1043 ::  TYPE) = PROJ(APP(_990,('a_1043)),2),
*          _1047 =  FUN('a_1046 ::  TYPE) = APP(_1044,('a_1046)),
*          _1050 =  FUN('a_1049 ::  TYPE) = APP(_1041,('a_1049)),
*          _1055 =  FUN('a_1052 ::  TYPE) = SUM(0,1)(APP(_1047,('a_1052))),
*          _1058 =  FUN('a_1057 ::  TYPE) = SUM(0,1)(APP(_1050,('a_1057))),
*          /LEAF\_bar_foo_eq_r_993
*            (mpoly_var_c_994 :: REC_K{'a > 'a_996 :  TYPE} ;; mpoly_var_r_995 : Unknown : DEP_RECORD[ ] ;; )
*          =>LET  type_1150 = ALLARROW(Open; PARTIAL; (); 
*                                (LET  type_1140 = MU((vdt_bar_1036=SUM(0,1)(vdt_foo_1037), vdt_foo_1037=SUM(0,1)(vdt_bar_1036)))
*                                      type_1141 = type_1140.1
*                                      type_1144 = MU((vdt_bar_1034=SUM(0,1)(vdt_foo_1035), vdt_foo_1035=SUM(0,1)(vdt_bar_1034)))
*                                      type_1145 = type_1144.1
*                                      type_1146 = RECORD[1, 2](type_1141, type_1145)
*                                 IN   type_1146
*                                 END); 0; 
*                                LET  type_1148 = MU_NR((_1038=SUM(2,2)(CREC{})))
*                                     type_1149 = type_1148.1
*                                IN   type_1149
*                                END)
*                 type_1163 = ALLARROW(Open; PARTIAL; (); 
*                                (LET  type_1153 = MU((vdt_bar_1031=SUM(0,1)(vdt_foo_1032), vdt_foo_1032=SUM(0,1)(vdt_bar_1031)))
*                                      type_1154 = type_1153.2
*                                      type_1157 = MU((vdt_bar_1029=SUM(0,1)(vdt_foo_1030), vdt_foo_1030=SUM(0,1)(vdt_bar_1029)))
*                                      type_1158 = type_1157.2
*                                      type_1159 = RECORD[1, 2](type_1154, type_1158)
*                                 IN   type_1159
*                                 END); 0; 
*                                LET  type_1161 = MU_NR((_1033=SUM(2,2)(CREC{})))
*                                     type_1162 = type_1161.1
*                                IN   type_1162
*                                END)
*                 type_1164 = RECORD[1, 2](type_1150, type_1163)
*            IN   type_1164
*            END =
*          Let  type_1087 = MU_NR((_997=SUM(2,2)(CREC{})))
*               type_1088 = type_1087.1
*               type_1091 = MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001)))
*               type_1093 = MU_NR((_999=SUM(2,2)(CREC{})))
*               type_1094 = type_1093.1
*               type_1095 = CREC{}
*               type_1096 = SUM(2,2)(type_1095)
*               _1097 : Unknown = inject_known_0[type_1096]()
*               false_1098 : Unknown = roll[type_1094](_1097)
*               /\ vars_eq_0_1004
*                 ( ;; arg_pair_1006 : Unknown : RECORD[1, 2](type_1091.1, type_1091.1) ;; )
*               =>type_1088 =
*               Let  type_1099 = type_1091.2
*                    type_1100 = SUM(0,1)(type_1099)
*                    type_1101 = type_1091.1
*                    arg_pair_1_1102 : Unknown = select[1][](arg_pair_1006)
*                    eqargpair_1_1103 : Unknown = unroll[type_1101](arg_pair_1_1102)
*                    type_1104 = type_1091.1
*                    arg_pair_2_1105 : Unknown = select[2][](arg_pair_1006)
*                    eqargpair_2_1106 : Unknown = unroll[type_1104](arg_pair_2_1105)
*                    _1117 : Unknown = 
*                      SUM_SWITCH(eqargpair_1_1103: type_1100, 
*                           eqarg1_1013, 
*                           0: Unknown:: 
*                             Let  _1116 : Unknown = 
*                                    SUM_SWITCH(eqargpair_2_1106: type_1100, 
*                                         eqarg2_1014, 
*                                         0: Unknown:: Let  type_1110 = type_1091.2
*                                                           type_1111 = SUM_0(0,1)(type_1110)
*                                                           _1112 : Unknown = project_known0[type_1111](eqarg1_1013)
*                                                           _1113 : Unknown = project_known0[type_1111](eqarg2_1014)
*                                                           _1114 : Unknown = record(1>_1112, 2>_1113)
*                                                           _1115 : Unknown = App_Open(vars_eq_1_1005;  ; _1114;  )
*                                                      In   _1115
*                                                      End
*                                         DEFAULT = false_1098) : type_1088
*                             In   _1116
*                             End
*                           NODEFAULT) : type_1088
*               In   _1117
*               End
*               /\ vars_eq_1_1005
*                 ( ;; arg_pair_1016 : Unknown : RECORD[1, 2](type_1091.2, type_1091.2) ;; )
*               =>type_1088 =
*               Let  type_1118 = type_1091.1
*                    type_1119 = SUM(0,1)(type_1118)
*                    type_1120 = type_1091.2
*                    arg_pair_1_1121 : Unknown = select[1][](arg_pair_1016)
*                    eqargpair_1_1122 : Unknown = unroll[type_1120](arg_pair_1_1121)
*                    type_1123 = type_1091.2
*                    arg_pair_2_1124 : Unknown = select[2][](arg_pair_1016)
*                    eqargpair_2_1125 : Unknown = unroll[type_1123](arg_pair_2_1124)
*                    _1136 : Unknown = 
*                      SUM_SWITCH(eqargpair_1_1122: type_1119, 
*                           eqarg1_1021, 
*                           0: Unknown:: 
*                             Let  _1135 : Unknown = 
*                                    SUM_SWITCH(eqargpair_2_1125: type_1119, 
*                                         eqarg2_1022, 
*                                         0: Unknown:: Let  type_1129 = type_1091.1
*                                                           type_1130 = SUM_0(0,1)(type_1129)
*                                                           _1131 : Unknown = project_known0[type_1130](eqarg1_1021)
*                                                           _1132 : Unknown = project_known0[type_1130](eqarg2_1022)
*                                                           _1133 : Unknown = record(1>_1131, 2>_1132)
*                                                           _1134 : Unknown = App_Open(vars_eq_0_1004;  ; _1133;  )
*                                                      In   _1134
*                                                      End
*                                         DEFAULT = false_1098) : type_1088
*                             In   _1135
*                             End
*                           NODEFAULT) : type_1088
*               In   _1136
*               End
*               top_eq_1137 : Unknown = record(1>vars_eq_0_1004, 2>vars_eq_1_1005)
*          In   top_eq_1137
*          End,
*          /LEAF\poly+Ebar_INT_r_1061
*            (mpoly_var_c_1062 :: REC_K{'a > 'a_1064 :  TYPE} ;; mpoly_var_r_1063 : Unknown : DEP_RECORD[ ] ;; )
*          =>LET  type_1175 = ALLARROW(Open; PARTIAL; (); 
*                                (LET  type_1167 = mpoly_var_c_1062.'a
*                                      type_1168 = APP(_1041,(type_1167))
*                                      type_1169 = mpoly_var_c_1062.'a
*                                      type_1170 = APP(_1041,(type_1169))
*                                      type_1171 = RECORD[1, 2](type_1168, type_1170)
*                                 IN   type_1171
*                                 END); 0; 
*                                LET  type_1173 = MU_NR((_1070=SUM(2,2)(CREC{})))
*                                     type_1174 = type_1173.1
*                                IN   type_1174
*                                END)
*            IN   type_1175
*            END =
*          Let  _1165 : Unknown = App_Open(_bar_foo_eq_r_993;  mpoly_var_c_1062; mpoly_var_r_1063;  )
*               v1_1166 : Unknown = select[1][](_1165)
*          In   v1_1166
*          End,
*          /LEAF\poly+Efoo_INT_r_1073
*            (mpoly_var_c_1074 :: REC_K{'a > 'a_1076 :  TYPE} ;; mpoly_var_r_1075 : Unknown : DEP_RECORD[ ] ;; )
*          =>LET  type_1186 = ALLARROW(Open; PARTIAL; (); 
*                                (LET  type_1178 = mpoly_var_c_1074.'a
*                                      type_1179 = APP(_1044,(type_1178))
*                                      type_1180 = mpoly_var_c_1074.'a
*                                      type_1181 = APP(_1044,(type_1180))
*                                      type_1182 = RECORD[1, 2](type_1179, type_1181)
*                                 IN   type_1182
*                                 END); 0; 
*                                LET  type_1184 = MU_NR((_1082=SUM(2,2)(CREC{})))
*                                     type_1185 = type_1184.1
*                                IN   type_1185
*                                END)
*            IN   type_1186
*            END =
*          Let  _1176 : Unknown = App_Open(_bar_foo_eq_r_993;  mpoly_var_c_1074; mpoly_var_r_1075;  )
*               v2_1177 : Unknown = select[2][](_1176)
*          In   v2_1177
*          End]
*         IMPORTS:
*         
*         EXPORTS:
*         +Efoo_INT_r = poly+Efoo_INT_r_1073
*         +Ebar_INT_r = poly+Ebar_INT_r_1061
*         foo_sum = _1058
*         bar_sum = _1055
*         foo_sumarg = _1050
*         bar_sumarg = _1047
*         foo = _1044
*         bar = _1041
*         _bar_foo_eq_TYC_r = _bar_foo_eq_r_993
*         +Q_bar_foo = _990
*         
===== Starting TypecheckBetweenOpts: Nilbug              =====
module_valid called with module =
PASS: 


          [_990 =  FUN('a_987 ::  TYPE) = MU((vdt_bar_988=SUM(0,1)(vdt_foo_989), vdt_foo_989=SUM(0,1)(vdt_bar_988))),
*          _1041 =  FUN('a_1040 ::  TYPE) = PROJ(APP(_990,('a_1040)),1),
*          _1044 =  FUN('a_1043 ::  TYPE) = PROJ(APP(_990,('a_1043)),2),
*          _1047 =  FUN('a_1046 ::  TYPE) = APP(_1044,('a_1046)),
*          _1050 =  FUN('a_1049 ::  TYPE) = APP(_1041,('a_1049)),
*          _1055 =  FUN('a_1052 ::  TYPE) = SUM(0,1)(APP(_1047,('a_1052))),
*          _1058 =  FUN('a_1057 ::  TYPE) = SUM(0,1)(APP(_1050,('a_1057))),
*          /LEAF\_bar_foo_eq_r_993
*            (mpoly_var_c_994 :: REC_K{'a > 'a_996 :  TYPE} ;; mpoly_var_r_995 : Unknown : DEP_RECORD[ ] ;; )
*          =>LET  type_1150 = ALLARROW(Open; PARTIAL; (); 
*                                (LET  type_1140 = MU((vdt_bar_1036=SUM(0,1)(vdt_foo_1037), vdt_foo_1037=SUM(0,1)(vdt_bar_1036)))
*                                      type_1141 = type_1140.1
*                                      type_1144 = MU((vdt_bar_1034=SUM(0,1)(vdt_foo_1035), vdt_foo_1035=SUM(0,1)(vdt_bar_1034)))
*                                      type_1145 = type_1144.1
*                                      type_1146 = RECORD[1, 2](type_1141, type_1145)
*                                 IN   type_1146
*                                 END); 0; 
*                                LET  type_1148 = MU_NR((_1038=SUM(2,2)(CREC{})))
*                                     type_1149 = type_1148.1
*                                IN   type_1149
*                                END)
*                 type_1163 = ALLARROW(Open; PARTIAL; (); 
*                                (LET  type_1153 = MU((vdt_bar_1031=SUM(0,1)(vdt_foo_1032), vdt_foo_1032=SUM(0,1)(vdt_bar_1031)))
*                                      type_1154 = type_1153.2
*                                      type_1157 = MU((vdt_bar_1029=SUM(0,1)(vdt_foo_1030), vdt_foo_1030=SUM(0,1)(vdt_bar_1029)))
*                                      type_1158 = type_1157.2
*                                      type_1159 = RECORD[1, 2](type_1154, type_1158)
*                                 IN   type_1159
*                                 END); 0; 
*                                LET  type_1161 = MU_NR((_1033=SUM(2,2)(CREC{})))
*                                     type_1162 = type_1161.1
*                                IN   type_1162
*                                END)
*                 type_1164 = RECORD[1, 2](type_1150, type_1163)
*            IN   type_1164
*            END =
*          Let  type_1087 = MU_NR((_997=SUM(2,2)(CREC{})))
*               type_1088 = type_1087.1
*               type_1091 = MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001)))
*               type_1093 = MU_NR((_999=SUM(2,2)(CREC{})))
*               type_1094 = type_1093.1
*               type_1095 = CREC{}
*               type_1096 = SUM(2,2)(type_1095)
*               _1097 : Unknown = inject_known_0[type_1096]()
*               false_1098 : Unknown = roll[type_1094](_1097)
*               /\ vars_eq_0_1004
*                 ( ;; arg_pair_1006 : Unknown : RECORD[1, 2](type_1091.1, type_1091.1) ;; )
*               =>type_1088 =
*               Let  type_1099 = type_1091.2
*                    type_1100 = SUM(0,1)(type_1099)
*                    type_1101 = type_1091.1
*                    arg_pair_1_1102 : Unknown = select[1][](arg_pair_1006)
*                    eqargpair_1_1103 : Unknown = unroll[type_1101](arg_pair_1_1102)
*                    type_1104 = type_1091.1
*                    arg_pair_2_1105 : Unknown = select[2][](arg_pair_1006)
*                    eqargpair_2_1106 : Unknown = unroll[type_1104](arg_pair_2_1105)
*                    _1117 : Unknown = 
*                      SUM_SWITCH(eqargpair_1_1103: type_1100, 
*                           eqarg1_1013, 
*                           0: Unknown:: 
*                             Let  _1116 : Unknown = 
*                                    SUM_SWITCH(eqargpair_2_1106: type_1100, 
*                                         eqarg2_1014, 
*                                         0: Unknown:: Let  type_1110 = type_1091.2
*                                                           type_1111 = SUM_0(0,1)(type_1110)
*                                                           _1112 : Unknown = project_known0[type_1111](eqarg1_1013)
*                                                           _1113 : Unknown = project_known0[type_1111](eqarg2_1014)
*                                                           _1114 : Unknown = record(1>_1112, 2>_1113)
*                                                           _1115 : Unknown = App_Open(vars_eq_1_1005;  ; _1114;  )
*                                                      In   _1115
*                                                      End
*                                         DEFAULT = false_1098) : type_1088
*                             In   _1116
*                             End
*                           NODEFAULT) : type_1088
*               In   _1117
*               End
*               /\ vars_eq_1_1005
*                 ( ;; arg_pair_1016 : Unknown : RECORD[1, 2](type_1091.2, type_1091.2) ;; )
*               =>type_1088 =
*               Let  type_1118 = type_1091.1
*                    type_1119 = SUM(0,1)(type_1118)
*                    type_1120 = type_1091.2
*                    arg_pair_1_1121 : Unknown = select[1][](arg_pair_1016)
*                    eqargpair_1_1122 : Unknown = unroll[type_1120](arg_pair_1_1121)
*                    type_1123 = type_1091.2
*                    arg_pair_2_1124 : Unknown = select[2][](arg_pair_1016)
*                    eqargpair_2_1125 : Unknown = unroll[type_1123](arg_pair_2_1124)
*                    _1136 : Unknown = 
*                      SUM_SWITCH(eqargpair_1_1122: type_1119, 
*                           eqarg1_1021, 
*                           0: Unknown:: 
*                             Let  _1135 : Unknown = 
*                                    SUM_SWITCH(eqargpair_2_1125: type_1119, 
*                                         eqarg2_1022, 
*                                         0: Unknown:: Let  type_1129 = type_1091.1
*                                                           type_1130 = SUM_0(0,1)(type_1129)
*                                                           _1131 : Unknown = project_known0[type_1130](eqarg1_1021)
*                                                           _1132 : Unknown = project_known0[type_1130](eqarg2_1022)
*                                                           _1133 : Unknown = record(1>_1131, 2>_1132)
*                                                           _1134 : Unknown = App_Open(vars_eq_0_1004;  ; _1133;  )
*                                                      In   _1134
*                                                      End
*                                         DEFAULT = false_1098) : type_1088
*                             In   _1135
*                             End
*                           NODEFAULT) : type_1088
*               In   _1136
*               End
*               top_eq_1137 : Unknown = record(1>vars_eq_0_1004, 2>vars_eq_1_1005)
*          In   top_eq_1137
*          End,
*          /LEAF\poly+Ebar_INT_r_1061
*            (mpoly_var_c_1062 :: REC_K{'a > 'a_1064 :  TYPE} ;; mpoly_var_r_1063 : Unknown : DEP_RECORD[ ] ;; )
*          =>LET  type_1175 = ALLARROW(Open; PARTIAL; (); 
*                                (LET  type_1167 = mpoly_var_c_1062.'a
*                                      type_1168 = APP(_1041,(type_1167))
*                                      type_1169 = mpoly_var_c_1062.'a
*                                      type_1170 = APP(_1041,(type_1169))
*                                      type_1171 = RECORD[1, 2](type_1168, type_1170)
*                                 IN   type_1171
*                                 END); 0; 
*                                LET  type_1173 = MU_NR((_1070=SUM(2,2)(CREC{})))
*                                     type_1174 = type_1173.1
*                                IN   type_1174
*                                END)
*            IN   type_1175
*            END =
*          Let  _1165 : Unknown = App_Open(_bar_foo_eq_r_993;  mpoly_var_c_1062; mpoly_var_r_1063;  )
*               v1_1166 : Unknown = select[1][](_1165)
*          In   v1_1166
*          End,
*          /LEAF\poly+Efoo_INT_r_1073
*            (mpoly_var_c_1074 :: REC_K{'a > 'a_1076 :  TYPE} ;; mpoly_var_r_1075 : Unknown : DEP_RECORD[ ] ;; )
*          =>LET  type_1186 = ALLARROW(Open; PARTIAL; (); 
*                                (LET  type_1178 = mpoly_var_c_1074.'a
*                                      type_1179 = APP(_1044,(type_1178))
*                                      type_1180 = mpoly_var_c_1074.'a
*                                      type_1181 = APP(_1044,(type_1180))
*                                      type_1182 = RECORD[1, 2](type_1179, type_1181)
*                                 IN   type_1182
*                                 END); 0; 
*                                LET  type_1184 = MU_NR((_1082=SUM(2,2)(CREC{})))
*                                     type_1185 = type_1184.1
*                                IN   type_1185
*                                END)
*            IN   type_1186
*            END =
*          Let  _1176 : Unknown = App_Open(_bar_foo_eq_r_993;  mpoly_var_c_1074; mpoly_var_r_1075;  )
*               v2_1177 : Unknown = select[2][](_1176)
*          In   v2_1177
*          End]
*         IMPORTS:
*         
*         EXPORTS:
*         +Efoo_INT_r = poly+Efoo_INT_r_1073
*         +Ebar_INT_r = poly+Ebar_INT_r_1061
*         foo_sum = _1058
*         bar_sum = _1055
*         foo_sumarg = _1050
*         bar_sumarg = _1047
*         foo = _1044
*         bar = _1041
*         _bar_foo_eq_TYC_r = _bar_foo_eq_r_993
*         +Q_bar_foo = _990
*         

  Done checking context
  Done validating imports
bnd_valid called with bnd =
_990 =  FUN('a_987 ::  TYPE) = MU((vdt_bar_988=SUM(0,1)(vdt_foo_989), vdt_foo_989=SUM(0,1)(vdt_bar_988)))

kind_valid called with kind =
TYPE

kind_valid returned
con_valid called with constructor =
MU((vdt_bar_988=SUM(0,1)(vdt_foo_989), vdt_foo_989=SUM(0,1)(vdt_bar_988)))

con_valid returned
bnd_valid returned
bnd_valid called with bnd =
_1041 =  FUN('a_1040 ::  TYPE) = PROJ(APP(_990,('a_1040)),1)

kind_valid called with kind =
TYPE

kind_valid returned
con_valid called with constructor =
PROJ(APP(_990,('a_1040)),1)

con_valid called with constructor =
APP(_990,('a_1040))

con_valid called with constructor =
_990

con_valid returned
con_valid returned
con_valid returned
bnd_valid returned
bnd_valid called with bnd =
_1044 =  FUN('a_1043 ::  TYPE) = PROJ(APP(_990,('a_1043)),2)

kind_valid called with kind =
TYPE

kind_valid returned
con_valid called with constructor =
PROJ(APP(_990,('a_1043)),2)

con_valid called with constructor =
APP(_990,('a_1043))

con_valid called with constructor =
_990

con_valid returned
con_valid returned
con_valid returned
bnd_valid returned
bnd_valid called with bnd =
_1047 =  FUN('a_1046 ::  TYPE) = APP(_1044,('a_1046))

kind_valid called with kind =
TYPE

kind_valid returned
con_valid called with constructor =
APP(_1044,('a_1046))

con_valid called with constructor =
_1044

con_valid returned
con_valid returned
bnd_valid returned
bnd_valid called with bnd =
_1050 =  FUN('a_1049 ::  TYPE) = APP(_1041,('a_1049))

kind_valid called with kind =
TYPE

kind_valid returned
con_valid called with constructor =
APP(_1041,('a_1049))

con_valid called with constructor =
_1041

con_valid returned
con_valid returned
bnd_valid returned
bnd_valid called with bnd =
_1055 =  FUN('a_1052 ::  TYPE) = SUM(0,1)(APP(_1047,('a_1052)))

kind_valid called with kind =
TYPE

kind_valid returned
con_valid called with constructor =
SUM(0,1)(APP(_1047,('a_1052)))

con_valid called with constructor =
_1047

con_valid returned
con_valid returned
bnd_valid returned
bnd_valid called with bnd =
_1058 =  FUN('a_1057 ::  TYPE) = SUM(0,1)(APP(_1050,('a_1057)))

kind_valid called with kind =
TYPE

kind_valid returned
con_valid called with constructor =
SUM(0,1)(APP(_1050,('a_1057)))

con_valid called with constructor =
_1050

con_valid returned
con_valid returned
bnd_valid returned
bnd_valid called with bnd =
          /LEAF\_bar_foo_eq_r_993
*           (mpoly_var_c_994 :: REC_K{'a > 'a_996 :  TYPE} ;; mpoly_var_r_995 : Unknown : DEP_RECORD[ ] ;; )
*         =>LET  type_1150 = ALLARROW(Open; PARTIAL; (); 
*                               (LET  type_1140 = MU((vdt_bar_1036=SUM(0,1)(vdt_foo_1037), vdt_foo_1037=SUM(0,1)(vdt_bar_1036)))
*                                     type_1141 = type_1140.1
*                                     type_1144 = MU((vdt_bar_1034=SUM(0,1)(vdt_foo_1035), vdt_foo_1035=SUM(0,1)(vdt_bar_1034)))
*                                     type_1145 = type_1144.1
*                                     type_1146 = RECORD[1, 2](type_1141, type_1145)
*                                IN   type_1146
*                                END); 0; 
*                               LET  type_1148 = MU_NR((_1038=SUM(2,2)(CREC{})))
*                                    type_1149 = type_1148.1
*                               IN   type_1149
*                               END)
*                type_1163 = ALLARROW(Open; PARTIAL; (); 
*                               (LET  type_1153 = MU((vdt_bar_1031=SUM(0,1)(vdt_foo_1032), vdt_foo_1032=SUM(0,1)(vdt_bar_1031)))
*                                     type_1154 = type_1153.2
*                                     type_1157 = MU((vdt_bar_1029=SUM(0,1)(vdt_foo_1030), vdt_foo_1030=SUM(0,1)(vdt_bar_1029)))
*                                     type_1158 = type_1157.2
*                                     type_1159 = RECORD[1, 2](type_1154, type_1158)
*                                IN   type_1159
*                                END); 0; 
*                               LET  type_1161 = MU_NR((_1033=SUM(2,2)(CREC{})))
*                                    type_1162 = type_1161.1
*                               IN   type_1162
*                               END)
*                type_1164 = RECORD[1, 2](type_1150, type_1163)
*           IN   type_1164
*           END =
*         Let  type_1087 = MU_NR((_997=SUM(2,2)(CREC{})))
*              type_1088 = type_1087.1
*              type_1091 = MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001)))
*              type_1093 = MU_NR((_999=SUM(2,2)(CREC{})))
*              type_1094 = type_1093.1
*              type_1095 = CREC{}
*              type_1096 = SUM(2,2)(type_1095)
*              _1097 : Unknown = inject_known_0[type_1096]()
*              false_1098 : Unknown = roll[type_1094](_1097)
*              /\ vars_eq_0_1004
*                ( ;; arg_pair_1006 : Unknown : RECORD[1, 2](type_1091.1, type_1091.1) ;; )
*              =>type_1088 =
*              Let  type_1099 = type_1091.2
*                   type_1100 = SUM(0,1)(type_1099)
*                   type_1101 = type_1091.1
*                   arg_pair_1_1102 : Unknown = select[1][](arg_pair_1006)
*                   eqargpair_1_1103 : Unknown = unroll[type_1101](arg_pair_1_1102)
*                   type_1104 = type_1091.1
*                   arg_pair_2_1105 : Unknown = select[2][](arg_pair_1006)
*                   eqargpair_2_1106 : Unknown = unroll[type_1104](arg_pair_2_1105)
*                   _1117 : Unknown = 
*                     SUM_SWITCH(eqargpair_1_1103: type_1100, 
*                          eqarg1_1013, 
*                          0: Unknown:: 
*                            Let  _1116 : Unknown = 
*                                   SUM_SWITCH(eqargpair_2_1106: type_1100, 
*                                        eqarg2_1014, 
*                                        0: Unknown:: Let  type_1110 = type_1091.2
*                                                          type_1111 = SUM_0(0,1)(type_1110)
*                                                          _1112 : Unknown = project_known0[type_1111](eqarg1_1013)
*                                                          _1113 : Unknown = project_known0[type_1111](eqarg2_1014)
*                                                          _1114 : Unknown = record(1>_1112, 2>_1113)
*                                                          _1115 : Unknown = App_Open(vars_eq_1_1005;  ; _1114;  )
*                                                     In   _1115
*                                                     End
*                                        DEFAULT = false_1098) : type_1088
*                            In   _1116
*                            End
*                          NODEFAULT) : type_1088
*              In   _1117
*              End
*              /\ vars_eq_1_1005
*                ( ;; arg_pair_1016 : Unknown : RECORD[1, 2](type_1091.2, type_1091.2) ;; )
*              =>type_1088 =
*              Let  type_1118 = type_1091.1
*                   type_1119 = SUM(0,1)(type_1118)
*                   type_1120 = type_1091.2
*                   arg_pair_1_1121 : Unknown = select[1][](arg_pair_1016)
*                   eqargpair_1_1122 : Unknown = unroll[type_1120](arg_pair_1_1121)
*                   type_1123 = type_1091.2
*                   arg_pair_2_1124 : Unknown = select[2][](arg_pair_1016)
*                   eqargpair_2_1125 : Unknown = unroll[type_1123](arg_pair_2_1124)
*                   _1136 : Unknown = 
*                     SUM_SWITCH(eqargpair_1_1122: type_1119, 
*                          eqarg1_1021, 
*                          0: Unknown:: 
*                            Let  _1135 : Unknown = 
*                                   SUM_SWITCH(eqargpair_2_1125: type_1119, 
*                                        eqarg2_1022, 
*                                        0: Unknown:: Let  type_1129 = type_1091.1
*                                                          type_1130 = SUM_0(0,1)(type_1129)
*                                                          _1131 : Unknown = project_known0[type_1130](eqarg1_1021)
*                                                          _1132 : Unknown = project_known0[type_1130](eqarg2_1022)
*                                                          _1133 : Unknown = record(1>_1131, 2>_1132)
*                                                          _1134 : Unknown = App_Open(vars_eq_0_1004;  ; _1133;  )
*                                                     In   _1134
*                                                     End
*                                        DEFAULT = false_1098) : type_1088
*                            In   _1135
*                            End
*                          NODEFAULT) : type_1088
*              In   _1136
*              End
*              top_eq_1137 : Unknown = record(1>vars_eq_0_1004, 2>vars_eq_1_1005)
*         In   top_eq_1137
*         End

XXXX getting function types
XXXX analyzing bnd_types
kind_valid called with kind =
REC_K{'a > 'a_996 :  TYPE}

kind_valid called with kind =
TYPE

kind_valid returned
kind_valid returned
con_valid called with constructor =
          ALLARROW(Open; PARTIAL; (); 
*            (LET  type_1140 = MU((vdt_bar_1036=SUM(0,1)(vdt_foo_1037), vdt_foo_1037=SUM(0,1)(vdt_bar_1036)))
*                  type_1141 = type_1140.1
*                  type_1144 = MU((vdt_bar_1034=SUM(0,1)(vdt_foo_1035), vdt_foo_1035=SUM(0,1)(vdt_bar_1034)))
*                  type_1145 = type_1144.1
*                  type_1146 = RECORD[1, 2](type_1141, type_1145)
*             IN   type_1146
*             END); 0; 
*            LET  type_1148 = MU_NR((_1038=SUM(2,2)(CREC{})))
*                 type_1149 = type_1148.1
*            IN   type_1149
*            END)

con_valid called with constructor =
MU((vdt_bar_1036=SUM(0,1)(vdt_foo_1037), vdt_foo_1037=SUM(0,1)(vdt_bar_1036)))

con_valid returned
con_valid called with constructor =
type_1140.1

con_valid called with constructor =
type_1140

con_valid returned
con_valid returned
con_valid called with constructor =
MU((vdt_bar_1034=SUM(0,1)(vdt_foo_1035), vdt_foo_1035=SUM(0,1)(vdt_bar_1034)))

con_valid returned
con_valid called with constructor =
type_1144.1

con_valid called with constructor =
type_1144

con_valid returned
con_valid returned
con_valid called with constructor =
RECORD[1, 2](type_1141, type_1145)

con_valid returned
con_valid called with constructor =
MU_NR((_1038=SUM(2,2)(CREC{})))

con_valid returned
con_valid called with constructor =
type_1148.1

con_valid called with constructor =
type_1148

con_valid returned
con_valid returned
con_valid returned
con_valid called with constructor =
          ALLARROW(Open; PARTIAL; (); 
*            (LET  type_1153 = MU((vdt_bar_1031=SUM(0,1)(vdt_foo_1032), vdt_foo_1032=SUM(0,1)(vdt_bar_1031)))
*                  type_1154 = type_1153.2
*                  type_1157 = MU((vdt_bar_1029=SUM(0,1)(vdt_foo_1030), vdt_foo_1030=SUM(0,1)(vdt_bar_1029)))
*                  type_1158 = type_1157.2
*                  type_1159 = RECORD[1, 2](type_1154, type_1158)
*             IN   type_1159
*             END); 0; 
*            LET  type_1161 = MU_NR((_1033=SUM(2,2)(CREC{})))
*                 type_1162 = type_1161.1
*            IN   type_1162
*            END)

con_valid called with constructor =
MU((vdt_bar_1031=SUM(0,1)(vdt_foo_1032), vdt_foo_1032=SUM(0,1)(vdt_bar_1031)))

con_valid returned
con_valid called with constructor =
type_1153.2

con_valid called with constructor =
type_1153

con_valid returned
con_valid returned
con_valid called with constructor =
MU((vdt_bar_1029=SUM(0,1)(vdt_foo_1030), vdt_foo_1030=SUM(0,1)(vdt_bar_1029)))

con_valid returned
con_valid called with constructor =
type_1157.2

con_valid called with constructor =
type_1157

con_valid returned
con_valid returned
con_valid called with constructor =
RECORD[1, 2](type_1154, type_1158)

con_valid returned
con_valid called with constructor =
MU_NR((_1033=SUM(2,2)(CREC{})))

con_valid returned
con_valid called with constructor =
type_1161.1

con_valid called with constructor =
type_1161

con_valid returned
con_valid returned
con_valid returned
con_valid called with constructor =
RECORD[1, 2](type_1150, type_1163)

con_valid returned
XXXX building up context
XXXX checking defs
XXXX exp_analyze 0 -----------------------------
XXXX exp_analyze 0 context = 
 Constructor variables, kinds, and equations are :
mpoly_var_c_994::REC_K{'a > 'a_996 :  TYPE}
_1058 =           LET  _1058 =  FUN('a_1057 ::  TYPE) = SUM(0,1)(APP(_1050,('a_1057)))
*         IN   _1058
*         END::Arrow_k(Open; 'a_1057 : TYPE; SINGLE_TYPE(SUM(0,1)(APP(_1050,('a_1057)))))
_1055 =           LET  _1055 =  FUN('a_1052 ::  TYPE) = SUM(0,1)(APP(_1047,('a_1052)))
*         IN   _1055
*         END::Arrow_k(Open; 'a_1052 : TYPE; SINGLE_TYPE(SUM(0,1)(APP(_1047,('a_1052)))))
_1050 =           LET  _1050 =  FUN('a_1049 ::  TYPE) = APP(_1041,('a_1049))
*         IN   _1050
*         END::Arrow_k(Open; 'a_1049 : TYPE; SINGLE_TYPE(APP(_1041,('a_1049))))
_1047 =           LET  _1047 =  FUN('a_1046 ::  TYPE) = APP(_1044,('a_1046))
*         IN   _1047
*         END::Arrow_k(Open; 'a_1046 : TYPE; SINGLE_TYPE(APP(_1044,('a_1046))))
_1044 =           LET  _1044 =  FUN('a_1043 ::  TYPE) = PROJ(APP(_990,('a_1043)),2)
*         IN   _1044
*         END::Arrow_k(Open; 'a_1043 : TYPE; SINGLE_TYPE(PROJ(APP(_990,('a_1043)),2)))
_1041 =           LET  _1041 =  FUN('a_1040 ::  TYPE) = PROJ(APP(_990,('a_1040)),1)
*         IN   _1041
*         END::Arrow_k(Open; 'a_1040 : TYPE; SINGLE_TYPE(PROJ(APP(_990,('a_1040)),1)))
_990 =           LET  _990 =  FUN('a_987 ::  TYPE) = MU((vdt_bar_988=SUM(0,1)(vdt_foo_989), vdt_foo_989=SUM(0,1)(vdt_bar_988)))
*         IN   _990
*         END::          Arrow_k(Open; 'a_987 : TYPE; REC_K{1 > vdt_bar_1206 : 
*                                            SINGLE_TYPE(PROJ(MU((vdt_bar_988=SUM(0,1)(vdt_foo_989),
*                                                                 vdt_foo_989=SUM(0,1)(vdt_bar_988))),1)),
*                                            2 > vdt_foo_1207 : 
*                                            SINGLE_TYPE(PROJ(MU((vdt_bar_988=SUM(0,1)(vdt_foo_989),
*                                                                 vdt_foo_989=SUM(0,1)(vdt_bar_988))),2))})

 Expression variables and constructors are :
_bar_foo_eq_r_993:          ALLARROW(Open; TOTAL; (mpoly_var_c_994 :: REC_K{'a > 'a_996 :  TYPE}); 
*            (DEP_RECORD[ ]); 0; 
*            LET  type_1150 = ALLARROW(Open; PARTIAL; (); 
*                                (LET  type_1140 = MU((vdt_bar_1036=SUM(0,1)(vdt_foo_1037), vdt_foo_1037=SUM(0,1)(vdt_bar_1036)))
*                                      type_1141 = type_1140.1
*                                      type_1144 = MU((vdt_bar_1034=SUM(0,1)(vdt_foo_1035), vdt_foo_1035=SUM(0,1)(vdt_bar_1034)))
*                                      type_1145 = type_1144.1
*                                      type_1146 = RECORD[1, 2](type_1141, type_1145)
*                                 IN   type_1146
*                                 END); 0; 
*                                LET  type_1148 = MU_NR((_1038=SUM(2,2)(CREC{})))
*                                     type_1149 = type_1148.1
*                                IN   type_1149
*                                END)
*                 type_1163 = ALLARROW(Open; PARTIAL; (); 
*                                (LET  type_1153 = MU((vdt_bar_1031=SUM(0,1)(vdt_foo_1032), vdt_foo_1032=SUM(0,1)(vdt_bar_1031)))
*                                      type_1154 = type_1153.2
*                                      type_1157 = MU((vdt_bar_1029=SUM(0,1)(vdt_foo_1030), vdt_foo_1030=SUM(0,1)(vdt_bar_1029)))
*                                      type_1158 = type_1157.2
*                                      type_1159 = RECORD[1, 2](type_1154, type_1158)
*                                 IN   type_1159
*                                 END); 0; 
*                                LET  type_1161 = MU_NR((_1033=SUM(2,2)(CREC{})))
*                                     type_1162 = type_1161.1
*                                IN   type_1162
*                                END)
*                 type_1164 = RECORD[1, 2](type_1150, type_1163)
*            IN   type_1164
*            END)
mpoly_var_r_995:DEP_RECORD[ ]

XXXX exp_analyze 0 exp =           Let  type_1087 = MU_NR((_997=SUM(2,2)(CREC{})))
*              type_1088 = type_1087.1
*              type_1091 = MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001)))
*              type_1093 = MU_NR((_999=SUM(2,2)(CREC{})))
*              type_1094 = type_1093.1
*              type_1095 = CREC{}
*              type_1096 = SUM(2,2)(type_1095)
*              _1097 : Unknown = inject_known_0[type_1096]()
*              false_1098 : Unknown = roll[type_1094](_1097)
*              /\ vars_eq_0_1004
*                ( ;; arg_pair_1006 : Unknown : RECORD[1, 2](type_1091.1, type_1091.1) ;; )
*              =>type_1088 =
*              Let  type_1099 = type_1091.2
*                   type_1100 = SUM(0,1)(type_1099)
*                   type_1101 = type_1091.1
*                   arg_pair_1_1102 : Unknown = select[1][](arg_pair_1006)
*                   eqargpair_1_1103 : Unknown = unroll[type_1101](arg_pair_1_1102)
*                   type_1104 = type_1091.1
*                   arg_pair_2_1105 : Unknown = select[2][](arg_pair_1006)
*                   eqargpair_2_1106 : Unknown = unroll[type_1104](arg_pair_2_1105)
*                   _1117 : Unknown = 
*                     SUM_SWITCH(eqargpair_1_1103: type_1100, 
*                          eqarg1_1013, 
*                          0: Unknown:: 
*                            Let  _1116 : Unknown = 
*                                   SUM_SWITCH(eqargpair_2_1106: type_1100, 
*                                        eqarg2_1014, 
*                                        0: Unknown:: Let  type_1110 = type_1091.2
*                                                          type_1111 = SUM_0(0,1)(type_1110)
*                                                          _1112 : Unknown = project_known0[type_1111](eqarg1_1013)
*                                                          _1113 : Unknown = project_known0[type_1111](eqarg2_1014)
*                                                          _1114 : Unknown = record(1>_1112, 2>_1113)
*                                                          _1115 : Unknown = App_Open(vars_eq_1_1005;  ; _1114;  )
*                                                     In   _1115
*                                                     End
*                                        DEFAULT = false_1098) : type_1088
*                            In   _1116
*                            End
*                          NODEFAULT) : type_1088
*              In   _1117
*              End
*              /\ vars_eq_1_1005
*                ( ;; arg_pair_1016 : Unknown : RECORD[1, 2](type_1091.2, type_1091.2) ;; )
*              =>type_1088 =
*              Let  type_1118 = type_1091.1
*                   type_1119 = SUM(0,1)(type_1118)
*                   type_1120 = type_1091.2
*                   arg_pair_1_1121 : Unknown = select[1][](arg_pair_1016)
*                   eqargpair_1_1122 : Unknown = unroll[type_1120](arg_pair_1_1121)
*                   type_1123 = type_1091.2
*                   arg_pair_2_1124 : Unknown = select[2][](arg_pair_1016)
*                   eqargpair_2_1125 : Unknown = unroll[type_1123](arg_pair_2_1124)
*                   _1136 : Unknown = 
*                     SUM_SWITCH(eqargpair_1_1122: type_1119, 
*                          eqarg1_1021, 
*                          0: Unknown:: 
*                            Let  _1135 : Unknown = 
*                                   SUM_SWITCH(eqargpair_2_1125: type_1119, 
*                                        eqarg2_1022, 
*                                        0: Unknown:: Let  type_1129 = type_1091.1
*                                                          type_1130 = SUM_0(0,1)(type_1129)
*                                                          _1131 : Unknown = project_known0[type_1130](eqarg1_1021)
*                                                          _1132 : Unknown = project_known0[type_1130](eqarg2_1022)
*                                                          _1133 : Unknown = record(1>_1131, 2>_1132)
*                                                          _1134 : Unknown = App_Open(vars_eq_0_1004;  ; _1133;  )
*                                                     In   _1134
*                                                     End
*                                        DEFAULT = false_1098) : type_1088
*                            In   _1135
*                            End
*                          NODEFAULT) : type_1088
*              In   _1136
*              End
*              top_eq_1137 : Unknown = record(1>vars_eq_0_1004, 2>vars_eq_1_1005)
*         In   top_eq_1137
*         End
XXXX exp_analyze 0 con =           LET  type_1150 = ALLARROW(Open; PARTIAL; (); 
*                             (LET  type_1140 = MU((vdt_bar_1036=SUM(0,1)(vdt_foo_1037), vdt_foo_1037=SUM(0,1)(vdt_bar_1036)))
*                                   type_1141 = type_1140.1
*                                   type_1144 = MU((vdt_bar_1034=SUM(0,1)(vdt_foo_1035), vdt_foo_1035=SUM(0,1)(vdt_bar_1034)))
*                                   type_1145 = type_1144.1
*                                   type_1146 = RECORD[1, 2](type_1141, type_1145)
*                              IN   type_1146
*                              END); 0; 
*                             LET  type_1148 = MU_NR((_1038=SUM(2,2)(CREC{})))
*                                  type_1149 = type_1148.1
*                             IN   type_1149
*                             END)
*              type_1163 = ALLARROW(Open; PARTIAL; (); 
*                             (LET  type_1153 = MU((vdt_bar_1031=SUM(0,1)(vdt_foo_1032), vdt_foo_1032=SUM(0,1)(vdt_bar_1031)))
*                                   type_1154 = type_1153.2
*                                   type_1157 = MU((vdt_bar_1029=SUM(0,1)(vdt_foo_1030), vdt_foo_1030=SUM(0,1)(vdt_bar_1029)))
*                                   type_1158 = type_1157.2
*                                   type_1159 = RECORD[1, 2](type_1154, type_1158)
*                              IN   type_1159
*                              END); 0; 
*                             LET  type_1161 = MU_NR((_1033=SUM(2,2)(CREC{})))
*                                  type_1162 = type_1161.1
*                             IN   type_1162
*                             END)
*              type_1164 = RECORD[1, 2](type_1150, type_1163)
*         IN   type_1164
*         END
exp_valid called with expression =
          Let  type_1087 = MU_NR((_997=SUM(2,2)(CREC{})))
*              type_1088 = type_1087.1
*              type_1091 = MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001)))
*              type_1093 = MU_NR((_999=SUM(2,2)(CREC{})))
*              type_1094 = type_1093.1
*              type_1095 = CREC{}
*              type_1096 = SUM(2,2)(type_1095)
*              _1097 : Unknown = inject_known_0[type_1096]()
*              false_1098 : Unknown = roll[type_1094](_1097)
*              /\ vars_eq_0_1004
*                ( ;; arg_pair_1006 : Unknown : RECORD[1, 2](type_1091.1, type_1091.1) ;; )
*              =>type_1088 =
*              Let  type_1099 = type_1091.2
*                   type_1100 = SUM(0,1)(type_1099)
*                   type_1101 = type_1091.1
*                   arg_pair_1_1102 : Unknown = select[1][](arg_pair_1006)
*                   eqargpair_1_1103 : Unknown = unroll[type_1101](arg_pair_1_1102)
*                   type_1104 = type_1091.1
*                   arg_pair_2_1105 : Unknown = select[2][](arg_pair_1006)
*                   eqargpair_2_1106 : Unknown = unroll[type_1104](arg_pair_2_1105)
*                   _1117 : Unknown = 
*                     SUM_SWITCH(eqargpair_1_1103: type_1100, 
*                          eqarg1_1013, 
*                          0: Unknown:: 
*                            Let  _1116 : Unknown = 
*                                   SUM_SWITCH(eqargpair_2_1106: type_1100, 
*                                        eqarg2_1014, 
*                                        0: Unknown:: Let  type_1110 = type_1091.2
*                                                          type_1111 = SUM_0(0,1)(type_1110)
*                                                          _1112 : Unknown = project_known0[type_1111](eqarg1_1013)
*                                                          _1113 : Unknown = project_known0[type_1111](eqarg2_1014)
*                                                          _1114 : Unknown = record(1>_1112, 2>_1113)
*                                                          _1115 : Unknown = App_Open(vars_eq_1_1005;  ; _1114;  )
*                                                     In   _1115
*                                                     End
*                                        DEFAULT = false_1098) : type_1088
*                            In   _1116
*                            End
*                          NODEFAULT) : type_1088
*              In   _1117
*              End
*              /\ vars_eq_1_1005
*                ( ;; arg_pair_1016 : Unknown : RECORD[1, 2](type_1091.2, type_1091.2) ;; )
*              =>type_1088 =
*              Let  type_1118 = type_1091.1
*                   type_1119 = SUM(0,1)(type_1118)
*                   type_1120 = type_1091.2
*                   arg_pair_1_1121 : Unknown = select[1][](arg_pair_1016)
*                   eqargpair_1_1122 : Unknown = unroll[type_1120](arg_pair_1_1121)
*                   type_1123 = type_1091.2
*                   arg_pair_2_1124 : Unknown = select[2][](arg_pair_1016)
*                   eqargpair_2_1125 : Unknown = unroll[type_1123](arg_pair_2_1124)
*                   _1136 : Unknown = 
*                     SUM_SWITCH(eqargpair_1_1122: type_1119, 
*                          eqarg1_1021, 
*                          0: Unknown:: 
*                            Let  _1135 : Unknown = 
*                                   SUM_SWITCH(eqargpair_2_1125: type_1119, 
*                                        eqarg2_1022, 
*                                        0: Unknown:: Let  type_1129 = type_1091.1
*                                                          type_1130 = SUM_0(0,1)(type_1129)
*                                                          _1131 : Unknown = project_known0[type_1130](eqarg1_1021)
*                                                          _1132 : Unknown = project_known0[type_1130](eqarg2_1022)
*                                                          _1133 : Unknown = record(1>_1131, 2>_1132)
*                                                          _1134 : Unknown = App_Open(vars_eq_0_1004;  ; _1133;  )
*                                                     In   _1134
*                                                     End
*                                        DEFAULT = false_1098) : type_1088
*                            In   _1135
*                            End
*                          NODEFAULT) : type_1088
*              In   _1136
*              End
*              top_eq_1137 : Unknown = record(1>vars_eq_0_1004, 2>vars_eq_1_1005)
*         In   top_eq_1137
*         End

bnd_valid called with bnd =
type_1087 = MU_NR((_997=SUM(2,2)(CREC{})))

con_valid called with constructor =
MU_NR((_997=SUM(2,2)(CREC{})))

con_valid returned
bnd_valid returned
bnd_valid called with bnd =
type_1088 = type_1087.1

con_valid called with constructor =
type_1087.1

con_valid called with constructor =
type_1087

con_valid returned
con_valid returned
bnd_valid returned
bnd_valid called with bnd =
type_1091 = MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001)))

con_valid called with constructor =
MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001)))

con_valid returned
bnd_valid returned
bnd_valid called with bnd =
type_1093 = MU_NR((_999=SUM(2,2)(CREC{})))

con_valid called with constructor =
MU_NR((_999=SUM(2,2)(CREC{})))

con_valid returned
bnd_valid returned
bnd_valid called with bnd =
type_1094 = type_1093.1

con_valid called with constructor =
type_1093.1

con_valid called with constructor =
type_1093

con_valid returned
con_valid returned
bnd_valid returned
bnd_valid called with bnd =
type_1095 = CREC{}

con_valid called with constructor =
CREC{}

con_valid returned
bnd_valid returned
bnd_valid called with bnd =
type_1096 = SUM(2,2)(type_1095)

con_valid called with constructor =
SUM(2,2)(type_1095)

con_valid returned
bnd_valid returned
bnd_valid called with bnd =
_1097 : Unknown = inject_known_0[type_1096]()

exp_valid called with expression =
inject_known_0[type_1096]()

exp_valid returned
bnd_valid returned
bnd_valid called with bnd =
false_1098 : Unknown = roll[type_1094](_1097)

exp_valid called with expression =
roll[type_1094](_1097)

exp_valid called with expression =
_1097

exp_valid returned
XXXX finding path1
XXXX finding path2
exp_valid returned
bnd_valid returned
bnd_valid called with bnd =
          /\ vars_eq_0_1004
*           ( ;; arg_pair_1006 : Unknown : RECORD[1, 2](type_1091.1, type_1091.1) ;; )
*         =>type_1088 =
*         Let  type_1099 = type_1091.2
*              type_1100 = SUM(0,1)(type_1099)
*              type_1101 = type_1091.1
*              arg_pair_1_1102 : Unknown = select[1][](arg_pair_1006)
*              eqargpair_1_1103 : Unknown = unroll[type_1101](arg_pair_1_1102)
*              type_1104 = type_1091.1
*              arg_pair_2_1105 : Unknown = select[2][](arg_pair_1006)
*              eqargpair_2_1106 : Unknown = unroll[type_1104](arg_pair_2_1105)
*              _1117 : Unknown = 
*                SUM_SWITCH(eqargpair_1_1103: type_1100, 
*                     eqarg1_1013, 
*                     0: Unknown:: 
*                       Let  _1116 : Unknown = 
*                              SUM_SWITCH(eqargpair_2_1106: type_1100, 
*                                   eqarg2_1014, 
*                                   0: Unknown:: Let  type_1110 = type_1091.2
*                                                     type_1111 = SUM_0(0,1)(type_1110)
*                                                     _1112 : Unknown = project_known0[type_1111](eqarg1_1013)
*                                                     _1113 : Unknown = project_known0[type_1111](eqarg2_1014)
*                                                     _1114 : Unknown = record(1>_1112, 2>_1113)
*                                                     _1115 : Unknown = App_Open(vars_eq_1_1005;  ; _1114;  )
*                                                In   _1115
*                                                End
*                                   DEFAULT = false_1098) : type_1088
*                       In   _1116
*                       End
*                     NODEFAULT) : type_1088
*         In   _1117
*         End
*         /\ vars_eq_1_1005
*           ( ;; arg_pair_1016 : Unknown : RECORD[1, 2](type_1091.2, type_1091.2) ;; )
*         =>type_1088 =
*         Let  type_1118 = type_1091.1
*              type_1119 = SUM(0,1)(type_1118)
*              type_1120 = type_1091.2
*              arg_pair_1_1121 : Unknown = select[1][](arg_pair_1016)
*              eqargpair_1_1122 : Unknown = unroll[type_1120](arg_pair_1_1121)
*              type_1123 = type_1091.2
*              arg_pair_2_1124 : Unknown = select[2][](arg_pair_1016)
*              eqargpair_2_1125 : Unknown = unroll[type_1123](arg_pair_2_1124)
*              _1136 : Unknown = 
*                SUM_SWITCH(eqargpair_1_1122: type_1119, 
*                     eqarg1_1021, 
*                     0: Unknown:: 
*                       Let  _1135 : Unknown = 
*                              SUM_SWITCH(eqargpair_2_1125: type_1119, 
*                                   eqarg2_1022, 
*                                   0: Unknown:: Let  type_1129 = type_1091.1
*                                                     type_1130 = SUM_0(0,1)(type_1129)
*                                                     _1131 : Unknown = project_known0[type_1130](eqarg1_1021)
*                                                     _1132 : Unknown = project_known0[type_1130](eqarg2_1022)
*                                                     _1133 : Unknown = record(1>_1131, 2>_1132)
*                                                     _1134 : Unknown = App_Open(vars_eq_0_1004;  ; _1133;  )
*                                                In   _1134
*                                                End
*                                   DEFAULT = false_1098) : type_1088
*                       In   _1135
*                       End
*                     NODEFAULT) : type_1088
*         In   _1136
*         End

XXXX getting function types
XXXX analyzing bnd_types
con_valid called with constructor =
type_1091

con_valid returned
con_valid called with constructor =
type_1091

con_valid returned
con_valid called with constructor =
type_1091

con_valid returned
con_valid called with constructor =
type_1091

con_valid returned
XXXX building up context
XXXX checking defs
XXXX exp_analyze 1 -----------------------------
XXXX exp_analyze 1 context = 
 Constructor variables, kinds, and equations are :
type_1096 = SUM(2,2)(type_1095)::SINGLE_TYPE(SUM(2,2)(type_1095))
type_1095 = CREC{}::REC_K{}
type_1094 = PROJ(MU_NR((_999=SUM(2,2)(CREC{}))),1)::SINGLE_TYPE(type_1093.1)
type_1093 = MU_NR((_999=SUM(2,2)(CREC{})))::REC_K{1 > _1221 :  SINGLE_TYPE(PROJ(MU_NR((_999=SUM(2,2)(CREC{}))),1))}
type_1091 = MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001)))::          REC_K{1 > vdt_bar_1219 : 
*               SINGLE_TYPE(PROJ(MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001))),1)),
*               2 > vdt_foo_1220 : 
*               SINGLE_TYPE(PROJ(MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001))),2))}
type_1088 = type_1087.1::SINGLE_TYPE(type_1087.1)
type_1087 = MU_NR((_997=SUM(2,2)(CREC{})))::REC_K{1 > _1218 :  SINGLE_TYPE(PROJ(MU_NR((_997=SUM(2,2)(CREC{}))),1))}
mpoly_var_c_994::REC_K{'a > 'a_996 :  TYPE}
_1058 =           LET  _1058 =  FUN('a_1057 ::  TYPE) = SUM(0,1)(APP(_1050,('a_1057)))
*         IN   _1058
*         END::Arrow_k(Open; 'a_1057 : TYPE; SINGLE_TYPE(SUM(0,1)(APP(_1050,('a_1057)))))
_1055 =           LET  _1055 =  FUN('a_1052 ::  TYPE) = SUM(0,1)(APP(_1047,('a_1052)))
*         IN   _1055
*         END::Arrow_k(Open; 'a_1052 : TYPE; SINGLE_TYPE(SUM(0,1)(APP(_1047,('a_1052)))))
_1050 =           LET  _1050 =  FUN('a_1049 ::  TYPE) = APP(_1041,('a_1049))
*         IN   _1050
*         END::Arrow_k(Open; 'a_1049 : TYPE; SINGLE_TYPE(APP(_1041,('a_1049))))
_1047 =           LET  _1047 =  FUN('a_1046 ::  TYPE) = APP(_1044,('a_1046))
*         IN   _1047
*         END::Arrow_k(Open; 'a_1046 : TYPE; SINGLE_TYPE(APP(_1044,('a_1046))))
_1044 =           LET  _1044 =  FUN('a_1043 ::  TYPE) = PROJ(APP(_990,('a_1043)),2)
*         IN   _1044
*         END::Arrow_k(Open; 'a_1043 : TYPE; SINGLE_TYPE(PROJ(APP(_990,('a_1043)),2)))
_1041 =           LET  _1041 =  FUN('a_1040 ::  TYPE) = PROJ(APP(_990,('a_1040)),1)
*         IN   _1041
*         END::Arrow_k(Open; 'a_1040 : TYPE; SINGLE_TYPE(PROJ(APP(_990,('a_1040)),1)))
_990 =           LET  _990 =  FUN('a_987 ::  TYPE) = MU((vdt_bar_988=SUM(0,1)(vdt_foo_989), vdt_foo_989=SUM(0,1)(vdt_bar_988)))
*         IN   _990
*         END::          Arrow_k(Open; 'a_987 : TYPE; REC_K{1 > vdt_bar_1206 : 
*                                            SINGLE_TYPE(PROJ(MU((vdt_bar_988=SUM(0,1)(vdt_foo_989),
*                                                                 vdt_foo_989=SUM(0,1)(vdt_bar_988))),1)),
*                                            2 > vdt_foo_1207 : 
*                                            SINGLE_TYPE(PROJ(MU((vdt_bar_988=SUM(0,1)(vdt_foo_989),
*                                                                 vdt_foo_989=SUM(0,1)(vdt_bar_988))),2))})

 Expression variables and constructors are :
_bar_foo_eq_r_993:          ALLARROW(Open; TOTAL; (mpoly_var_c_994 :: REC_K{'a > 'a_996 :  TYPE}); 
*            (DEP_RECORD[ ]); 0; 
*            LET  type_1150 = ALLARROW(Open; PARTIAL; (); 
*                                (LET  type_1140 = MU((vdt_bar_1036=SUM(0,1)(vdt_foo_1037), vdt_foo_1037=SUM(0,1)(vdt_bar_1036)))
*                                      type_1141 = type_1140.1
*                                      type_1144 = MU((vdt_bar_1034=SUM(0,1)(vdt_foo_1035), vdt_foo_1035=SUM(0,1)(vdt_bar_1034)))
*                                      type_1145 = type_1144.1
*                                      type_1146 = RECORD[1, 2](type_1141, type_1145)
*                                 IN   type_1146
*                                 END); 0; 
*                                LET  type_1148 = MU_NR((_1038=SUM(2,2)(CREC{})))
*                                     type_1149 = type_1148.1
*                                IN   type_1149
*                                END)
*                 type_1163 = ALLARROW(Open; PARTIAL; (); 
*                                (LET  type_1153 = MU((vdt_bar_1031=SUM(0,1)(vdt_foo_1032), vdt_foo_1032=SUM(0,1)(vdt_bar_1031)))
*                                      type_1154 = type_1153.2
*                                      type_1157 = MU((vdt_bar_1029=SUM(0,1)(vdt_foo_1030), vdt_foo_1030=SUM(0,1)(vdt_bar_1029)))
*                                      type_1158 = type_1157.2
*                                      type_1159 = RECORD[1, 2](type_1154, type_1158)
*                                 IN   type_1159
*                                 END); 0; 
*                                LET  type_1161 = MU_NR((_1033=SUM(2,2)(CREC{})))
*                                     type_1162 = type_1161.1
*                                IN   type_1162
*                                END)
*                 type_1164 = RECORD[1, 2](type_1150, type_1163)
*            IN   type_1164
*            END)
mpoly_var_r_995:DEP_RECORD[ ]
vars_eq_0_1004:ALLARROW(Open; TOTAL; (); (RECORD[1, 2](type_1091.1, type_1091.1)); 0; type_1088)
vars_eq_1_1005:ALLARROW(Open; TOTAL; (); (RECORD[1, 2](type_1091.2, type_1091.2)); 0; type_1088)
arg_pair_1006:RECORD[1, 2](type_1091.1, type_1091.1)
_1097:SUM_0(2,2)(type_1095)
false_1098:type_1094

XXXX exp_analyze 1 exp =           Let  type_1099 = type_1091.2
*              type_1100 = SUM(0,1)(type_1099)
*              type_1101 = type_1091.1
*              arg_pair_1_1102 : Unknown = select[1][](arg_pair_1006)
*              eqargpair_1_1103 : Unknown = unroll[type_1101](arg_pair_1_1102)
*              type_1104 = type_1091.1
*              arg_pair_2_1105 : Unknown = select[2][](arg_pair_1006)
*              eqargpair_2_1106 : Unknown = unroll[type_1104](arg_pair_2_1105)
*              _1117 : Unknown = 
*                SUM_SWITCH(eqargpair_1_1103: type_1100, 
*                     eqarg1_1013, 
*                     0: Unknown:: 
*                       Let  _1116 : Unknown = 
*                              SUM_SWITCH(eqargpair_2_1106: type_1100, 
*                                   eqarg2_1014, 
*                                   0: Unknown:: Let  type_1110 = type_1091.2
*                                                     type_1111 = SUM_0(0,1)(type_1110)
*                                                     _1112 : Unknown = project_known0[type_1111](eqarg1_1013)
*                                                     _1113 : Unknown = project_known0[type_1111](eqarg2_1014)
*                                                     _1114 : Unknown = record(1>_1112, 2>_1113)
*                                                     _1115 : Unknown = App_Open(vars_eq_1_1005;  ; _1114;  )
*                                                In   _1115
*                                                End
*                                   DEFAULT = false_1098) : type_1088
*                       In   _1116
*                       End
*                     NODEFAULT) : type_1088
*         In   _1117
*         End
XXXX exp_analyze 1 con = type_1088
exp_valid called with expression =
          Let  type_1099 = type_1091.2
*              type_1100 = SUM(0,1)(type_1099)
*              type_1101 = type_1091.1
*              arg_pair_1_1102 : Unknown = select[1][](arg_pair_1006)
*              eqargpair_1_1103 : Unknown = unroll[type_1101](arg_pair_1_1102)
*              type_1104 = type_1091.1
*              arg_pair_2_1105 : Unknown = select[2][](arg_pair_1006)
*              eqargpair_2_1106 : Unknown = unroll[type_1104](arg_pair_2_1105)
*              _1117 : Unknown = 
*                SUM_SWITCH(eqargpair_1_1103: type_1100, 
*                     eqarg1_1013, 
*                     0: Unknown:: 
*                       Let  _1116 : Unknown = 
*                              SUM_SWITCH(eqargpair_2_1106: type_1100, 
*                                   eqarg2_1014, 
*                                   0: Unknown:: Let  type_1110 = type_1091.2
*                                                     type_1111 = SUM_0(0,1)(type_1110)
*                                                     _1112 : Unknown = project_known0[type_1111](eqarg1_1013)
*                                                     _1113 : Unknown = project_known0[type_1111](eqarg2_1014)
*                                                     _1114 : Unknown = record(1>_1112, 2>_1113)
*                                                     _1115 : Unknown = App_Open(vars_eq_1_1005;  ; _1114;  )
*                                                In   _1115
*                                                End
*                                   DEFAULT = false_1098) : type_1088
*                       In   _1116
*                       End
*                     NODEFAULT) : type_1088
*         In   _1117
*         End

bnd_valid called with bnd =
type_1099 = type_1091.2

con_valid called with constructor =
type_1091.2

con_valid called with constructor =
type_1091

con_valid returned
con_valid returned
bnd_valid returned
bnd_valid called with bnd =
type_1100 = SUM(0,1)(type_1099)

con_valid called with constructor =
SUM(0,1)(type_1099)

con_valid returned
bnd_valid returned
bnd_valid called with bnd =
type_1101 = type_1091.1

con_valid called with constructor =
type_1091.1

con_valid called with constructor =
type_1091

con_valid returned
con_valid returned
bnd_valid returned
bnd_valid called with bnd =
arg_pair_1_1102 : Unknown = select[1][](arg_pair_1006)

exp_valid called with expression =
select[1][](arg_pair_1006)

exp_valid called with expression =
arg_pair_1006

exp_valid returned
exp_valid returned
bnd_valid returned
bnd_valid called with bnd =
eqargpair_1_1103 : Unknown = unroll[type_1101](arg_pair_1_1102)

exp_valid called with expression =
unroll[type_1101](arg_pair_1_1102)

exp_valid called with expression =
arg_pair_1_1102

exp_valid returned
XXXX finding path1
XXXX finding path2
XXXX finding path1
XXXX finding path2
exp_valid returned
bnd_valid returned
bnd_valid called with bnd =
type_1104 = type_1091.1

con_valid called with constructor =
type_1091.1

con_valid called with constructor =
type_1091

con_valid returned
con_valid returned
bnd_valid returned
bnd_valid called with bnd =
arg_pair_2_1105 : Unknown = select[2][](arg_pair_1006)

exp_valid called with expression =
select[2][](arg_pair_1006)

exp_valid called with expression =
arg_pair_1006

exp_valid returned
exp_valid returned
bnd_valid returned
bnd_valid called with bnd =
eqargpair_2_1106 : Unknown = unroll[type_1104](arg_pair_2_1105)

exp_valid called with expression =
unroll[type_1104](arg_pair_2_1105)

exp_valid called with expression =
arg_pair_2_1105

exp_valid returned
XXXX finding path1
XXXX finding path2
XXXX finding path1
XXXX finding path2
exp_valid returned
bnd_valid returned
bnd_valid called with bnd =
          _1117 : Unknown = 
*           SUM_SWITCH(eqargpair_1_1103: type_1100, 
*                eqarg1_1013, 
*                0: Unknown:: 
*                  Let  _1116 : Unknown = 
*                         SUM_SWITCH(eqargpair_2_1106: type_1100, 
*                              eqarg2_1014, 
*                              0: Unknown:: Let  type_1110 = type_1091.2
*                                                type_1111 = SUM_0(0,1)(type_1110)
*                                                _1112 : Unknown = project_known0[type_1111](eqarg1_1013)
*                                                _1113 : Unknown = project_known0[type_1111](eqarg2_1014)
*                                                _1114 : Unknown = record(1>_1112, 2>_1113)
*                                                _1115 : Unknown = App_Open(vars_eq_1_1005;  ; _1114;  )
*                                           In   _1115
*                                           End
*                              DEFAULT = false_1098) : type_1088
*                  In   _1116
*                  End
*                NODEFAULT) : type_1088

exp_valid called with expression =
          SUM_SWITCH(eqargpair_1_1103: type_1100, 
*              eqarg1_1013, 
*              0: Unknown:: 
*                Let  _1116 : Unknown = 
*                       SUM_SWITCH(eqargpair_2_1106: type_1100, 
*                            eqarg2_1014, 
*                            0: Unknown:: Let  type_1110 = type_1091.2
*                                              type_1111 = SUM_0(0,1)(type_1110)
*                                              _1112 : Unknown = project_known0[type_1111](eqarg1_1013)
*                                              _1113 : Unknown = project_known0[type_1111](eqarg2_1014)
*                                              _1114 : Unknown = record(1>_1112, 2>_1113)
*                                              _1115 : Unknown = App_Open(vars_eq_1_1005;  ; _1114;  )
*                                         In   _1115
*                                         End
*                            DEFAULT = false_1098) : type_1088
*                In   _1116
*                End
*              NODEFAULT) : type_1088

exp_valid called with expression =
eqargpair_1_1103

exp_valid returned
XXXX finding path1
XXXX finding path2
XXXX finding path1
XXXX finding path2
XXXX finding path1
XXXX finding path2
exp_valid called with expression =
          Let  _1116 : Unknown = 
*                SUM_SWITCH(eqargpair_2_1106: type_1100, 
*                     eqarg2_1014, 
*                     0: Unknown:: Let  type_1110 = type_1091.2
*                                       type_1111 = SUM_0(0,1)(type_1110)
*                                       _1112 : Unknown = project_known0[type_1111](eqarg1_1013)
*                                       _1113 : Unknown = project_known0[type_1111](eqarg2_1014)
*                                       _1114 : Unknown = record(1>_1112, 2>_1113)
*                                       _1115 : Unknown = App_Open(vars_eq_1_1005;  ; _1114;  )
*                                  In   _1115
*                                  End
*                     DEFAULT = false_1098) : type_1088
*         In   _1116
*         End

bnd_valid called with bnd =
          _1116 : Unknown = 
*           SUM_SWITCH(eqargpair_2_1106: type_1100, 
*                eqarg2_1014, 
*                0: Unknown:: Let  type_1110 = type_1091.2
*                                  type_1111 = SUM_0(0,1)(type_1110)
*                                  _1112 : Unknown = project_known0[type_1111](eqarg1_1013)
*                                  _1113 : Unknown = project_known0[type_1111](eqarg2_1014)
*                                  _1114 : Unknown = record(1>_1112, 2>_1113)
*                                  _1115 : Unknown = App_Open(vars_eq_1_1005;  ; _1114;  )
*                             In   _1115
*                             End
*                DEFAULT = false_1098) : type_1088

exp_valid called with expression =
          SUM_SWITCH(eqargpair_2_1106: type_1100, 
*              eqarg2_1014, 
*              0: Unknown:: Let  type_1110 = type_1091.2
*                                type_1111 = SUM_0(0,1)(type_1110)
*                                _1112 : Unknown = project_known0[type_1111](eqarg1_1013)
*                                _1113 : Unknown = project_known0[type_1111](eqarg2_1014)
*                                _1114 : Unknown = record(1>_1112, 2>_1113)
*                                _1115 : Unknown = App_Open(vars_eq_1_1005;  ; _1114;  )
*                           In   _1115
*                           End
*              DEFAULT = false_1098) : type_1088

exp_valid called with expression =
eqargpair_2_1106

exp_valid returned
XXXX finding path1
XXXX finding path2
XXXX finding path1
XXXX finding path2
XXXX finding path1
XXXX finding path2
exp_valid called with expression =
          Let  type_1110 = type_1091.2
*              type_1111 = SUM_0(0,1)(type_1110)
*              _1112 : Unknown = project_known0[type_1111](eqarg1_1013)
*              _1113 : Unknown = project_known0[type_1111](eqarg2_1014)
*              _1114 : Unknown = record(1>_1112, 2>_1113)
*              _1115 : Unknown = App_Open(vars_eq_1_1005;  ; _1114;  )
*         In   _1115
*         End

bnd_valid called with bnd =
type_1110 = type_1091.2

con_valid called with constructor =
type_1091.2

con_valid called with constructor =
type_1091

con_valid returned
con_valid returned
bnd_valid returned
bnd_valid called with bnd =
type_1111 = SUM_0(0,1)(type_1110)

con_valid called with constructor =
SUM_0(0,1)(type_1110)

con_valid returned
bnd_valid returned
bnd_valid called with bnd =
_1112 : Unknown = project_known0[type_1111](eqarg1_1013)

exp_valid called with expression =
project_known0[type_1111](eqarg1_1013)

XXXX exp_analyze 2 -----------------------------
XXXX exp_analyze 2 context = 
 Constructor variables, kinds, and equations are :
type_1111 = SUM_0(0,1)(type_1110)::SINGLE_TYPE(SUM_0(0,1)(type_1110))
type_1110 = type_1091.2::SINGLE_TYPE(type_1091.2)
type_1104 = PROJ(MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001))),1)::SINGLE_TYPE(type_1091.1)
type_1101 = PROJ(MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001))),1)::SINGLE_TYPE(type_1091.1)
type_1100 = SUM(0,1)(type_1099)::SINGLE_TYPE(SUM(0,1)(type_1099))
type_1099 = PROJ(MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001))),2)::SINGLE_TYPE(type_1091.2)
type_1096 = SUM(2,2)(type_1095)::SINGLE_TYPE(SUM(2,2)(type_1095))
type_1095 = CREC{}::REC_K{}
type_1094 = PROJ(MU_NR((_999=SUM(2,2)(CREC{}))),1)::SINGLE_TYPE(type_1093.1)
type_1093 = MU_NR((_999=SUM(2,2)(CREC{})))::REC_K{1 > _1221 :  SINGLE_TYPE(PROJ(MU_NR((_999=SUM(2,2)(CREC{}))),1))}
type_1091 = MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001)))::          REC_K{1 > vdt_bar_1219 : 
*               SINGLE_TYPE(PROJ(MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001))),1)),
*               2 > vdt_foo_1220 : 
*               SINGLE_TYPE(PROJ(MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001))),2))}
type_1088 = PROJ(MU_NR((_997=SUM(2,2)(CREC{}))),1)::SINGLE_TYPE(type_1087.1)
type_1087 = MU_NR((_997=SUM(2,2)(CREC{})))::REC_K{1 > _1218 :  SINGLE_TYPE(PROJ(MU_NR((_997=SUM(2,2)(CREC{}))),1))}
mpoly_var_c_994::REC_K{'a > 'a_996 :  TYPE}
_1058 =           LET  _1058 =  FUN('a_1057 ::  TYPE) = SUM(0,1)(APP(_1050,('a_1057)))
*         IN   _1058
*         END::Arrow_k(Open; 'a_1057 : TYPE; SINGLE_TYPE(SUM(0,1)(APP(_1050,('a_1057)))))
_1055 =           LET  _1055 =  FUN('a_1052 ::  TYPE) = SUM(0,1)(APP(_1047,('a_1052)))
*         IN   _1055
*         END::Arrow_k(Open; 'a_1052 : TYPE; SINGLE_TYPE(SUM(0,1)(APP(_1047,('a_1052)))))
_1050 =           LET  _1050 =  FUN('a_1049 ::  TYPE) = APP(_1041,('a_1049))
*         IN   _1050
*         END::Arrow_k(Open; 'a_1049 : TYPE; SINGLE_TYPE(APP(_1041,('a_1049))))
_1047 =           LET  _1047 =  FUN('a_1046 ::  TYPE) = APP(_1044,('a_1046))
*         IN   _1047
*         END::Arrow_k(Open; 'a_1046 : TYPE; SINGLE_TYPE(APP(_1044,('a_1046))))
_1044 =           LET  _1044 =  FUN('a_1043 ::  TYPE) = PROJ(APP(_990,('a_1043)),2)
*         IN   _1044
*         END::Arrow_k(Open; 'a_1043 : TYPE; SINGLE_TYPE(PROJ(APP(_990,('a_1043)),2)))
_1041 =           LET  _1041 =  FUN('a_1040 ::  TYPE) = PROJ(APP(_990,('a_1040)),1)
*         IN   _1041
*         END::Arrow_k(Open; 'a_1040 : TYPE; SINGLE_TYPE(PROJ(APP(_990,('a_1040)),1)))
_990 =           LET  _990 =  FUN('a_987 ::  TYPE) = MU((vdt_bar_988=SUM(0,1)(vdt_foo_989), vdt_foo_989=SUM(0,1)(vdt_bar_988)))
*         IN   _990
*         END::          Arrow_k(Open; 'a_987 : TYPE; REC_K{1 > vdt_bar_1206 : 
*                                            SINGLE_TYPE(PROJ(MU((vdt_bar_988=SUM(0,1)(vdt_foo_989),
*                                                                 vdt_foo_989=SUM(0,1)(vdt_bar_988))),1)),
*                                            2 > vdt_foo_1207 : 
*                                            SINGLE_TYPE(PROJ(MU((vdt_bar_988=SUM(0,1)(vdt_foo_989),
*                                                                 vdt_foo_989=SUM(0,1)(vdt_bar_988))),2))})

 Expression variables and constructors are :
_bar_foo_eq_r_993:          ALLARROW(Open; TOTAL; (mpoly_var_c_994 :: REC_K{'a > 'a_996 :  TYPE}); 
*            (DEP_RECORD[ ]); 0; 
*            LET  type_1150 = ALLARROW(Open; PARTIAL; (); 
*                                (LET  type_1140 = MU((vdt_bar_1036=SUM(0,1)(vdt_foo_1037), vdt_foo_1037=SUM(0,1)(vdt_bar_1036)))
*                                      type_1141 = type_1140.1
*                                      type_1144 = MU((vdt_bar_1034=SUM(0,1)(vdt_foo_1035), vdt_foo_1035=SUM(0,1)(vdt_bar_1034)))
*                                      type_1145 = type_1144.1
*                                      type_1146 = RECORD[1, 2](type_1141, type_1145)
*                                 IN   type_1146
*                                 END); 0; 
*                                LET  type_1148 = MU_NR((_1038=SUM(2,2)(CREC{})))
*                                     type_1149 = type_1148.1
*                                IN   type_1149
*                                END)
*                 type_1163 = ALLARROW(Open; PARTIAL; (); 
*                                (LET  type_1153 = MU((vdt_bar_1031=SUM(0,1)(vdt_foo_1032), vdt_foo_1032=SUM(0,1)(vdt_bar_1031)))
*                                      type_1154 = type_1153.2
*                                      type_1157 = MU((vdt_bar_1029=SUM(0,1)(vdt_foo_1030), vdt_foo_1030=SUM(0,1)(vdt_bar_1029)))
*                                      type_1158 = type_1157.2
*                                      type_1159 = RECORD[1, 2](type_1154, type_1158)
*                                 IN   type_1159
*                                 END); 0; 
*                                LET  type_1161 = MU_NR((_1033=SUM(2,2)(CREC{})))
*                                     type_1162 = type_1161.1
*                                IN   type_1162
*                                END)
*                 type_1164 = RECORD[1, 2](type_1150, type_1163)
*            IN   type_1164
*            END)
mpoly_var_r_995:DEP_RECORD[ ]
vars_eq_0_1004:ALLARROW(Open; TOTAL; (); (RECORD[1, 2](type_1091.1, type_1091.1)); 0; type_1088)
vars_eq_1_1005:ALLARROW(Open; TOTAL; (); (RECORD[1, 2](type_1091.2, type_1091.2)); 0; type_1088)
arg_pair_1006:RECORD[1, 2](type_1091.1, type_1091.1)
eqarg1_1013:SUM_0(0,1)(type_1099)
eqarg2_1014:SUM_0(0,1)(type_1099)
_1097:SUM_0(2,2)(type_1095)
false_1098:type_1094
arg_pair_1_1102:type_1091.1
eqargpair_1_1103:          LET  mu_bnd_1223 = MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001)))
*              vdt_bar_1001 = mu_bnd_1223.1
*              vdt_foo_1002 = mu_bnd_1223.2
*         IN   SUM(0,1)(vdt_foo_1002)
*         END
arg_pair_2_1105:type_1091.1
eqargpair_2_1106:          LET  mu_bnd_1224 = MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001)))
*              vdt_bar_1001 = mu_bnd_1224.1
*              vdt_foo_1002 = mu_bnd_1224.2
*         IN   SUM(0,1)(vdt_foo_1002)
*         END

XXXX exp_analyze 2 exp = eqarg1_1013
XXXX exp_analyze 2 con = SUM_0(0,1)(type_1110)
exp_valid called with expression =
eqarg1_1013

exp_valid returned
XXXX exp_analyze 2 con' = SUM_0(0,1)(type_1099)
XXXX exp_analyze 2 -----------------------------
XXXX finding path1
XXXX finding path2
XXXX finding path1
XXXX finding path2
XXXX finding path1
XXXX finding path2
exp_valid returned
bnd_valid returned
bnd_valid called with bnd =
_1113 : Unknown = project_known0[type_1111](eqarg2_1014)

exp_valid called with expression =
project_known0[type_1111](eqarg2_1014)

XXXX exp_analyze 3 -----------------------------
XXXX exp_analyze 3 context = 
 Constructor variables, kinds, and equations are :
type_1111 = SUM_0(0,1)(type_1110)::SINGLE_TYPE(SUM_0(0,1)(type_1110))
type_1110 = PROJ(MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001))),2)::SINGLE_TYPE(type_1091.2)
type_1104 = PROJ(MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001))),1)::SINGLE_TYPE(type_1091.1)
type_1101 = PROJ(MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001))),1)::SINGLE_TYPE(type_1091.1)
type_1100 = SUM(0,1)(type_1099)::SINGLE_TYPE(SUM(0,1)(type_1099))
type_1099 = PROJ(MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001))),2)::SINGLE_TYPE(type_1091.2)
type_1096 = SUM(2,2)(type_1095)::SINGLE_TYPE(SUM(2,2)(type_1095))
type_1095 = CREC{}::REC_K{}
type_1094 = PROJ(MU_NR((_999=SUM(2,2)(CREC{}))),1)::SINGLE_TYPE(type_1093.1)
type_1093 = MU_NR((_999=SUM(2,2)(CREC{})))::REC_K{1 > _1221 :  SINGLE_TYPE(PROJ(MU_NR((_999=SUM(2,2)(CREC{}))),1))}
type_1091 = MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001)))::          REC_K{1 > vdt_bar_1219 : 
*               SINGLE_TYPE(PROJ(MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001))),1)),
*               2 > vdt_foo_1220 : 
*               SINGLE_TYPE(PROJ(MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001))),2))}
type_1088 = PROJ(MU_NR((_997=SUM(2,2)(CREC{}))),1)::SINGLE_TYPE(type_1087.1)
type_1087 = MU_NR((_997=SUM(2,2)(CREC{})))::REC_K{1 > _1218 :  SINGLE_TYPE(PROJ(MU_NR((_997=SUM(2,2)(CREC{}))),1))}
mpoly_var_c_994::REC_K{'a > 'a_996 :  TYPE}
_1058 =           LET  _1058 =  FUN('a_1057 ::  TYPE) = SUM(0,1)(APP(_1050,('a_1057)))
*         IN   _1058
*         END::Arrow_k(Open; 'a_1057 : TYPE; SINGLE_TYPE(SUM(0,1)(APP(_1050,('a_1057)))))
_1055 =           LET  _1055 =  FUN('a_1052 ::  TYPE) = SUM(0,1)(APP(_1047,('a_1052)))
*         IN   _1055
*         END::Arrow_k(Open; 'a_1052 : TYPE; SINGLE_TYPE(SUM(0,1)(APP(_1047,('a_1052)))))
_1050 =           LET  _1050 =  FUN('a_1049 ::  TYPE) = APP(_1041,('a_1049))
*         IN   _1050
*         END::Arrow_k(Open; 'a_1049 : TYPE; SINGLE_TYPE(APP(_1041,('a_1049))))
_1047 =           LET  _1047 =  FUN('a_1046 ::  TYPE) = APP(_1044,('a_1046))
*         IN   _1047
*         END::Arrow_k(Open; 'a_1046 : TYPE; SINGLE_TYPE(APP(_1044,('a_1046))))
_1044 =           LET  _1044 =  FUN('a_1043 ::  TYPE) = PROJ(APP(_990,('a_1043)),2)
*         IN   _1044
*         END::Arrow_k(Open; 'a_1043 : TYPE; SINGLE_TYPE(PROJ(APP(_990,('a_1043)),2)))
_1041 =           LET  _1041 =  FUN('a_1040 ::  TYPE) = PROJ(APP(_990,('a_1040)),1)
*         IN   _1041
*         END::Arrow_k(Open; 'a_1040 : TYPE; SINGLE_TYPE(PROJ(APP(_990,('a_1040)),1)))
_990 =           LET  _990 =  FUN('a_987 ::  TYPE) = MU((vdt_bar_988=SUM(0,1)(vdt_foo_989), vdt_foo_989=SUM(0,1)(vdt_bar_988)))
*         IN   _990
*         END::          Arrow_k(Open; 'a_987 : TYPE; REC_K{1 > vdt_bar_1206 : 
*                                            SINGLE_TYPE(PROJ(MU((vdt_bar_988=SUM(0,1)(vdt_foo_989),
*                                                                 vdt_foo_989=SUM(0,1)(vdt_bar_988))),1)),
*                                            2 > vdt_foo_1207 : 
*                                            SINGLE_TYPE(PROJ(MU((vdt_bar_988=SUM(0,1)(vdt_foo_989),
*                                                                 vdt_foo_989=SUM(0,1)(vdt_bar_988))),2))})

 Expression variables and constructors are :
_bar_foo_eq_r_993:          ALLARROW(Open; TOTAL; (mpoly_var_c_994 :: REC_K{'a > 'a_996 :  TYPE}); 
*            (DEP_RECORD[ ]); 0; 
*            LET  type_1150 = ALLARROW(Open; PARTIAL; (); 
*                                (LET  type_1140 = MU((vdt_bar_1036=SUM(0,1)(vdt_foo_1037), vdt_foo_1037=SUM(0,1)(vdt_bar_1036)))
*                                      type_1141 = type_1140.1
*                                      type_1144 = MU((vdt_bar_1034=SUM(0,1)(vdt_foo_1035), vdt_foo_1035=SUM(0,1)(vdt_bar_1034)))
*                                      type_1145 = type_1144.1
*                                      type_1146 = RECORD[1, 2](type_1141, type_1145)
*                                 IN   type_1146
*                                 END); 0; 
*                                LET  type_1148 = MU_NR((_1038=SUM(2,2)(CREC{})))
*                                     type_1149 = type_1148.1
*                                IN   type_1149
*                                END)
*                 type_1163 = ALLARROW(Open; PARTIAL; (); 
*                                (LET  type_1153 = MU((vdt_bar_1031=SUM(0,1)(vdt_foo_1032), vdt_foo_1032=SUM(0,1)(vdt_bar_1031)))
*                                      type_1154 = type_1153.2
*                                      type_1157 = MU((vdt_bar_1029=SUM(0,1)(vdt_foo_1030), vdt_foo_1030=SUM(0,1)(vdt_bar_1029)))
*                                      type_1158 = type_1157.2
*                                      type_1159 = RECORD[1, 2](type_1154, type_1158)
*                                 IN   type_1159
*                                 END); 0; 
*                                LET  type_1161 = MU_NR((_1033=SUM(2,2)(CREC{})))
*                                     type_1162 = type_1161.1
*                                IN   type_1162
*                                END)
*                 type_1164 = RECORD[1, 2](type_1150, type_1163)
*            IN   type_1164
*            END)
mpoly_var_r_995:DEP_RECORD[ ]
vars_eq_0_1004:ALLARROW(Open; TOTAL; (); (RECORD[1, 2](type_1091.1, type_1091.1)); 0; type_1088)
vars_eq_1_1005:ALLARROW(Open; TOTAL; (); (RECORD[1, 2](type_1091.2, type_1091.2)); 0; type_1088)
arg_pair_1006:RECORD[1, 2](type_1091.1, type_1091.1)
eqarg1_1013:SUM_0(0,1)(type_1099)
eqarg2_1014:SUM_0(0,1)(type_1099)
_1097:SUM_0(2,2)(type_1095)
false_1098:type_1094
arg_pair_1_1102:type_1091.1
eqargpair_1_1103:          LET  mu_bnd_1223 = MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001)))
*              vdt_bar_1001 = mu_bnd_1223.1
*              vdt_foo_1002 = mu_bnd_1223.2
*         IN   SUM(0,1)(vdt_foo_1002)
*         END
arg_pair_2_1105:type_1091.1
eqargpair_2_1106:          LET  mu_bnd_1224 = MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001)))
*              vdt_bar_1001 = mu_bnd_1224.1
*              vdt_foo_1002 = mu_bnd_1224.2
*         IN   SUM(0,1)(vdt_foo_1002)
*         END
_1112:type_1110

XXXX exp_analyze 3 exp = eqarg2_1014
XXXX exp_analyze 3 con = SUM_0(0,1)(type_1110)
exp_valid called with expression =
eqarg2_1014

exp_valid returned
XXXX exp_analyze 3 con' = SUM_0(0,1)(type_1099)
XXXX exp_analyze 3 -----------------------------
XXXX finding path1
XXXX finding path2
XXXX finding path1
XXXX finding path2
XXXX finding path1
XXXX finding path2
exp_valid returned
bnd_valid returned
bnd_valid called with bnd =
_1114 : Unknown = record(1>_1112, 2>_1113)

exp_valid called with expression =
record(1>_1112, 2>_1113)

exp_valid called with expression =
_1112

exp_valid returned
exp_valid called with expression =
_1113

exp_valid returned
exp_valid returned
bnd_valid returned
bnd_valid called with bnd =
_1115 : Unknown = App_Open(vars_eq_1_1005;  ; _1114;  )

exp_valid called with expression =
App_Open(vars_eq_1_1005;  ; _1114;  )

exp_valid called with expression =
vars_eq_1_1005

exp_valid returned
XXXX exp_analyze 4 -----------------------------
XXXX exp_analyze 4 context = 
 Constructor variables, kinds, and equations are :
type_1111 = SUM_0(0,1)(type_1110)::SINGLE_TYPE(SUM_0(0,1)(type_1110))
type_1110 = PROJ(MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001))),2)::SINGLE_TYPE(type_1091.2)
type_1104 = PROJ(MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001))),1)::SINGLE_TYPE(type_1091.1)
type_1101 = PROJ(MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001))),1)::SINGLE_TYPE(type_1091.1)
type_1100 = SUM(0,1)(type_1099)::SINGLE_TYPE(SUM(0,1)(type_1099))
type_1099 = PROJ(MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001))),2)::SINGLE_TYPE(type_1091.2)
type_1096 = SUM(2,2)(type_1095)::SINGLE_TYPE(SUM(2,2)(type_1095))
type_1095 = CREC{}::REC_K{}
type_1094 = PROJ(MU_NR((_999=SUM(2,2)(CREC{}))),1)::SINGLE_TYPE(type_1093.1)
type_1093 = MU_NR((_999=SUM(2,2)(CREC{})))::REC_K{1 > _1221 :  SINGLE_TYPE(PROJ(MU_NR((_999=SUM(2,2)(CREC{}))),1))}
type_1091 = MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001)))::          REC_K{1 > vdt_bar_1219 : 
*               SINGLE_TYPE(PROJ(MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001))),1)),
*               2 > vdt_foo_1220 : 
*               SINGLE_TYPE(PROJ(MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001))),2))}
type_1088 = PROJ(MU_NR((_997=SUM(2,2)(CREC{}))),1)::SINGLE_TYPE(type_1087.1)
type_1087 = MU_NR((_997=SUM(2,2)(CREC{})))::REC_K{1 > _1218 :  SINGLE_TYPE(PROJ(MU_NR((_997=SUM(2,2)(CREC{}))),1))}
mpoly_var_c_994::REC_K{'a > 'a_996 :  TYPE}
_1058 =           LET  _1058 =  FUN('a_1057 ::  TYPE) = SUM(0,1)(APP(_1050,('a_1057)))
*         IN   _1058
*         END::Arrow_k(Open; 'a_1057 : TYPE; SINGLE_TYPE(SUM(0,1)(APP(_1050,('a_1057)))))
_1055 =           LET  _1055 =  FUN('a_1052 ::  TYPE) = SUM(0,1)(APP(_1047,('a_1052)))
*         IN   _1055
*         END::Arrow_k(Open; 'a_1052 : TYPE; SINGLE_TYPE(SUM(0,1)(APP(_1047,('a_1052)))))
_1050 =           LET  _1050 =  FUN('a_1049 ::  TYPE) = APP(_1041,('a_1049))
*         IN   _1050
*         END::Arrow_k(Open; 'a_1049 : TYPE; SINGLE_TYPE(APP(_1041,('a_1049))))
_1047 =           LET  _1047 =  FUN('a_1046 ::  TYPE) = APP(_1044,('a_1046))
*         IN   _1047
*         END::Arrow_k(Open; 'a_1046 : TYPE; SINGLE_TYPE(APP(_1044,('a_1046))))
_1044 =           LET  _1044 =  FUN('a_1043 ::  TYPE) = PROJ(APP(_990,('a_1043)),2)
*         IN   _1044
*         END::Arrow_k(Open; 'a_1043 : TYPE; SINGLE_TYPE(PROJ(APP(_990,('a_1043)),2)))
_1041 =           LET  _1041 =  FUN('a_1040 ::  TYPE) = PROJ(APP(_990,('a_1040)),1)
*         IN   _1041
*         END::Arrow_k(Open; 'a_1040 : TYPE; SINGLE_TYPE(PROJ(APP(_990,('a_1040)),1)))
_990 =           LET  _990 =  FUN('a_987 ::  TYPE) = MU((vdt_bar_988=SUM(0,1)(vdt_foo_989), vdt_foo_989=SUM(0,1)(vdt_bar_988)))
*         IN   _990
*         END::          Arrow_k(Open; 'a_987 : TYPE; REC_K{1 > vdt_bar_1206 : 
*                                            SINGLE_TYPE(PROJ(MU((vdt_bar_988=SUM(0,1)(vdt_foo_989),
*                                                                 vdt_foo_989=SUM(0,1)(vdt_bar_988))),1)),
*                                            2 > vdt_foo_1207 : 
*                                            SINGLE_TYPE(PROJ(MU((vdt_bar_988=SUM(0,1)(vdt_foo_989),
*                                                                 vdt_foo_989=SUM(0,1)(vdt_bar_988))),2))})

 Expression variables and constructors are :
_bar_foo_eq_r_993:          ALLARROW(Open; TOTAL; (mpoly_var_c_994 :: REC_K{'a > 'a_996 :  TYPE}); 
*            (DEP_RECORD[ ]); 0; 
*            LET  type_1150 = ALLARROW(Open; PARTIAL; (); 
*                                (LET  type_1140 = MU((vdt_bar_1036=SUM(0,1)(vdt_foo_1037), vdt_foo_1037=SUM(0,1)(vdt_bar_1036)))
*                                      type_1141 = type_1140.1
*                                      type_1144 = MU((vdt_bar_1034=SUM(0,1)(vdt_foo_1035), vdt_foo_1035=SUM(0,1)(vdt_bar_1034)))
*                                      type_1145 = type_1144.1
*                                      type_1146 = RECORD[1, 2](type_1141, type_1145)
*                                 IN   type_1146
*                                 END); 0; 
*                                LET  type_1148 = MU_NR((_1038=SUM(2,2)(CREC{})))
*                                     type_1149 = type_1148.1
*                                IN   type_1149
*                                END)
*                 type_1163 = ALLARROW(Open; PARTIAL; (); 
*                                (LET  type_1153 = MU((vdt_bar_1031=SUM(0,1)(vdt_foo_1032), vdt_foo_1032=SUM(0,1)(vdt_bar_1031)))
*                                      type_1154 = type_1153.2
*                                      type_1157 = MU((vdt_bar_1029=SUM(0,1)(vdt_foo_1030), vdt_foo_1030=SUM(0,1)(vdt_bar_1029)))
*                                      type_1158 = type_1157.2
*                                      type_1159 = RECORD[1, 2](type_1154, type_1158)
*                                 IN   type_1159
*                                 END); 0; 
*                                LET  type_1161 = MU_NR((_1033=SUM(2,2)(CREC{})))
*                                     type_1162 = type_1161.1
*                                IN   type_1162
*                                END)
*                 type_1164 = RECORD[1, 2](type_1150, type_1163)
*            IN   type_1164
*            END)
mpoly_var_r_995:DEP_RECORD[ ]
vars_eq_0_1004:ALLARROW(Open; TOTAL; (); (RECORD[1, 2](type_1091.1, type_1091.1)); 0; type_1088)
vars_eq_1_1005:ALLARROW(Open; TOTAL; (); (RECORD[1, 2](type_1091.2, type_1091.2)); 0; type_1088)
arg_pair_1006:RECORD[1, 2](type_1091.1, type_1091.1)
eqarg1_1013:SUM_0(0,1)(type_1099)
eqarg2_1014:SUM_0(0,1)(type_1099)
_1097:SUM_0(2,2)(type_1095)
false_1098:type_1094
arg_pair_1_1102:type_1091.1
eqargpair_1_1103:          LET  mu_bnd_1223 = MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001)))
*              vdt_bar_1001 = mu_bnd_1223.1
*              vdt_foo_1002 = mu_bnd_1223.2
*         IN   SUM(0,1)(vdt_foo_1002)
*         END
arg_pair_2_1105:type_1091.1
eqargpair_2_1106:          LET  mu_bnd_1224 = MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001)))
*              vdt_bar_1001 = mu_bnd_1224.1
*              vdt_foo_1002 = mu_bnd_1224.2
*         IN   SUM(0,1)(vdt_foo_1002)
*         END
_1112:type_1110
_1113:type_1110
_1114:RECORD[1, 2](type_1110, type_1110)

XXXX exp_analyze 4 exp = _1114
XXXX exp_analyze 4 con = RECORD[1, 2](type_1091.2, type_1091.2)
exp_valid called with expression =
_1114

exp_valid returned
XXXX exp_analyze 4 con' = RECORD[1, 2](type_1110, type_1110)
XXXX exp_analyze 4 -----------------------------
XXXX finding path1
XXXX finding path2
exp_valid returned
bnd_valid returned
exp_valid called with expression =
_1115

exp_valid returned
exp_valid returned
XXXX finding path1
XXXX finding path2
XXXX finding path1
XXXX exp_analyze 5 -----------------------------
XXXX exp_analyze 5 context = 
 Constructor variables, kinds, and equations are :
type_1104 = PROJ(MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001))),1)::SINGLE_TYPE(type_1091.1)
type_1101 = PROJ(MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001))),1)::SINGLE_TYPE(type_1091.1)
type_1100 = SUM(0,1)(type_1099)::SINGLE_TYPE(SUM(0,1)(type_1099))
type_1099 = PROJ(MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001))),2)::SINGLE_TYPE(type_1091.2)
type_1096 = SUM(2,2)(type_1095)::SINGLE_TYPE(SUM(2,2)(type_1095))
type_1095 = CREC{}::REC_K{}
type_1094 = PROJ(MU_NR((_999=SUM(2,2)(CREC{}))),1)::SINGLE_TYPE(type_1093.1)
type_1093 = MU_NR((_999=SUM(2,2)(CREC{})))::REC_K{1 > _1221 :  SINGLE_TYPE(PROJ(MU_NR((_999=SUM(2,2)(CREC{}))),1))}
type_1091 = MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001)))::          REC_K{1 > vdt_bar_1219 : 
*               SINGLE_TYPE(PROJ(MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001))),1)),
*               2 > vdt_foo_1220 : 
*               SINGLE_TYPE(PROJ(MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001))),2))}
type_1088 = PROJ(MU_NR((_997=SUM(2,2)(CREC{}))),1)::SINGLE_TYPE(type_1087.1)
type_1087 = MU_NR((_997=SUM(2,2)(CREC{})))::REC_K{1 > _1218 :  SINGLE_TYPE(PROJ(MU_NR((_997=SUM(2,2)(CREC{}))),1))}
mpoly_var_c_994::REC_K{'a > 'a_996 :  TYPE}
_1058 =           LET  _1058 =  FUN('a_1057 ::  TYPE) = SUM(0,1)(APP(_1050,('a_1057)))
*         IN   _1058
*         END::Arrow_k(Open; 'a_1057 : TYPE; SINGLE_TYPE(SUM(0,1)(APP(_1050,('a_1057)))))
_1055 =           LET  _1055 =  FUN('a_1052 ::  TYPE) = SUM(0,1)(APP(_1047,('a_1052)))
*         IN   _1055
*         END::Arrow_k(Open; 'a_1052 : TYPE; SINGLE_TYPE(SUM(0,1)(APP(_1047,('a_1052)))))
_1050 =           LET  _1050 =  FUN('a_1049 ::  TYPE) = APP(_1041,('a_1049))
*         IN   _1050
*         END::Arrow_k(Open; 'a_1049 : TYPE; SINGLE_TYPE(APP(_1041,('a_1049))))
_1047 =           LET  _1047 =  FUN('a_1046 ::  TYPE) = APP(_1044,('a_1046))
*         IN   _1047
*         END::Arrow_k(Open; 'a_1046 : TYPE; SINGLE_TYPE(APP(_1044,('a_1046))))
_1044 =           LET  _1044 =  FUN('a_1043 ::  TYPE) = PROJ(APP(_990,('a_1043)),2)
*         IN   _1044
*         END::Arrow_k(Open; 'a_1043 : TYPE; SINGLE_TYPE(PROJ(APP(_990,('a_1043)),2)))
_1041 =           LET  _1041 =  FUN('a_1040 ::  TYPE) = PROJ(APP(_990,('a_1040)),1)
*         IN   _1041
*         END::Arrow_k(Open; 'a_1040 : TYPE; SINGLE_TYPE(PROJ(APP(_990,('a_1040)),1)))
_990 =           LET  _990 =  FUN('a_987 ::  TYPE) = MU((vdt_bar_988=SUM(0,1)(vdt_foo_989), vdt_foo_989=SUM(0,1)(vdt_bar_988)))
*         IN   _990
*         END::          Arrow_k(Open; 'a_987 : TYPE; REC_K{1 > vdt_bar_1206 : 
*                                            SINGLE_TYPE(PROJ(MU((vdt_bar_988=SUM(0,1)(vdt_foo_989),
*                                                                 vdt_foo_989=SUM(0,1)(vdt_bar_988))),1)),
*                                            2 > vdt_foo_1207 : 
*                                            SINGLE_TYPE(PROJ(MU((vdt_bar_988=SUM(0,1)(vdt_foo_989),
*                                                                 vdt_foo_989=SUM(0,1)(vdt_bar_988))),2))})

 Expression variables and constructors are :
_bar_foo_eq_r_993:          ALLARROW(Open; TOTAL; (mpoly_var_c_994 :: REC_K{'a > 'a_996 :  TYPE}); 
*            (DEP_RECORD[ ]); 0; 
*            LET  type_1150 = ALLARROW(Open; PARTIAL; (); 
*                                (LET  type_1140 = MU((vdt_bar_1036=SUM(0,1)(vdt_foo_1037), vdt_foo_1037=SUM(0,1)(vdt_bar_1036)))
*                                      type_1141 = type_1140.1
*                                      type_1144 = MU((vdt_bar_1034=SUM(0,1)(vdt_foo_1035), vdt_foo_1035=SUM(0,1)(vdt_bar_1034)))
*                                      type_1145 = type_1144.1
*                                      type_1146 = RECORD[1, 2](type_1141, type_1145)
*                                 IN   type_1146
*                                 END); 0; 
*                                LET  type_1148 = MU_NR((_1038=SUM(2,2)(CREC{})))
*                                     type_1149 = type_1148.1
*                                IN   type_1149
*                                END)
*                 type_1163 = ALLARROW(Open; PARTIAL; (); 
*                                (LET  type_1153 = MU((vdt_bar_1031=SUM(0,1)(vdt_foo_1032), vdt_foo_1032=SUM(0,1)(vdt_bar_1031)))
*                                      type_1154 = type_1153.2
*                                      type_1157 = MU((vdt_bar_1029=SUM(0,1)(vdt_foo_1030), vdt_foo_1030=SUM(0,1)(vdt_bar_1029)))
*                                      type_1158 = type_1157.2
*                                      type_1159 = RECORD[1, 2](type_1154, type_1158)
*                                 IN   type_1159
*                                 END); 0; 
*                                LET  type_1161 = MU_NR((_1033=SUM(2,2)(CREC{})))
*                                     type_1162 = type_1161.1
*                                IN   type_1162
*                                END)
*                 type_1164 = RECORD[1, 2](type_1150, type_1163)
*            IN   type_1164
*            END)
mpoly_var_r_995:DEP_RECORD[ ]
vars_eq_0_1004:ALLARROW(Open; TOTAL; (); (RECORD[1, 2](type_1091.1, type_1091.1)); 0; type_1088)
vars_eq_1_1005:ALLARROW(Open; TOTAL; (); (RECORD[1, 2](type_1091.2, type_1091.2)); 0; type_1088)
arg_pair_1006:RECORD[1, 2](type_1091.1, type_1091.1)
eqarg1_1013:SUM_0(0,1)(type_1099)
_1097:SUM_0(2,2)(type_1095)
false_1098:type_1094
arg_pair_1_1102:type_1091.1
eqargpair_1_1103:          LET  mu_bnd_1223 = MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001)))
*              vdt_bar_1001 = mu_bnd_1223.1
*              vdt_foo_1002 = mu_bnd_1223.2
*         IN   SUM(0,1)(vdt_foo_1002)
*         END
arg_pair_2_1105:type_1091.1
eqargpair_2_1106:          LET  mu_bnd_1224 = MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001)))
*              vdt_bar_1001 = mu_bnd_1224.1
*              vdt_foo_1002 = mu_bnd_1224.2
*         IN   SUM(0,1)(vdt_foo_1002)
*         END

XXXX exp_analyze 5 exp = false_1098
XXXX exp_analyze 5 con = PROJ(MU_NR((_997=SUM(2,2)(CREC{}))),1)
exp_valid called with expression =
false_1098

exp_valid returned
XXXX exp_analyze 5 con' = type_1094
XXXX exp_analyze 5 -----------------------------
XXXX finding path1
XXXX finding path2
XXXX finding path1
exp_valid returned
bnd_valid returned
exp_valid called with expression =
_1116

exp_valid returned
exp_valid returned
XXXX finding path1
XXXX finding path2
XXXX finding path1
exp_valid returned
bnd_valid returned
exp_valid called with expression =
_1117

exp_valid returned
exp_valid returned
XXXX exp_analyze 1 con' =           LET  type_1099 = type_1091.2
*              type_1100 = SUM(0,1)(type_1099)
*              type_1101 = type_1091.1
*              type_1104 = type_1091.1
*         IN   type_1088
*         END
XXXX exp_analyze 1 -----------------------------
XXXX finding path1
XXXX finding path2
XXXX exp_analyze 6 -----------------------------
XXXX exp_analyze 6 context = 
 Constructor variables, kinds, and equations are :
type_1096 = SUM(2,2)(type_1095)::SINGLE_TYPE(SUM(2,2)(type_1095))
type_1095 = CREC{}::REC_K{}
type_1094 = PROJ(MU_NR((_999=SUM(2,2)(CREC{}))),1)::SINGLE_TYPE(type_1093.1)
type_1093 = MU_NR((_999=SUM(2,2)(CREC{})))::REC_K{1 > _1221 :  SINGLE_TYPE(PROJ(MU_NR((_999=SUM(2,2)(CREC{}))),1))}
type_1091 = MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001)))::          REC_K{1 > vdt_bar_1219 : 
*               SINGLE_TYPE(PROJ(MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001))),1)),
*               2 > vdt_foo_1220 : 
*               SINGLE_TYPE(PROJ(MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001))),2))}
type_1088 = PROJ(MU_NR((_997=SUM(2,2)(CREC{}))),1)::SINGLE_TYPE(type_1087.1)
type_1087 = MU_NR((_997=SUM(2,2)(CREC{})))::REC_K{1 > _1218 :  SINGLE_TYPE(PROJ(MU_NR((_997=SUM(2,2)(CREC{}))),1))}
mpoly_var_c_994::REC_K{'a > 'a_996 :  TYPE}
_1058 =           LET  _1058 =  FUN('a_1057 ::  TYPE) = SUM(0,1)(APP(_1050,('a_1057)))
*         IN   _1058
*         END::Arrow_k(Open; 'a_1057 : TYPE; SINGLE_TYPE(SUM(0,1)(APP(_1050,('a_1057)))))
_1055 =           LET  _1055 =  FUN('a_1052 ::  TYPE) = SUM(0,1)(APP(_1047,('a_1052)))
*         IN   _1055
*         END::Arrow_k(Open; 'a_1052 : TYPE; SINGLE_TYPE(SUM(0,1)(APP(_1047,('a_1052)))))
_1050 =           LET  _1050 =  FUN('a_1049 ::  TYPE) = APP(_1041,('a_1049))
*         IN   _1050
*         END::Arrow_k(Open; 'a_1049 : TYPE; SINGLE_TYPE(APP(_1041,('a_1049))))
_1047 =           LET  _1047 =  FUN('a_1046 ::  TYPE) = APP(_1044,('a_1046))
*         IN   _1047
*         END::Arrow_k(Open; 'a_1046 : TYPE; SINGLE_TYPE(APP(_1044,('a_1046))))
_1044 =           LET  _1044 =  FUN('a_1043 ::  TYPE) = PROJ(APP(_990,('a_1043)),2)
*         IN   _1044
*         END::Arrow_k(Open; 'a_1043 : TYPE; SINGLE_TYPE(PROJ(APP(_990,('a_1043)),2)))
_1041 =           LET  _1041 =  FUN('a_1040 ::  TYPE) = PROJ(APP(_990,('a_1040)),1)
*         IN   _1041
*         END::Arrow_k(Open; 'a_1040 : TYPE; SINGLE_TYPE(PROJ(APP(_990,('a_1040)),1)))
_990 =           LET  _990 =  FUN('a_987 ::  TYPE) = MU((vdt_bar_988=SUM(0,1)(vdt_foo_989), vdt_foo_989=SUM(0,1)(vdt_bar_988)))
*         IN   _990
*         END::          Arrow_k(Open; 'a_987 : TYPE; REC_K{1 > vdt_bar_1206 : 
*                                            SINGLE_TYPE(PROJ(MU((vdt_bar_988=SUM(0,1)(vdt_foo_989),
*                                                                 vdt_foo_989=SUM(0,1)(vdt_bar_988))),1)),
*                                            2 > vdt_foo_1207 : 
*                                            SINGLE_TYPE(PROJ(MU((vdt_bar_988=SUM(0,1)(vdt_foo_989),
*                                                                 vdt_foo_989=SUM(0,1)(vdt_bar_988))),2))})

 Expression variables and constructors are :
_bar_foo_eq_r_993:          ALLARROW(Open; TOTAL; (mpoly_var_c_994 :: REC_K{'a > 'a_996 :  TYPE}); 
*            (DEP_RECORD[ ]); 0; 
*            LET  type_1150 = ALLARROW(Open; PARTIAL; (); 
*                                (LET  type_1140 = MU((vdt_bar_1036=SUM(0,1)(vdt_foo_1037), vdt_foo_1037=SUM(0,1)(vdt_bar_1036)))
*                                      type_1141 = type_1140.1
*                                      type_1144 = MU((vdt_bar_1034=SUM(0,1)(vdt_foo_1035), vdt_foo_1035=SUM(0,1)(vdt_bar_1034)))
*                                      type_1145 = type_1144.1
*                                      type_1146 = RECORD[1, 2](type_1141, type_1145)
*                                 IN   type_1146
*                                 END); 0; 
*                                LET  type_1148 = MU_NR((_1038=SUM(2,2)(CREC{})))
*                                     type_1149 = type_1148.1
*                                IN   type_1149
*                                END)
*                 type_1163 = ALLARROW(Open; PARTIAL; (); 
*                                (LET  type_1153 = MU((vdt_bar_1031=SUM(0,1)(vdt_foo_1032), vdt_foo_1032=SUM(0,1)(vdt_bar_1031)))
*                                      type_1154 = type_1153.2
*                                      type_1157 = MU((vdt_bar_1029=SUM(0,1)(vdt_foo_1030), vdt_foo_1030=SUM(0,1)(vdt_bar_1029)))
*                                      type_1158 = type_1157.2
*                                      type_1159 = RECORD[1, 2](type_1154, type_1158)
*                                 IN   type_1159
*                                 END); 0; 
*                                LET  type_1161 = MU_NR((_1033=SUM(2,2)(CREC{})))
*                                     type_1162 = type_1161.1
*                                IN   type_1162
*                                END)
*                 type_1164 = RECORD[1, 2](type_1150, type_1163)
*            IN   type_1164
*            END)
mpoly_var_r_995:DEP_RECORD[ ]
vars_eq_0_1004:ALLARROW(Open; TOTAL; (); (RECORD[1, 2](type_1091.1, type_1091.1)); 0; type_1088)
vars_eq_1_1005:ALLARROW(Open; TOTAL; (); (RECORD[1, 2](type_1091.2, type_1091.2)); 0; type_1088)
arg_pair_1016:RECORD[1, 2](type_1091.2, type_1091.2)
_1097:SUM_0(2,2)(type_1095)
false_1098:type_1094

XXXX exp_analyze 6 exp =           Let  type_1118 = type_1091.1
*              type_1119 = SUM(0,1)(type_1118)
*              type_1120 = type_1091.2
*              arg_pair_1_1121 : Unknown = select[1][](arg_pair_1016)
*              eqargpair_1_1122 : Unknown = unroll[type_1120](arg_pair_1_1121)
*              type_1123 = type_1091.2
*              arg_pair_2_1124 : Unknown = select[2][](arg_pair_1016)
*              eqargpair_2_1125 : Unknown = unroll[type_1123](arg_pair_2_1124)
*              _1136 : Unknown = 
*                SUM_SWITCH(eqargpair_1_1122: type_1119, 
*                     eqarg1_1021, 
*                     0: Unknown:: 
*                       Let  _1135 : Unknown = 
*                              SUM_SWITCH(eqargpair_2_1125: type_1119, 
*                                   eqarg2_1022, 
*                                   0: Unknown:: Let  type_1129 = type_1091.1
*                                                     type_1130 = SUM_0(0,1)(type_1129)
*                                                     _1131 : Unknown = project_known0[type_1130](eqarg1_1021)
*                                                     _1132 : Unknown = project_known0[type_1130](eqarg2_1022)
*                                                     _1133 : Unknown = record(1>_1131, 2>_1132)
*                                                     _1134 : Unknown = App_Open(vars_eq_0_1004;  ; _1133;  )
*                                                In   _1134
*                                                End
*                                   DEFAULT = false_1098) : type_1088
*                       In   _1135
*                       End
*                     NODEFAULT) : type_1088
*         In   _1136
*         End
XXXX exp_analyze 6 con = type_1088
exp_valid called with expression =
          Let  type_1118 = type_1091.1
*              type_1119 = SUM(0,1)(type_1118)
*              type_1120 = type_1091.2
*              arg_pair_1_1121 : Unknown = select[1][](arg_pair_1016)
*              eqargpair_1_1122 : Unknown = unroll[type_1120](arg_pair_1_1121)
*              type_1123 = type_1091.2
*              arg_pair_2_1124 : Unknown = select[2][](arg_pair_1016)
*              eqargpair_2_1125 : Unknown = unroll[type_1123](arg_pair_2_1124)
*              _1136 : Unknown = 
*                SUM_SWITCH(eqargpair_1_1122: type_1119, 
*                     eqarg1_1021, 
*                     0: Unknown:: 
*                       Let  _1135 : Unknown = 
*                              SUM_SWITCH(eqargpair_2_1125: type_1119, 
*                                   eqarg2_1022, 
*                                   0: Unknown:: Let  type_1129 = type_1091.1
*                                                     type_1130 = SUM_0(0,1)(type_1129)
*                                                     _1131 : Unknown = project_known0[type_1130](eqarg1_1021)
*                                                     _1132 : Unknown = project_known0[type_1130](eqarg2_1022)
*                                                     _1133 : Unknown = record(1>_1131, 2>_1132)
*                                                     _1134 : Unknown = App_Open(vars_eq_0_1004;  ; _1133;  )
*                                                In   _1134
*                                                End
*                                   DEFAULT = false_1098) : type_1088
*                       In   _1135
*                       End
*                     NODEFAULT) : type_1088
*         In   _1136
*         End

bnd_valid called with bnd =
type_1118 = type_1091.1

con_valid called with constructor =
type_1091.1

con_valid called with constructor =
type_1091

con_valid returned
con_valid returned
bnd_valid returned
bnd_valid called with bnd =
type_1119 = SUM(0,1)(type_1118)

con_valid called with constructor =
SUM(0,1)(type_1118)

con_valid returned
bnd_valid returned
bnd_valid called with bnd =
type_1120 = type_1091.2

con_valid called with constructor =
type_1091.2

con_valid called with constructor =
type_1091

con_valid returned
con_valid returned
bnd_valid returned
bnd_valid called with bnd =
arg_pair_1_1121 : Unknown = select[1][](arg_pair_1016)

exp_valid called with expression =
select[1][](arg_pair_1016)

exp_valid called with expression =
arg_pair_1016

exp_valid returned
exp_valid returned
bnd_valid returned
bnd_valid called with bnd =
eqargpair_1_1122 : Unknown = unroll[type_1120](arg_pair_1_1121)

exp_valid called with expression =
unroll[type_1120](arg_pair_1_1121)

exp_valid called with expression =
arg_pair_1_1121

exp_valid returned
XXXX finding path1
XXXX finding path2
XXXX finding path1
XXXX finding path2
exp_valid returned
bnd_valid returned
bnd_valid called with bnd =
type_1123 = type_1091.2

con_valid called with constructor =
type_1091.2

con_valid called with constructor =
type_1091

con_valid returned
con_valid returned
bnd_valid returned
bnd_valid called with bnd =
arg_pair_2_1124 : Unknown = select[2][](arg_pair_1016)

exp_valid called with expression =
select[2][](arg_pair_1016)

exp_valid called with expression =
arg_pair_1016

exp_valid returned
exp_valid returned
bnd_valid returned
bnd_valid called with bnd =
eqargpair_2_1125 : Unknown = unroll[type_1123](arg_pair_2_1124)

exp_valid called with expression =
unroll[type_1123](arg_pair_2_1124)

exp_valid called with expression =
arg_pair_2_1124

exp_valid returned
XXXX finding path1
XXXX finding path2
XXXX finding path1
XXXX finding path2
exp_valid returned
bnd_valid returned
bnd_valid called with bnd =
          _1136 : Unknown = 
*           SUM_SWITCH(eqargpair_1_1122: type_1119, 
*                eqarg1_1021, 
*                0: Unknown:: 
*                  Let  _1135 : Unknown = 
*                         SUM_SWITCH(eqargpair_2_1125: type_1119, 
*                              eqarg2_1022, 
*                              0: Unknown:: Let  type_1129 = type_1091.1
*                                                type_1130 = SUM_0(0,1)(type_1129)
*                                                _1131 : Unknown = project_known0[type_1130](eqarg1_1021)
*                                                _1132 : Unknown = project_known0[type_1130](eqarg2_1022)
*                                                _1133 : Unknown = record(1>_1131, 2>_1132)
*                                                _1134 : Unknown = App_Open(vars_eq_0_1004;  ; _1133;  )
*                                           In   _1134
*                                           End
*                              DEFAULT = false_1098) : type_1088
*                  In   _1135
*                  End
*                NODEFAULT) : type_1088

exp_valid called with expression =
          SUM_SWITCH(eqargpair_1_1122: type_1119, 
*              eqarg1_1021, 
*              0: Unknown:: 
*                Let  _1135 : Unknown = 
*                       SUM_SWITCH(eqargpair_2_1125: type_1119, 
*                            eqarg2_1022, 
*                            0: Unknown:: Let  type_1129 = type_1091.1
*                                              type_1130 = SUM_0(0,1)(type_1129)
*                                              _1131 : Unknown = project_known0[type_1130](eqarg1_1021)
*                                              _1132 : Unknown = project_known0[type_1130](eqarg2_1022)
*                                              _1133 : Unknown = record(1>_1131, 2>_1132)
*                                              _1134 : Unknown = App_Open(vars_eq_0_1004;  ; _1133;  )
*                                         In   _1134
*                                         End
*                            DEFAULT = false_1098) : type_1088
*                In   _1135
*                End
*              NODEFAULT) : type_1088

exp_valid called with expression =
eqargpair_1_1122

exp_valid returned
XXXX finding path1
XXXX finding path2
XXXX finding path1
XXXX finding path2
XXXX finding path1
XXXX finding path2
exp_valid called with expression =
          Let  _1135 : Unknown = 
*                SUM_SWITCH(eqargpair_2_1125: type_1119, 
*                     eqarg2_1022, 
*                     0: Unknown:: Let  type_1129 = type_1091.1
*                                       type_1130 = SUM_0(0,1)(type_1129)
*                                       _1131 : Unknown = project_known0[type_1130](eqarg1_1021)
*                                       _1132 : Unknown = project_known0[type_1130](eqarg2_1022)
*                                       _1133 : Unknown = record(1>_1131, 2>_1132)
*                                       _1134 : Unknown = App_Open(vars_eq_0_1004;  ; _1133;  )
*                                  In   _1134
*                                  End
*                     DEFAULT = false_1098) : type_1088
*         In   _1135
*         End

bnd_valid called with bnd =
          _1135 : Unknown = 
*           SUM_SWITCH(eqargpair_2_1125: type_1119, 
*                eqarg2_1022, 
*                0: Unknown:: Let  type_1129 = type_1091.1
*                                  type_1130 = SUM_0(0,1)(type_1129)
*                                  _1131 : Unknown = project_known0[type_1130](eqarg1_1021)
*                                  _1132 : Unknown = project_known0[type_1130](eqarg2_1022)
*                                  _1133 : Unknown = record(1>_1131, 2>_1132)
*                                  _1134 : Unknown = App_Open(vars_eq_0_1004;  ; _1133;  )
*                             In   _1134
*                             End
*                DEFAULT = false_1098) : type_1088

exp_valid called with expression =
          SUM_SWITCH(eqargpair_2_1125: type_1119, 
*              eqarg2_1022, 
*              0: Unknown:: Let  type_1129 = type_1091.1
*                                type_1130 = SUM_0(0,1)(type_1129)
*                                _1131 : Unknown = project_known0[type_1130](eqarg1_1021)
*                                _1132 : Unknown = project_known0[type_1130](eqarg2_1022)
*                                _1133 : Unknown = record(1>_1131, 2>_1132)
*                                _1134 : Unknown = App_Open(vars_eq_0_1004;  ; _1133;  )
*                           In   _1134
*                           End
*              DEFAULT = false_1098) : type_1088

exp_valid called with expression =
eqargpair_2_1125

exp_valid returned
XXXX finding path1
XXXX finding path2
XXXX finding path1
XXXX finding path2
XXXX finding path1
XXXX finding path2
exp_valid called with expression =
          Let  type_1129 = type_1091.1
*              type_1130 = SUM_0(0,1)(type_1129)
*              _1131 : Unknown = project_known0[type_1130](eqarg1_1021)
*              _1132 : Unknown = project_known0[type_1130](eqarg2_1022)
*              _1133 : Unknown = record(1>_1131, 2>_1132)
*              _1134 : Unknown = App_Open(vars_eq_0_1004;  ; _1133;  )
*         In   _1134
*         End

bnd_valid called with bnd =
type_1129 = type_1091.1

con_valid called with constructor =
type_1091.1

con_valid called with constructor =
type_1091

con_valid returned
con_valid returned
bnd_valid returned
bnd_valid called with bnd =
type_1130 = SUM_0(0,1)(type_1129)

con_valid called with constructor =
SUM_0(0,1)(type_1129)

con_valid returned
bnd_valid returned
bnd_valid called with bnd =
_1131 : Unknown = project_known0[type_1130](eqarg1_1021)

exp_valid called with expression =
project_known0[type_1130](eqarg1_1021)

XXXX exp_analyze 7 -----------------------------
XXXX exp_analyze 7 context = 
 Constructor variables, kinds, and equations are :
type_1130 = SUM_0(0,1)(type_1129)::SINGLE_TYPE(SUM_0(0,1)(type_1129))
type_1129 = type_1091.1::SINGLE_TYPE(type_1091.1)
type_1123 = PROJ(MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001))),2)::SINGLE_TYPE(type_1091.2)
type_1120 = PROJ(MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001))),2)::SINGLE_TYPE(type_1091.2)
type_1119 = SUM(0,1)(type_1118)::SINGLE_TYPE(SUM(0,1)(type_1118))
type_1118 = PROJ(MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001))),1)::SINGLE_TYPE(type_1091.1)
type_1096 = SUM(2,2)(type_1095)::SINGLE_TYPE(SUM(2,2)(type_1095))
type_1095 = CREC{}::REC_K{}
type_1094 = PROJ(MU_NR((_999=SUM(2,2)(CREC{}))),1)::SINGLE_TYPE(type_1093.1)
type_1093 = MU_NR((_999=SUM(2,2)(CREC{})))::REC_K{1 > _1221 :  SINGLE_TYPE(PROJ(MU_NR((_999=SUM(2,2)(CREC{}))),1))}
type_1091 = MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001)))::          REC_K{1 > vdt_bar_1219 : 
*               SINGLE_TYPE(PROJ(MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001))),1)),
*               2 > vdt_foo_1220 : 
*               SINGLE_TYPE(PROJ(MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001))),2))}
type_1088 = PROJ(MU_NR((_997=SUM(2,2)(CREC{}))),1)::SINGLE_TYPE(type_1087.1)
type_1087 = MU_NR((_997=SUM(2,2)(CREC{})))::REC_K{1 > _1218 :  SINGLE_TYPE(PROJ(MU_NR((_997=SUM(2,2)(CREC{}))),1))}
mpoly_var_c_994::REC_K{'a > 'a_996 :  TYPE}
_1058 =           LET  _1058 =  FUN('a_1057 ::  TYPE) = SUM(0,1)(APP(_1050,('a_1057)))
*         IN   _1058
*         END::Arrow_k(Open; 'a_1057 : TYPE; SINGLE_TYPE(SUM(0,1)(APP(_1050,('a_1057)))))
_1055 =           LET  _1055 =  FUN('a_1052 ::  TYPE) = SUM(0,1)(APP(_1047,('a_1052)))
*         IN   _1055
*         END::Arrow_k(Open; 'a_1052 : TYPE; SINGLE_TYPE(SUM(0,1)(APP(_1047,('a_1052)))))
_1050 =           LET  _1050 =  FUN('a_1049 ::  TYPE) = APP(_1041,('a_1049))
*         IN   _1050
*         END::Arrow_k(Open; 'a_1049 : TYPE; SINGLE_TYPE(APP(_1041,('a_1049))))
_1047 =           LET  _1047 =  FUN('a_1046 ::  TYPE) = APP(_1044,('a_1046))
*         IN   _1047
*         END::Arrow_k(Open; 'a_1046 : TYPE; SINGLE_TYPE(APP(_1044,('a_1046))))
_1044 =           LET  _1044 =  FUN('a_1043 ::  TYPE) = PROJ(APP(_990,('a_1043)),2)
*         IN   _1044
*         END::Arrow_k(Open; 'a_1043 : TYPE; SINGLE_TYPE(PROJ(APP(_990,('a_1043)),2)))
_1041 =           LET  _1041 =  FUN('a_1040 ::  TYPE) = PROJ(APP(_990,('a_1040)),1)
*         IN   _1041
*         END::Arrow_k(Open; 'a_1040 : TYPE; SINGLE_TYPE(PROJ(APP(_990,('a_1040)),1)))
_990 =           LET  _990 =  FUN('a_987 ::  TYPE) = MU((vdt_bar_988=SUM(0,1)(vdt_foo_989), vdt_foo_989=SUM(0,1)(vdt_bar_988)))
*         IN   _990
*         END::          Arrow_k(Open; 'a_987 : TYPE; REC_K{1 > vdt_bar_1206 : 
*                                            SINGLE_TYPE(PROJ(MU((vdt_bar_988=SUM(0,1)(vdt_foo_989),
*                                                                 vdt_foo_989=SUM(0,1)(vdt_bar_988))),1)),
*                                            2 > vdt_foo_1207 : 
*                                            SINGLE_TYPE(PROJ(MU((vdt_bar_988=SUM(0,1)(vdt_foo_989),
*                                                                 vdt_foo_989=SUM(0,1)(vdt_bar_988))),2))})

 Expression variables and constructors are :
_bar_foo_eq_r_993:          ALLARROW(Open; TOTAL; (mpoly_var_c_994 :: REC_K{'a > 'a_996 :  TYPE}); 
*            (DEP_RECORD[ ]); 0; 
*            LET  type_1150 = ALLARROW(Open; PARTIAL; (); 
*                                (LET  type_1140 = MU((vdt_bar_1036=SUM(0,1)(vdt_foo_1037), vdt_foo_1037=SUM(0,1)(vdt_bar_1036)))
*                                      type_1141 = type_1140.1
*                                      type_1144 = MU((vdt_bar_1034=SUM(0,1)(vdt_foo_1035), vdt_foo_1035=SUM(0,1)(vdt_bar_1034)))
*                                      type_1145 = type_1144.1
*                                      type_1146 = RECORD[1, 2](type_1141, type_1145)
*                                 IN   type_1146
*                                 END); 0; 
*                                LET  type_1148 = MU_NR((_1038=SUM(2,2)(CREC{})))
*                                     type_1149 = type_1148.1
*                                IN   type_1149
*                                END)
*                 type_1163 = ALLARROW(Open; PARTIAL; (); 
*                                (LET  type_1153 = MU((vdt_bar_1031=SUM(0,1)(vdt_foo_1032), vdt_foo_1032=SUM(0,1)(vdt_bar_1031)))
*                                      type_1154 = type_1153.2
*                                      type_1157 = MU((vdt_bar_1029=SUM(0,1)(vdt_foo_1030), vdt_foo_1030=SUM(0,1)(vdt_bar_1029)))
*                                      type_1158 = type_1157.2
*                                      type_1159 = RECORD[1, 2](type_1154, type_1158)
*                                 IN   type_1159
*                                 END); 0; 
*                                LET  type_1161 = MU_NR((_1033=SUM(2,2)(CREC{})))
*                                     type_1162 = type_1161.1
*                                IN   type_1162
*                                END)
*                 type_1164 = RECORD[1, 2](type_1150, type_1163)
*            IN   type_1164
*            END)
mpoly_var_r_995:DEP_RECORD[ ]
vars_eq_0_1004:ALLARROW(Open; TOTAL; (); (RECORD[1, 2](type_1091.1, type_1091.1)); 0; type_1088)
vars_eq_1_1005:ALLARROW(Open; TOTAL; (); (RECORD[1, 2](type_1091.2, type_1091.2)); 0; type_1088)
arg_pair_1016:RECORD[1, 2](type_1091.2, type_1091.2)
eqarg1_1021:SUM_0(0,1)(type_1118)
eqarg2_1022:SUM_0(0,1)(type_1118)
_1097:SUM_0(2,2)(type_1095)
false_1098:type_1094
arg_pair_1_1121:type_1091.2
eqargpair_1_1122:          LET  mu_bnd_1225 = MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001)))
*              vdt_bar_1001 = mu_bnd_1225.1
*              vdt_foo_1002 = mu_bnd_1225.2
*         IN   SUM(0,1)(vdt_bar_1001)
*         END
arg_pair_2_1124:type_1091.2
eqargpair_2_1125:          LET  mu_bnd_1226 = MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001)))
*              vdt_bar_1001 = mu_bnd_1226.1
*              vdt_foo_1002 = mu_bnd_1226.2
*         IN   SUM(0,1)(vdt_bar_1001)
*         END

XXXX exp_analyze 7 exp = eqarg1_1021
XXXX exp_analyze 7 con = SUM_0(0,1)(type_1129)
exp_valid called with expression =
eqarg1_1021

exp_valid returned
XXXX exp_analyze 7 con' = SUM_0(0,1)(type_1118)
XXXX exp_analyze 7 -----------------------------
XXXX finding path1
XXXX finding path2
XXXX finding path1
XXXX finding path2
XXXX finding path1
XXXX finding path2
exp_valid returned
bnd_valid returned
bnd_valid called with bnd =
_1132 : Unknown = project_known0[type_1130](eqarg2_1022)

exp_valid called with expression =
project_known0[type_1130](eqarg2_1022)

XXXX exp_analyze 8 -----------------------------
XXXX exp_analyze 8 context = 
 Constructor variables, kinds, and equations are :
type_1130 = SUM_0(0,1)(type_1129)::SINGLE_TYPE(SUM_0(0,1)(type_1129))
type_1129 = PROJ(MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001))),1)::SINGLE_TYPE(type_1091.1)
type_1123 = PROJ(MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001))),2)::SINGLE_TYPE(type_1091.2)
type_1120 = PROJ(MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001))),2)::SINGLE_TYPE(type_1091.2)
type_1119 = SUM(0,1)(type_1118)::SINGLE_TYPE(SUM(0,1)(type_1118))
type_1118 = PROJ(MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001))),1)::SINGLE_TYPE(type_1091.1)
type_1096 = SUM(2,2)(type_1095)::SINGLE_TYPE(SUM(2,2)(type_1095))
type_1095 = CREC{}::REC_K{}
type_1094 = PROJ(MU_NR((_999=SUM(2,2)(CREC{}))),1)::SINGLE_TYPE(type_1093.1)
type_1093 = MU_NR((_999=SUM(2,2)(CREC{})))::REC_K{1 > _1221 :  SINGLE_TYPE(PROJ(MU_NR((_999=SUM(2,2)(CREC{}))),1))}
type_1091 = MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001)))::          REC_K{1 > vdt_bar_1219 : 
*               SINGLE_TYPE(PROJ(MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001))),1)),
*               2 > vdt_foo_1220 : 
*               SINGLE_TYPE(PROJ(MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001))),2))}
type_1088 = PROJ(MU_NR((_997=SUM(2,2)(CREC{}))),1)::SINGLE_TYPE(type_1087.1)
type_1087 = MU_NR((_997=SUM(2,2)(CREC{})))::REC_K{1 > _1218 :  SINGLE_TYPE(PROJ(MU_NR((_997=SUM(2,2)(CREC{}))),1))}
mpoly_var_c_994::REC_K{'a > 'a_996 :  TYPE}
_1058 =           LET  _1058 =  FUN('a_1057 ::  TYPE) = SUM(0,1)(APP(_1050,('a_1057)))
*         IN   _1058
*         END::Arrow_k(Open; 'a_1057 : TYPE; SINGLE_TYPE(SUM(0,1)(APP(_1050,('a_1057)))))
_1055 =           LET  _1055 =  FUN('a_1052 ::  TYPE) = SUM(0,1)(APP(_1047,('a_1052)))
*         IN   _1055
*         END::Arrow_k(Open; 'a_1052 : TYPE; SINGLE_TYPE(SUM(0,1)(APP(_1047,('a_1052)))))
_1050 =           LET  _1050 =  FUN('a_1049 ::  TYPE) = APP(_1041,('a_1049))
*         IN   _1050
*         END::Arrow_k(Open; 'a_1049 : TYPE; SINGLE_TYPE(APP(_1041,('a_1049))))
_1047 =           LET  _1047 =  FUN('a_1046 ::  TYPE) = APP(_1044,('a_1046))
*         IN   _1047
*         END::Arrow_k(Open; 'a_1046 : TYPE; SINGLE_TYPE(APP(_1044,('a_1046))))
_1044 =           LET  _1044 =  FUN('a_1043 ::  TYPE) = PROJ(APP(_990,('a_1043)),2)
*         IN   _1044
*         END::Arrow_k(Open; 'a_1043 : TYPE; SINGLE_TYPE(PROJ(APP(_990,('a_1043)),2)))
_1041 =           LET  _1041 =  FUN('a_1040 ::  TYPE) = PROJ(APP(_990,('a_1040)),1)
*         IN   _1041
*         END::Arrow_k(Open; 'a_1040 : TYPE; SINGLE_TYPE(PROJ(APP(_990,('a_1040)),1)))
_990 =           LET  _990 =  FUN('a_987 ::  TYPE) = MU((vdt_bar_988=SUM(0,1)(vdt_foo_989), vdt_foo_989=SUM(0,1)(vdt_bar_988)))
*         IN   _990
*         END::          Arrow_k(Open; 'a_987 : TYPE; REC_K{1 > vdt_bar_1206 : 
*                                            SINGLE_TYPE(PROJ(MU((vdt_bar_988=SUM(0,1)(vdt_foo_989),
*                                                                 vdt_foo_989=SUM(0,1)(vdt_bar_988))),1)),
*                                            2 > vdt_foo_1207 : 
*                                            SINGLE_TYPE(PROJ(MU((vdt_bar_988=SUM(0,1)(vdt_foo_989),
*                                                                 vdt_foo_989=SUM(0,1)(vdt_bar_988))),2))})

 Expression variables and constructors are :
_bar_foo_eq_r_993:          ALLARROW(Open; TOTAL; (mpoly_var_c_994 :: REC_K{'a > 'a_996 :  TYPE}); 
*            (DEP_RECORD[ ]); 0; 
*            LET  type_1150 = ALLARROW(Open; PARTIAL; (); 
*                                (LET  type_1140 = MU((vdt_bar_1036=SUM(0,1)(vdt_foo_1037), vdt_foo_1037=SUM(0,1)(vdt_bar_1036)))
*                                      type_1141 = type_1140.1
*                                      type_1144 = MU((vdt_bar_1034=SUM(0,1)(vdt_foo_1035), vdt_foo_1035=SUM(0,1)(vdt_bar_1034)))
*                                      type_1145 = type_1144.1
*                                      type_1146 = RECORD[1, 2](type_1141, type_1145)
*                                 IN   type_1146
*                                 END); 0; 
*                                LET  type_1148 = MU_NR((_1038=SUM(2,2)(CREC{})))
*                                     type_1149 = type_1148.1
*                                IN   type_1149
*                                END)
*                 type_1163 = ALLARROW(Open; PARTIAL; (); 
*                                (LET  type_1153 = MU((vdt_bar_1031=SUM(0,1)(vdt_foo_1032), vdt_foo_1032=SUM(0,1)(vdt_bar_1031)))
*                                      type_1154 = type_1153.2
*                                      type_1157 = MU((vdt_bar_1029=SUM(0,1)(vdt_foo_1030), vdt_foo_1030=SUM(0,1)(vdt_bar_1029)))
*                                      type_1158 = type_1157.2
*                                      type_1159 = RECORD[1, 2](type_1154, type_1158)
*                                 IN   type_1159
*                                 END); 0; 
*                                LET  type_1161 = MU_NR((_1033=SUM(2,2)(CREC{})))
*                                     type_1162 = type_1161.1
*                                IN   type_1162
*                                END)
*                 type_1164 = RECORD[1, 2](type_1150, type_1163)
*            IN   type_1164
*            END)
mpoly_var_r_995:DEP_RECORD[ ]
vars_eq_0_1004:ALLARROW(Open; TOTAL; (); (RECORD[1, 2](type_1091.1, type_1091.1)); 0; type_1088)
vars_eq_1_1005:ALLARROW(Open; TOTAL; (); (RECORD[1, 2](type_1091.2, type_1091.2)); 0; type_1088)
arg_pair_1016:RECORD[1, 2](type_1091.2, type_1091.2)
eqarg1_1021:SUM_0(0,1)(type_1118)
eqarg2_1022:SUM_0(0,1)(type_1118)
_1097:SUM_0(2,2)(type_1095)
false_1098:type_1094
arg_pair_1_1121:type_1091.2
eqargpair_1_1122:          LET  mu_bnd_1225 = MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001)))
*              vdt_bar_1001 = mu_bnd_1225.1
*              vdt_foo_1002 = mu_bnd_1225.2
*         IN   SUM(0,1)(vdt_bar_1001)
*         END
arg_pair_2_1124:type_1091.2
eqargpair_2_1125:          LET  mu_bnd_1226 = MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001)))
*              vdt_bar_1001 = mu_bnd_1226.1
*              vdt_foo_1002 = mu_bnd_1226.2
*         IN   SUM(0,1)(vdt_bar_1001)
*         END
_1131:type_1129

XXXX exp_analyze 8 exp = eqarg2_1022
XXXX exp_analyze 8 con = SUM_0(0,1)(type_1129)
exp_valid called with expression =
eqarg2_1022

exp_valid returned
XXXX exp_analyze 8 con' = SUM_0(0,1)(type_1118)
XXXX exp_analyze 8 -----------------------------
XXXX finding path1
XXXX finding path2
XXXX finding path1
XXXX finding path2
XXXX finding path1
XXXX finding path2
exp_valid returned
bnd_valid returned
bnd_valid called with bnd =
_1133 : Unknown = record(1>_1131, 2>_1132)

exp_valid called with expression =
record(1>_1131, 2>_1132)

exp_valid called with expression =
_1131

exp_valid returned
exp_valid called with expression =
_1132

exp_valid returned
exp_valid returned
bnd_valid returned
bnd_valid called with bnd =
_1134 : Unknown = App_Open(vars_eq_0_1004;  ; _1133;  )

exp_valid called with expression =
App_Open(vars_eq_0_1004;  ; _1133;  )

exp_valid called with expression =
vars_eq_0_1004

exp_valid returned
XXXX exp_analyze 9 -----------------------------
XXXX exp_analyze 9 context = 
 Constructor variables, kinds, and equations are :
type_1130 = SUM_0(0,1)(type_1129)::SINGLE_TYPE(SUM_0(0,1)(type_1129))
type_1129 = PROJ(MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001))),1)::SINGLE_TYPE(type_1091.1)
type_1123 = PROJ(MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001))),2)::SINGLE_TYPE(type_1091.2)
type_1120 = PROJ(MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001))),2)::SINGLE_TYPE(type_1091.2)
type_1119 = SUM(0,1)(type_1118)::SINGLE_TYPE(SUM(0,1)(type_1118))
type_1118 = PROJ(MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001))),1)::SINGLE_TYPE(type_1091.1)
type_1096 = SUM(2,2)(type_1095)::SINGLE_TYPE(SUM(2,2)(type_1095))
type_1095 = CREC{}::REC_K{}
type_1094 = PROJ(MU_NR((_999=SUM(2,2)(CREC{}))),1)::SINGLE_TYPE(type_1093.1)
type_1093 = MU_NR((_999=SUM(2,2)(CREC{})))::REC_K{1 > _1221 :  SINGLE_TYPE(PROJ(MU_NR((_999=SUM(2,2)(CREC{}))),1))}
type_1091 = MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001)))::          REC_K{1 > vdt_bar_1219 : 
*               SINGLE_TYPE(PROJ(MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001))),1)),
*               2 > vdt_foo_1220 : 
*               SINGLE_TYPE(PROJ(MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001))),2))}
type_1088 = PROJ(MU_NR((_997=SUM(2,2)(CREC{}))),1)::SINGLE_TYPE(type_1087.1)
type_1087 = MU_NR((_997=SUM(2,2)(CREC{})))::REC_K{1 > _1218 :  SINGLE_TYPE(PROJ(MU_NR((_997=SUM(2,2)(CREC{}))),1))}
mpoly_var_c_994::REC_K{'a > 'a_996 :  TYPE}
_1058 =           LET  _1058 =  FUN('a_1057 ::  TYPE) = SUM(0,1)(APP(_1050,('a_1057)))
*         IN   _1058
*         END::Arrow_k(Open; 'a_1057 : TYPE; SINGLE_TYPE(SUM(0,1)(APP(_1050,('a_1057)))))
_1055 =           LET  _1055 =  FUN('a_1052 ::  TYPE) = SUM(0,1)(APP(_1047,('a_1052)))
*         IN   _1055
*         END::Arrow_k(Open; 'a_1052 : TYPE; SINGLE_TYPE(SUM(0,1)(APP(_1047,('a_1052)))))
_1050 =           LET  _1050 =  FUN('a_1049 ::  TYPE) = APP(_1041,('a_1049))
*         IN   _1050
*         END::Arrow_k(Open; 'a_1049 : TYPE; SINGLE_TYPE(APP(_1041,('a_1049))))
_1047 =           LET  _1047 =  FUN('a_1046 ::  TYPE) = APP(_1044,('a_1046))
*         IN   _1047
*         END::Arrow_k(Open; 'a_1046 : TYPE; SINGLE_TYPE(APP(_1044,('a_1046))))
_1044 =           LET  _1044 =  FUN('a_1043 ::  TYPE) = PROJ(APP(_990,('a_1043)),2)
*         IN   _1044
*         END::Arrow_k(Open; 'a_1043 : TYPE; SINGLE_TYPE(PROJ(APP(_990,('a_1043)),2)))
_1041 =           LET  _1041 =  FUN('a_1040 ::  TYPE) = PROJ(APP(_990,('a_1040)),1)
*         IN   _1041
*         END::Arrow_k(Open; 'a_1040 : TYPE; SINGLE_TYPE(PROJ(APP(_990,('a_1040)),1)))
_990 =           LET  _990 =  FUN('a_987 ::  TYPE) = MU((vdt_bar_988=SUM(0,1)(vdt_foo_989), vdt_foo_989=SUM(0,1)(vdt_bar_988)))
*         IN   _990
*         END::          Arrow_k(Open; 'a_987 : TYPE; REC_K{1 > vdt_bar_1206 : 
*                                            SINGLE_TYPE(PROJ(MU((vdt_bar_988=SUM(0,1)(vdt_foo_989),
*                                                                 vdt_foo_989=SUM(0,1)(vdt_bar_988))),1)),
*                                            2 > vdt_foo_1207 : 
*                                            SINGLE_TYPE(PROJ(MU((vdt_bar_988=SUM(0,1)(vdt_foo_989),
*                                                                 vdt_foo_989=SUM(0,1)(vdt_bar_988))),2))})

 Expression variables and constructors are :
_bar_foo_eq_r_993:          ALLARROW(Open; TOTAL; (mpoly_var_c_994 :: REC_K{'a > 'a_996 :  TYPE}); 
*            (DEP_RECORD[ ]); 0; 
*            LET  type_1150 = ALLARROW(Open; PARTIAL; (); 
*                                (LET  type_1140 = MU((vdt_bar_1036=SUM(0,1)(vdt_foo_1037), vdt_foo_1037=SUM(0,1)(vdt_bar_1036)))
*                                      type_1141 = type_1140.1
*                                      type_1144 = MU((vdt_bar_1034=SUM(0,1)(vdt_foo_1035), vdt_foo_1035=SUM(0,1)(vdt_bar_1034)))
*                                      type_1145 = type_1144.1
*                                      type_1146 = RECORD[1, 2](type_1141, type_1145)
*                                 IN   type_1146
*                                 END); 0; 
*                                LET  type_1148 = MU_NR((_1038=SUM(2,2)(CREC{})))
*                                     type_1149 = type_1148.1
*                                IN   type_1149
*                                END)
*                 type_1163 = ALLARROW(Open; PARTIAL; (); 
*                                (LET  type_1153 = MU((vdt_bar_1031=SUM(0,1)(vdt_foo_1032), vdt_foo_1032=SUM(0,1)(vdt_bar_1031)))
*                                      type_1154 = type_1153.2
*                                      type_1157 = MU((vdt_bar_1029=SUM(0,1)(vdt_foo_1030), vdt_foo_1030=SUM(0,1)(vdt_bar_1029)))
*                                      type_1158 = type_1157.2
*                                      type_1159 = RECORD[1, 2](type_1154, type_1158)
*                                 IN   type_1159
*                                 END); 0; 
*                                LET  type_1161 = MU_NR((_1033=SUM(2,2)(CREC{})))
*                                     type_1162 = type_1161.1
*                                IN   type_1162
*                                END)
*                 type_1164 = RECORD[1, 2](type_1150, type_1163)
*            IN   type_1164
*            END)
mpoly_var_r_995:DEP_RECORD[ ]
vars_eq_0_1004:ALLARROW(Open; TOTAL; (); (RECORD[1, 2](type_1091.1, type_1091.1)); 0; type_1088)
vars_eq_1_1005:ALLARROW(Open; TOTAL; (); (RECORD[1, 2](type_1091.2, type_1091.2)); 0; type_1088)
arg_pair_1016:RECORD[1, 2](type_1091.2, type_1091.2)
eqarg1_1021:SUM_0(0,1)(type_1118)
eqarg2_1022:SUM_0(0,1)(type_1118)
_1097:SUM_0(2,2)(type_1095)
false_1098:type_1094
arg_pair_1_1121:type_1091.2
eqargpair_1_1122:          LET  mu_bnd_1225 = MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001)))
*              vdt_bar_1001 = mu_bnd_1225.1
*              vdt_foo_1002 = mu_bnd_1225.2
*         IN   SUM(0,1)(vdt_bar_1001)
*         END
arg_pair_2_1124:type_1091.2
eqargpair_2_1125:          LET  mu_bnd_1226 = MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001)))
*              vdt_bar_1001 = mu_bnd_1226.1
*              vdt_foo_1002 = mu_bnd_1226.2
*         IN   SUM(0,1)(vdt_bar_1001)
*         END
_1131:type_1129
_1132:type_1129
_1133:RECORD[1, 2](type_1129, type_1129)

XXXX exp_analyze 9 exp = _1133
XXXX exp_analyze 9 con = RECORD[1, 2](type_1091.1, type_1091.1)
exp_valid called with expression =
_1133

exp_valid returned
XXXX exp_analyze 9 con' = RECORD[1, 2](type_1129, type_1129)
XXXX exp_analyze 9 -----------------------------
XXXX finding path1
XXXX finding path2
exp_valid returned
bnd_valid returned
exp_valid called with expression =
_1134

exp_valid returned
exp_valid returned
XXXX finding path1
XXXX finding path2
XXXX finding path1
XXXX exp_analyze 10 -----------------------------
XXXX exp_analyze 10 context = 
 Constructor variables, kinds, and equations are :
type_1123 = PROJ(MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001))),2)::SINGLE_TYPE(type_1091.2)
type_1120 = PROJ(MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001))),2)::SINGLE_TYPE(type_1091.2)
type_1119 = SUM(0,1)(type_1118)::SINGLE_TYPE(SUM(0,1)(type_1118))
type_1118 = PROJ(MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001))),1)::SINGLE_TYPE(type_1091.1)
type_1096 = SUM(2,2)(type_1095)::SINGLE_TYPE(SUM(2,2)(type_1095))
type_1095 = CREC{}::REC_K{}
type_1094 = PROJ(MU_NR((_999=SUM(2,2)(CREC{}))),1)::SINGLE_TYPE(type_1093.1)
type_1093 = MU_NR((_999=SUM(2,2)(CREC{})))::REC_K{1 > _1221 :  SINGLE_TYPE(PROJ(MU_NR((_999=SUM(2,2)(CREC{}))),1))}
type_1091 = MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001)))::          REC_K{1 > vdt_bar_1219 : 
*               SINGLE_TYPE(PROJ(MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001))),1)),
*               2 > vdt_foo_1220 : 
*               SINGLE_TYPE(PROJ(MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001))),2))}
type_1088 = PROJ(MU_NR((_997=SUM(2,2)(CREC{}))),1)::SINGLE_TYPE(type_1087.1)
type_1087 = MU_NR((_997=SUM(2,2)(CREC{})))::REC_K{1 > _1218 :  SINGLE_TYPE(PROJ(MU_NR((_997=SUM(2,2)(CREC{}))),1))}
mpoly_var_c_994::REC_K{'a > 'a_996 :  TYPE}
_1058 =           LET  _1058 =  FUN('a_1057 ::  TYPE) = SUM(0,1)(APP(_1050,('a_1057)))
*         IN   _1058
*         END::Arrow_k(Open; 'a_1057 : TYPE; SINGLE_TYPE(SUM(0,1)(APP(_1050,('a_1057)))))
_1055 =           LET  _1055 =  FUN('a_1052 ::  TYPE) = SUM(0,1)(APP(_1047,('a_1052)))
*         IN   _1055
*         END::Arrow_k(Open; 'a_1052 : TYPE; SINGLE_TYPE(SUM(0,1)(APP(_1047,('a_1052)))))
_1050 =           LET  _1050 =  FUN('a_1049 ::  TYPE) = APP(_1041,('a_1049))
*         IN   _1050
*         END::Arrow_k(Open; 'a_1049 : TYPE; SINGLE_TYPE(APP(_1041,('a_1049))))
_1047 =           LET  _1047 =  FUN('a_1046 ::  TYPE) = APP(_1044,('a_1046))
*         IN   _1047
*         END::Arrow_k(Open; 'a_1046 : TYPE; SINGLE_TYPE(APP(_1044,('a_1046))))
_1044 =           LET  _1044 =  FUN('a_1043 ::  TYPE) = PROJ(APP(_990,('a_1043)),2)
*         IN   _1044
*         END::Arrow_k(Open; 'a_1043 : TYPE; SINGLE_TYPE(PROJ(APP(_990,('a_1043)),2)))
_1041 =           LET  _1041 =  FUN('a_1040 ::  TYPE) = PROJ(APP(_990,('a_1040)),1)
*         IN   _1041
*         END::Arrow_k(Open; 'a_1040 : TYPE; SINGLE_TYPE(PROJ(APP(_990,('a_1040)),1)))
_990 =           LET  _990 =  FUN('a_987 ::  TYPE) = MU((vdt_bar_988=SUM(0,1)(vdt_foo_989), vdt_foo_989=SUM(0,1)(vdt_bar_988)))
*         IN   _990
*         END::          Arrow_k(Open; 'a_987 : TYPE; REC_K{1 > vdt_bar_1206 : 
*                                            SINGLE_TYPE(PROJ(MU((vdt_bar_988=SUM(0,1)(vdt_foo_989),
*                                                                 vdt_foo_989=SUM(0,1)(vdt_bar_988))),1)),
*                                            2 > vdt_foo_1207 : 
*                                            SINGLE_TYPE(PROJ(MU((vdt_bar_988=SUM(0,1)(vdt_foo_989),
*                                                                 vdt_foo_989=SUM(0,1)(vdt_bar_988))),2))})

 Expression variables and constructors are :
_bar_foo_eq_r_993:          ALLARROW(Open; TOTAL; (mpoly_var_c_994 :: REC_K{'a > 'a_996 :  TYPE}); 
*            (DEP_RECORD[ ]); 0; 
*            LET  type_1150 = ALLARROW(Open; PARTIAL; (); 
*                                (LET  type_1140 = MU((vdt_bar_1036=SUM(0,1)(vdt_foo_1037), vdt_foo_1037=SUM(0,1)(vdt_bar_1036)))
*                                      type_1141 = type_1140.1
*                                      type_1144 = MU((vdt_bar_1034=SUM(0,1)(vdt_foo_1035), vdt_foo_1035=SUM(0,1)(vdt_bar_1034)))
*                                      type_1145 = type_1144.1
*                                      type_1146 = RECORD[1, 2](type_1141, type_1145)
*                                 IN   type_1146
*                                 END); 0; 
*                                LET  type_1148 = MU_NR((_1038=SUM(2,2)(CREC{})))
*                                     type_1149 = type_1148.1
*                                IN   type_1149
*                                END)
*                 type_1163 = ALLARROW(Open; PARTIAL; (); 
*                                (LET  type_1153 = MU((vdt_bar_1031=SUM(0,1)(vdt_foo_1032), vdt_foo_1032=SUM(0,1)(vdt_bar_1031)))
*                                      type_1154 = type_1153.2
*                                      type_1157 = MU((vdt_bar_1029=SUM(0,1)(vdt_foo_1030), vdt_foo_1030=SUM(0,1)(vdt_bar_1029)))
*                                      type_1158 = type_1157.2
*                                      type_1159 = RECORD[1, 2](type_1154, type_1158)
*                                 IN   type_1159
*                                 END); 0; 
*                                LET  type_1161 = MU_NR((_1033=SUM(2,2)(CREC{})))
*                                     type_1162 = type_1161.1
*                                IN   type_1162
*                                END)
*                 type_1164 = RECORD[1, 2](type_1150, type_1163)
*            IN   type_1164
*            END)
mpoly_var_r_995:DEP_RECORD[ ]
vars_eq_0_1004:ALLARROW(Open; TOTAL; (); (RECORD[1, 2](type_1091.1, type_1091.1)); 0; type_1088)
vars_eq_1_1005:ALLARROW(Open; TOTAL; (); (RECORD[1, 2](type_1091.2, type_1091.2)); 0; type_1088)
arg_pair_1016:RECORD[1, 2](type_1091.2, type_1091.2)
eqarg1_1021:SUM_0(0,1)(type_1118)
_1097:SUM_0(2,2)(type_1095)
false_1098:type_1094
arg_pair_1_1121:type_1091.2
eqargpair_1_1122:          LET  mu_bnd_1225 = MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001)))
*              vdt_bar_1001 = mu_bnd_1225.1
*              vdt_foo_1002 = mu_bnd_1225.2
*         IN   SUM(0,1)(vdt_bar_1001)
*         END
arg_pair_2_1124:type_1091.2
eqargpair_2_1125:          LET  mu_bnd_1226 = MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001)))
*              vdt_bar_1001 = mu_bnd_1226.1
*              vdt_foo_1002 = mu_bnd_1226.2
*         IN   SUM(0,1)(vdt_bar_1001)
*         END

XXXX exp_analyze 10 exp = false_1098
XXXX exp_analyze 10 con = PROJ(MU_NR((_997=SUM(2,2)(CREC{}))),1)
exp_valid called with expression =
false_1098

exp_valid returned
XXXX exp_analyze 10 con' = type_1094
XXXX exp_analyze 10 -----------------------------
XXXX finding path1
XXXX finding path2
XXXX finding path1
exp_valid returned
bnd_valid returned
exp_valid called with expression =
_1135

exp_valid returned
exp_valid returned
XXXX finding path1
XXXX finding path2
XXXX finding path1
exp_valid returned
bnd_valid returned
exp_valid called with expression =
_1136

exp_valid returned
exp_valid returned
XXXX exp_analyze 6 con' =           LET  type_1118 = type_1091.1
*              type_1119 = SUM(0,1)(type_1118)
*              type_1120 = type_1091.2
*              type_1123 = type_1091.2
*         IN   type_1088
*         END
XXXX exp_analyze 6 -----------------------------
XXXX finding path1
XXXX finding path2
XXXX done
bnd_valid returned
bnd_valid called with bnd =
top_eq_1137 : Unknown = record(1>vars_eq_0_1004, 2>vars_eq_1_1005)

exp_valid called with expression =
record(1>vars_eq_0_1004, 2>vars_eq_1_1005)

exp_valid called with expression =
vars_eq_0_1004

exp_valid returned
exp_valid called with expression =
vars_eq_1_1005

exp_valid returned
exp_valid returned
bnd_valid returned
exp_valid called with expression =
top_eq_1137

exp_valid returned
exp_valid returned
XXXX exp_analyze 0 con' =           LET  type_1087 = MU_NR((_997=SUM(2,2)(CREC{})))
*              type_1088 = type_1087.1
*              type_1091 = MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001)))
*              type_1093 = MU_NR((_999=SUM(2,2)(CREC{})))
*              type_1094 = type_1093.1
*              type_1095 = CREC{}
*              type_1096 = SUM(2,2)(type_1095)
*         IN   RECORD[1, 2]
*                (ALLARROW(Open; TOTAL; (); (RECORD[1, 2](type_1091.1, type_1091.1)); 0; type_1088),
*                 ALLARROW(Open; TOTAL; (); (RECORD[1, 2](type_1091.2, type_1091.2)); 0; type_1088))
*         END
XXXX exp_analyze 0 -----------------------------
XXXX finding path1
XXXX finding path2
XXXX finding path2
XXXX done
bnd_valid returned
bnd_valid called with bnd =
          /LEAF\poly+Ebar_INT_r_1061
*           (mpoly_var_c_1062 :: REC_K{'a > 'a_1064 :  TYPE} ;; mpoly_var_r_1063 : Unknown : DEP_RECORD[ ] ;; )
*         =>LET  type_1175 = ALLARROW(Open; PARTIAL; (); 
*                               (LET  type_1167 = mpoly_var_c_1062.'a
*                                     type_1168 = APP(_1041,(type_1167))
*                                     type_1169 = mpoly_var_c_1062.'a
*                                     type_1170 = APP(_1041,(type_1169))
*                                     type_1171 = RECORD[1, 2](type_1168, type_1170)
*                                IN   type_1171
*                                END); 0; 
*                               LET  type_1173 = MU_NR((_1070=SUM(2,2)(CREC{})))
*                                    type_1174 = type_1173.1
*                               IN   type_1174
*                               END)
*           IN   type_1175
*           END =
*         Let  _1165 : Unknown = App_Open(_bar_foo_eq_r_993;  mpoly_var_c_1062; mpoly_var_r_1063;  )
*              v1_1166 : Unknown = select[1][](_1165)
*         In   v1_1166
*         End

XXXX getting function types
XXXX analyzing bnd_types
kind_valid called with kind =
REC_K{'a > 'a_1064 :  TYPE}

kind_valid called with kind =
TYPE

kind_valid returned
kind_valid returned
con_valid called with constructor =
          ALLARROW(Open; PARTIAL; (); 
*            (LET  type_1167 = mpoly_var_c_1062.'a
*                  type_1168 = APP(_1041,(type_1167))
*                  type_1169 = mpoly_var_c_1062.'a
*                  type_1170 = APP(_1041,(type_1169))
*                  type_1171 = RECORD[1, 2](type_1168, type_1170)
*             IN   type_1171
*             END); 0; 
*            LET  type_1173 = MU_NR((_1070=SUM(2,2)(CREC{})))
*                 type_1174 = type_1173.1
*            IN   type_1174
*            END)

con_valid called with constructor =
mpoly_var_c_1062.'a

con_valid called with constructor =
mpoly_var_c_1062

con_valid returned
con_valid returned
con_valid called with constructor =
APP(_1041,(type_1167))

con_valid called with constructor =
_1041

con_valid returned
con_valid returned
con_valid called with constructor =
mpoly_var_c_1062.'a

con_valid called with constructor =
mpoly_var_c_1062

con_valid returned
con_valid returned
con_valid called with constructor =
APP(_1041,(type_1169))

con_valid called with constructor =
_1041

con_valid returned
con_valid returned
con_valid called with constructor =
RECORD[1, 2](type_1168, type_1170)

con_valid returned
con_valid called with constructor =
MU_NR((_1070=SUM(2,2)(CREC{})))

con_valid returned
con_valid called with constructor =
type_1173.1

con_valid called with constructor =
type_1173

con_valid returned
con_valid returned
con_valid returned
XXXX building up context
XXXX checking defs
XXXX exp_analyze 11 -----------------------------
XXXX exp_analyze 11 context = 
 Constructor variables, kinds, and equations are :
mpoly_var_c_1062::REC_K{'a > 'a_1064 :  TYPE}
_1058 =           LET  _1058 =  FUN('a_1057 ::  TYPE) = SUM(0,1)(APP(_1050,('a_1057)))
*         IN   _1058
*         END::Arrow_k(Open; 'a_1057 : TYPE; SINGLE_TYPE(SUM(0,1)(APP(_1050,('a_1057)))))
_1055 =           LET  _1055 =  FUN('a_1052 ::  TYPE) = SUM(0,1)(APP(_1047,('a_1052)))
*         IN   _1055
*         END::Arrow_k(Open; 'a_1052 : TYPE; SINGLE_TYPE(SUM(0,1)(APP(_1047,('a_1052)))))
_1050 =           LET  _1050 =  FUN('a_1049 ::  TYPE) = APP(_1041,('a_1049))
*         IN   _1050
*         END::Arrow_k(Open; 'a_1049 : TYPE; SINGLE_TYPE(APP(_1041,('a_1049))))
_1047 =           LET  _1047 =  FUN('a_1046 ::  TYPE) = APP(_1044,('a_1046))
*         IN   _1047
*         END::Arrow_k(Open; 'a_1046 : TYPE; SINGLE_TYPE(APP(_1044,('a_1046))))
_1044 =           LET  _1044 =  FUN('a_1043 ::  TYPE) = PROJ(APP(_990,('a_1043)),2)
*         IN   _1044
*         END::Arrow_k(Open; 'a_1043 : TYPE; SINGLE_TYPE(PROJ(APP(_990,('a_1043)),2)))
_1041 =           LET  _1041 =  FUN('a_1040 ::  TYPE) = PROJ(APP(_990,('a_1040)),1)
*         IN   _1041
*         END::Arrow_k(Open; 'a_1040 : TYPE; SINGLE_TYPE(PROJ(APP(_990,('a_1040)),1)))
_990 =           LET  _990 =  FUN('a_987 ::  TYPE) = MU((vdt_bar_988=SUM(0,1)(vdt_foo_989), vdt_foo_989=SUM(0,1)(vdt_bar_988)))
*         IN   _990
*         END::          Arrow_k(Open; 'a_987 : TYPE; REC_K{1 > vdt_bar_1206 : 
*                                            SINGLE_TYPE(PROJ(MU((vdt_bar_988=SUM(0,1)(vdt_foo_989),
*                                                                 vdt_foo_989=SUM(0,1)(vdt_bar_988))),1)),
*                                            2 > vdt_foo_1207 : 
*                                            SINGLE_TYPE(PROJ(MU((vdt_bar_988=SUM(0,1)(vdt_foo_989),
*                                                                 vdt_foo_989=SUM(0,1)(vdt_bar_988))),2))})

 Expression variables and constructors are :
_bar_foo_eq_r_993:          ALLARROW(Open; TOTAL; (mpoly_var_c_994 :: REC_K{'a > 'a_996 :  TYPE}); 
*            (DEP_RECORD[ ]); 0; 
*            LET  type_1150 = ALLARROW(Open; PARTIAL; (); 
*                                (LET  type_1140 = MU((vdt_bar_1036=SUM(0,1)(vdt_foo_1037), vdt_foo_1037=SUM(0,1)(vdt_bar_1036)))
*                                      type_1141 = type_1140.1
*                                      type_1144 = MU((vdt_bar_1034=SUM(0,1)(vdt_foo_1035), vdt_foo_1035=SUM(0,1)(vdt_bar_1034)))
*                                      type_1145 = type_1144.1
*                                      type_1146 = RECORD[1, 2](type_1141, type_1145)
*                                 IN   type_1146
*                                 END); 0; 
*                                LET  type_1148 = MU_NR((_1038=SUM(2,2)(CREC{})))
*                                     type_1149 = type_1148.1
*                                IN   type_1149
*                                END)
*                 type_1163 = ALLARROW(Open; PARTIAL; (); 
*                                (LET  type_1153 = MU((vdt_bar_1031=SUM(0,1)(vdt_foo_1032), vdt_foo_1032=SUM(0,1)(vdt_bar_1031)))
*                                      type_1154 = type_1153.2
*                                      type_1157 = MU((vdt_bar_1029=SUM(0,1)(vdt_foo_1030), vdt_foo_1030=SUM(0,1)(vdt_bar_1029)))
*                                      type_1158 = type_1157.2
*                                      type_1159 = RECORD[1, 2](type_1154, type_1158)
*                                 IN   type_1159
*                                 END); 0; 
*                                LET  type_1161 = MU_NR((_1033=SUM(2,2)(CREC{})))
*                                     type_1162 = type_1161.1
*                                IN   type_1162
*                                END)
*                 type_1164 = RECORD[1, 2](type_1150, type_1163)
*            IN   type_1164
*            END)
poly+Ebar_INT_r_1061:          ALLARROW(Open; TOTAL; (mpoly_var_c_1062 :: REC_K{'a > 'a_1064 :  TYPE}); 
*            (DEP_RECORD[ ]); 0; 
*            LET  type_1175 = ALLARROW(Open; PARTIAL; (); 
*                                (LET  type_1167 = mpoly_var_c_1062.'a
*                                      type_1168 = APP(_1041,(type_1167))
*                                      type_1169 = mpoly_var_c_1062.'a
*                                      type_1170 = APP(_1041,(type_1169))
*                                      type_1171 = RECORD[1, 2](type_1168, type_1170)
*                                 IN   type_1171
*                                 END); 0; 
*                                LET  type_1173 = MU_NR((_1070=SUM(2,2)(CREC{})))
*                                     type_1174 = type_1173.1
*                                IN   type_1174
*                                END)
*            IN   type_1175
*            END)
mpoly_var_r_1063:DEP_RECORD[ ]

XXXX exp_analyze 11 exp =           Let  _1165 : Unknown = App_Open(_bar_foo_eq_r_993;  mpoly_var_c_1062; mpoly_var_r_1063;  )
*              v1_1166 : Unknown = select[1][](_1165)
*         In   v1_1166
*         End
XXXX exp_analyze 11 con =           LET  type_1175 = ALLARROW(Open; PARTIAL; (); 
*                             (LET  type_1167 = mpoly_var_c_1062.'a
*                                   type_1168 = APP(_1041,(type_1167))
*                                   type_1169 = mpoly_var_c_1062.'a
*                                   type_1170 = APP(_1041,(type_1169))
*                                   type_1171 = RECORD[1, 2](type_1168, type_1170)
*                              IN   type_1171
*                              END); 0; 
*                             LET  type_1173 = MU_NR((_1070=SUM(2,2)(CREC{})))
*                                  type_1174 = type_1173.1
*                             IN   type_1174
*                             END)
*         IN   type_1175
*         END
exp_valid called with expression =
          Let  _1165 : Unknown = App_Open(_bar_foo_eq_r_993;  mpoly_var_c_1062; mpoly_var_r_1063;  )
*              v1_1166 : Unknown = select[1][](_1165)
*         In   v1_1166
*         End

bnd_valid called with bnd =
_1165 : Unknown = App_Open(_bar_foo_eq_r_993;  mpoly_var_c_1062; mpoly_var_r_1063;  )

exp_valid called with expression =
App_Open(_bar_foo_eq_r_993;  mpoly_var_c_1062; mpoly_var_r_1063;  )

exp_valid called with expression =
_bar_foo_eq_r_993

exp_valid returned
XXXX exp_analyze 12 -----------------------------
XXXX exp_analyze 12 context = 
 Constructor variables, kinds, and equations are :
mpoly_var_c_994 = mpoly_var_c_1062::REC_K{'a > 'a_996 :  TYPE}
mpoly_var_c_1062::REC_K{'a > 'a_1064 :  TYPE}
_1058 =           LET  _1058 =  FUN('a_1057 ::  TYPE) = SUM(0,1)(APP(_1050,('a_1057)))
*         IN   _1058
*         END::Arrow_k(Open; 'a_1057 : TYPE; SINGLE_TYPE(SUM(0,1)(APP(_1050,('a_1057)))))
_1055 =           LET  _1055 =  FUN('a_1052 ::  TYPE) = SUM(0,1)(APP(_1047,('a_1052)))
*         IN   _1055
*         END::Arrow_k(Open; 'a_1052 : TYPE; SINGLE_TYPE(SUM(0,1)(APP(_1047,('a_1052)))))
_1050 =           LET  _1050 =  FUN('a_1049 ::  TYPE) = APP(_1041,('a_1049))
*         IN   _1050
*         END::Arrow_k(Open; 'a_1049 : TYPE; SINGLE_TYPE(APP(_1041,('a_1049))))
_1047 =           LET  _1047 =  FUN('a_1046 ::  TYPE) = APP(_1044,('a_1046))
*         IN   _1047
*         END::Arrow_k(Open; 'a_1046 : TYPE; SINGLE_TYPE(APP(_1044,('a_1046))))
_1044 =           LET  _1044 =  FUN('a_1043 ::  TYPE) = PROJ(APP(_990,('a_1043)),2)
*         IN   _1044
*         END::Arrow_k(Open; 'a_1043 : TYPE; SINGLE_TYPE(PROJ(APP(_990,('a_1043)),2)))
_1041 =           LET  _1041 =  FUN('a_1040 ::  TYPE) = PROJ(APP(_990,('a_1040)),1)
*         IN   _1041
*         END::Arrow_k(Open; 'a_1040 : TYPE; SINGLE_TYPE(PROJ(APP(_990,('a_1040)),1)))
_990 =           LET  _990 =  FUN('a_987 ::  TYPE) = MU((vdt_bar_988=SUM(0,1)(vdt_foo_989), vdt_foo_989=SUM(0,1)(vdt_bar_988)))
*         IN   _990
*         END::          Arrow_k(Open; 'a_987 : TYPE; REC_K{1 > vdt_bar_1206 : 
*                                            SINGLE_TYPE(PROJ(MU((vdt_bar_988=SUM(0,1)(vdt_foo_989),
*                                                                 vdt_foo_989=SUM(0,1)(vdt_bar_988))),1)),
*                                            2 > vdt_foo_1207 : 
*                                            SINGLE_TYPE(PROJ(MU((vdt_bar_988=SUM(0,1)(vdt_foo_989),
*                                                                 vdt_foo_989=SUM(0,1)(vdt_bar_988))),2))})

 Expression variables and constructors are :
_bar_foo_eq_r_993:          ALLARROW(Open; TOTAL; (mpoly_var_c_994 :: REC_K{'a > 'a_996 :  TYPE}); 
*            (DEP_RECORD[ ]); 0; 
*            LET  type_1150 = ALLARROW(Open; PARTIAL; (); 
*                                (LET  type_1140 = MU((vdt_bar_1036=SUM(0,1)(vdt_foo_1037), vdt_foo_1037=SUM(0,1)(vdt_bar_1036)))
*                                      type_1141 = type_1140.1
*                                      type_1144 = MU((vdt_bar_1034=SUM(0,1)(vdt_foo_1035), vdt_foo_1035=SUM(0,1)(vdt_bar_1034)))
*                                      type_1145 = type_1144.1
*                                      type_1146 = RECORD[1, 2](type_1141, type_1145)
*                                 IN   type_1146
*                                 END); 0; 
*                                LET  type_1148 = MU_NR((_1038=SUM(2,2)(CREC{})))
*                                     type_1149 = type_1148.1
*                                IN   type_1149
*                                END)
*                 type_1163 = ALLARROW(Open; PARTIAL; (); 
*                                (LET  type_1153 = MU((vdt_bar_1031=SUM(0,1)(vdt_foo_1032), vdt_foo_1032=SUM(0,1)(vdt_bar_1031)))
*                                      type_1154 = type_1153.2
*                                      type_1157 = MU((vdt_bar_1029=SUM(0,1)(vdt_foo_1030), vdt_foo_1030=SUM(0,1)(vdt_bar_1029)))
*                                      type_1158 = type_1157.2
*                                      type_1159 = RECORD[1, 2](type_1154, type_1158)
*                                 IN   type_1159
*                                 END); 0; 
*                                LET  type_1161 = MU_NR((_1033=SUM(2,2)(CREC{})))
*                                     type_1162 = type_1161.1
*                                IN   type_1162
*                                END)
*                 type_1164 = RECORD[1, 2](type_1150, type_1163)
*            IN   type_1164
*            END)
poly+Ebar_INT_r_1061:          ALLARROW(Open; TOTAL; (mpoly_var_c_1062 :: REC_K{'a > 'a_1064 :  TYPE}); 
*            (DEP_RECORD[ ]); 0; 
*            LET  type_1175 = ALLARROW(Open; PARTIAL; (); 
*                                (LET  type_1167 = mpoly_var_c_1062.'a
*                                      type_1168 = APP(_1041,(type_1167))
*                                      type_1169 = mpoly_var_c_1062.'a
*                                      type_1170 = APP(_1041,(type_1169))
*                                      type_1171 = RECORD[1, 2](type_1168, type_1170)
*                                 IN   type_1171
*                                 END); 0; 
*                                LET  type_1173 = MU_NR((_1070=SUM(2,2)(CREC{})))
*                                     type_1174 = type_1173.1
*                                IN   type_1174
*                                END)
*            IN   type_1175
*            END)
mpoly_var_r_1063:DEP_RECORD[ ]

XXXX exp_analyze 12 exp = mpoly_var_r_1063
XXXX exp_analyze 12 con = DEP_RECORD[ ]
exp_valid called with expression =
mpoly_var_r_1063

exp_valid returned
XXXX exp_analyze 12 con' = DEP_RECORD[ ]
XXXX exp_analyze 12 -----------------------------
exp_valid returned
bnd_valid returned
bnd_valid called with bnd =
v1_1166 : Unknown = select[1][](_1165)

exp_valid called with expression =
select[1][](_1165)

exp_valid called with expression =
_1165

exp_valid returned
exp_valid returned
bnd_valid returned
exp_valid called with expression =
v1_1166

exp_valid returned
exp_valid returned
XXXX exp_analyze 11 con' =           ALLARROW(Open; PARTIAL; (); 
*            (LET  type_1230 = MU((vdt_bar_1228=SUM(0,1)(vdt_foo_1229), vdt_foo_1229=SUM(0,1)(vdt_bar_1228)))
*                  type_1231 = type_1230.1
*                  type_1234 = MU((vdt_bar_1232=SUM(0,1)(vdt_foo_1233), vdt_foo_1233=SUM(0,1)(vdt_bar_1232)))
*                  type_1235 = type_1234.1
*                  type_1236 = RECORD[1, 2](type_1231, type_1235)
*             IN   type_1236
*             END); 0; 
*            LET  type_1237 = MU_NR((_1038=SUM(2,2)(CREC{})))
*                 type_1238 = type_1237.1
*            IN   type_1238
*            END)
XXXX exp_analyze 11 -----------------------------
XXXX finding path1
XXXX finding path2
XXXX finding path2
XXXX finding path1
XXXX finding path2
XXXX finding path1
XXXX finding path2
XXXX done
bnd_valid returned
bnd_valid called with bnd =
          /LEAF\poly+Efoo_INT_r_1073
*           (mpoly_var_c_1074 :: REC_K{'a > 'a_1076 :  TYPE} ;; mpoly_var_r_1075 : Unknown : DEP_RECORD[ ] ;; )
*         =>LET  type_1186 = ALLARROW(Open; PARTIAL; (); 
*                               (LET  type_1178 = mpoly_var_c_1074.'a
*                                     type_1179 = APP(_1044,(type_1178))
*                                     type_1180 = mpoly_var_c_1074.'a
*                                     type_1181 = APP(_1044,(type_1180))
*                                     type_1182 = RECORD[1, 2](type_1179, type_1181)
*                                IN   type_1182
*                                END); 0; 
*                               LET  type_1184 = MU_NR((_1082=SUM(2,2)(CREC{})))
*                                    type_1185 = type_1184.1
*                               IN   type_1185
*                               END)
*           IN   type_1186
*           END =
*         Let  _1176 : Unknown = App_Open(_bar_foo_eq_r_993;  mpoly_var_c_1074; mpoly_var_r_1075;  )
*              v2_1177 : Unknown = select[2][](_1176)
*         In   v2_1177
*         End

XXXX getting function types
XXXX analyzing bnd_types
kind_valid called with kind =
REC_K{'a > 'a_1076 :  TYPE}

kind_valid called with kind =
TYPE

kind_valid returned
kind_valid returned
con_valid called with constructor =
          ALLARROW(Open; PARTIAL; (); 
*            (LET  type_1178 = mpoly_var_c_1074.'a
*                  type_1179 = APP(_1044,(type_1178))
*                  type_1180 = mpoly_var_c_1074.'a
*                  type_1181 = APP(_1044,(type_1180))
*                  type_1182 = RECORD[1, 2](type_1179, type_1181)
*             IN   type_1182
*             END); 0; 
*            LET  type_1184 = MU_NR((_1082=SUM(2,2)(CREC{})))
*                 type_1185 = type_1184.1
*            IN   type_1185
*            END)

con_valid called with constructor =
mpoly_var_c_1074.'a

con_valid called with constructor =
mpoly_var_c_1074

con_valid returned
con_valid returned
con_valid called with constructor =
APP(_1044,(type_1178))

con_valid called with constructor =
_1044

con_valid returned
con_valid returned
con_valid called with constructor =
mpoly_var_c_1074.'a

con_valid called with constructor =
mpoly_var_c_1074

con_valid returned
con_valid returned
con_valid called with constructor =
APP(_1044,(type_1180))

con_valid called with constructor =
_1044

con_valid returned
con_valid returned
con_valid called with constructor =
RECORD[1, 2](type_1179, type_1181)

con_valid returned
con_valid called with constructor =
MU_NR((_1082=SUM(2,2)(CREC{})))

con_valid returned
con_valid called with constructor =
type_1184.1

con_valid called with constructor =
type_1184

con_valid returned
con_valid returned
con_valid returned
XXXX building up context
XXXX checking defs
XXXX exp_analyze 13 -----------------------------
XXXX exp_analyze 13 context = 
 Constructor variables, kinds, and equations are :
mpoly_var_c_1074::REC_K{'a > 'a_1076 :  TYPE}
_1058 =           LET  _1058 =  FUN('a_1057 ::  TYPE) = SUM(0,1)(APP(_1050,('a_1057)))
*         IN   _1058
*         END::Arrow_k(Open; 'a_1057 : TYPE; SINGLE_TYPE(SUM(0,1)(APP(_1050,('a_1057)))))
_1055 =           LET  _1055 =  FUN('a_1052 ::  TYPE) = SUM(0,1)(APP(_1047,('a_1052)))
*         IN   _1055
*         END::Arrow_k(Open; 'a_1052 : TYPE; SINGLE_TYPE(SUM(0,1)(APP(_1047,('a_1052)))))
_1050 =           LET  _1050 =  FUN('a_1049 ::  TYPE) = APP(_1041,('a_1049))
*         IN   _1050
*         END::Arrow_k(Open; 'a_1049 : TYPE; SINGLE_TYPE(APP(_1041,('a_1049))))
_1047 =           LET  _1047 =  FUN('a_1046 ::  TYPE) = APP(_1044,('a_1046))
*         IN   _1047
*         END::Arrow_k(Open; 'a_1046 : TYPE; SINGLE_TYPE(APP(_1044,('a_1046))))
_1044 =           LET  _1044 =  FUN('a_1043 ::  TYPE) = PROJ(APP(_990,('a_1043)),2)
*         IN   _1044
*         END::Arrow_k(Open; 'a_1043 : TYPE; SINGLE_TYPE(PROJ(APP(_990,('a_1043)),2)))
_1041 =           LET  _1041 =  FUN('a_1040 ::  TYPE) = PROJ(APP(_990,('a_1040)),1)
*         IN   _1041
*         END::Arrow_k(Open; 'a_1040 : TYPE; SINGLE_TYPE(PROJ(APP(_990,('a_1040)),1)))
_990 =           LET  _990 =  FUN('a_987 ::  TYPE) = MU((vdt_bar_988=SUM(0,1)(vdt_foo_989), vdt_foo_989=SUM(0,1)(vdt_bar_988)))
*         IN   _990
*         END::          Arrow_k(Open; 'a_987 : TYPE; REC_K{1 > vdt_bar_1206 : 
*                                            SINGLE_TYPE(PROJ(MU((vdt_bar_988=SUM(0,1)(vdt_foo_989),
*                                                                 vdt_foo_989=SUM(0,1)(vdt_bar_988))),1)),
*                                            2 > vdt_foo_1207 : 
*                                            SINGLE_TYPE(PROJ(MU((vdt_bar_988=SUM(0,1)(vdt_foo_989),
*                                                                 vdt_foo_989=SUM(0,1)(vdt_bar_988))),2))})

 Expression variables and constructors are :
_bar_foo_eq_r_993:          ALLARROW(Open; TOTAL; (mpoly_var_c_994 :: REC_K{'a > 'a_996 :  TYPE}); 
*            (DEP_RECORD[ ]); 0; 
*            LET  type_1150 = ALLARROW(Open; PARTIAL; (); 
*                                (LET  type_1140 = MU((vdt_bar_1036=SUM(0,1)(vdt_foo_1037), vdt_foo_1037=SUM(0,1)(vdt_bar_1036)))
*                                      type_1141 = type_1140.1
*                                      type_1144 = MU((vdt_bar_1034=SUM(0,1)(vdt_foo_1035), vdt_foo_1035=SUM(0,1)(vdt_bar_1034)))
*                                      type_1145 = type_1144.1
*                                      type_1146 = RECORD[1, 2](type_1141, type_1145)
*                                 IN   type_1146
*                                 END); 0; 
*                                LET  type_1148 = MU_NR((_1038=SUM(2,2)(CREC{})))
*                                     type_1149 = type_1148.1
*                                IN   type_1149
*                                END)
*                 type_1163 = ALLARROW(Open; PARTIAL; (); 
*                                (LET  type_1153 = MU((vdt_bar_1031=SUM(0,1)(vdt_foo_1032), vdt_foo_1032=SUM(0,1)(vdt_bar_1031)))
*                                      type_1154 = type_1153.2
*                                      type_1157 = MU((vdt_bar_1029=SUM(0,1)(vdt_foo_1030), vdt_foo_1030=SUM(0,1)(vdt_bar_1029)))
*                                      type_1158 = type_1157.2
*                                      type_1159 = RECORD[1, 2](type_1154, type_1158)
*                                 IN   type_1159
*                                 END); 0; 
*                                LET  type_1161 = MU_NR((_1033=SUM(2,2)(CREC{})))
*                                     type_1162 = type_1161.1
*                                IN   type_1162
*                                END)
*                 type_1164 = RECORD[1, 2](type_1150, type_1163)
*            IN   type_1164
*            END)
poly+Ebar_INT_r_1061:          ALLARROW(Open; TOTAL; (mpoly_var_c_1062 :: REC_K{'a > 'a_1064 :  TYPE}); 
*            (DEP_RECORD[ ]); 0; 
*            LET  type_1175 = ALLARROW(Open; PARTIAL; (); 
*                                (LET  type_1167 = mpoly_var_c_1062.'a
*                                      type_1168 = APP(_1041,(type_1167))
*                                      type_1169 = mpoly_var_c_1062.'a
*                                      type_1170 = APP(_1041,(type_1169))
*                                      type_1171 = RECORD[1, 2](type_1168, type_1170)
*                                 IN   type_1171
*                                 END); 0; 
*                                LET  type_1173 = MU_NR((_1070=SUM(2,2)(CREC{})))
*                                     type_1174 = type_1173.1
*                                IN   type_1174
*                                END)
*            IN   type_1175
*            END)
poly+Efoo_INT_r_1073:          ALLARROW(Open; TOTAL; (mpoly_var_c_1074 :: REC_K{'a > 'a_1076 :  TYPE}); 
*            (DEP_RECORD[ ]); 0; 
*            LET  type_1186 = ALLARROW(Open; PARTIAL; (); 
*                                (LET  type_1178 = mpoly_var_c_1074.'a
*                                      type_1179 = APP(_1044,(type_1178))
*                                      type_1180 = mpoly_var_c_1074.'a
*                                      type_1181 = APP(_1044,(type_1180))
*                                      type_1182 = RECORD[1, 2](type_1179, type_1181)
*                                 IN   type_1182
*                                 END); 0; 
*                                LET  type_1184 = MU_NR((_1082=SUM(2,2)(CREC{})))
*                                     type_1185 = type_1184.1
*                                IN   type_1185
*                                END)
*            IN   type_1186
*            END)
mpoly_var_r_1075:DEP_RECORD[ ]

XXXX exp_analyze 13 exp =           Let  _1176 : Unknown = App_Open(_bar_foo_eq_r_993;  mpoly_var_c_1074; mpoly_var_r_1075;  )
*              v2_1177 : Unknown = select[2][](_1176)
*         In   v2_1177
*         End
XXXX exp_analyze 13 con =           LET  type_1186 = ALLARROW(Open; PARTIAL; (); 
*                             (LET  type_1178 = mpoly_var_c_1074.'a
*                                   type_1179 = APP(_1044,(type_1178))
*                                   type_1180 = mpoly_var_c_1074.'a
*                                   type_1181 = APP(_1044,(type_1180))
*                                   type_1182 = RECORD[1, 2](type_1179, type_1181)
*                              IN   type_1182
*                              END); 0; 
*                             LET  type_1184 = MU_NR((_1082=SUM(2,2)(CREC{})))
*                                  type_1185 = type_1184.1
*                             IN   type_1185
*                             END)
*         IN   type_1186
*         END
exp_valid called with expression =
          Let  _1176 : Unknown = App_Open(_bar_foo_eq_r_993;  mpoly_var_c_1074; mpoly_var_r_1075;  )
*              v2_1177 : Unknown = select[2][](_1176)
*         In   v2_1177
*         End

bnd_valid called with bnd =
_1176 : Unknown = App_Open(_bar_foo_eq_r_993;  mpoly_var_c_1074; mpoly_var_r_1075;  )

exp_valid called with expression =
App_Open(_bar_foo_eq_r_993;  mpoly_var_c_1074; mpoly_var_r_1075;  )

exp_valid called with expression =
_bar_foo_eq_r_993

exp_valid returned
XXXX exp_analyze 14 -----------------------------
XXXX exp_analyze 14 context = 
 Constructor variables, kinds, and equations are :
mpoly_var_c_994 = mpoly_var_c_1074::REC_K{'a > 'a_996 :  TYPE}
mpoly_var_c_1074::REC_K{'a > 'a_1076 :  TYPE}
_1058 =           LET  _1058 =  FUN('a_1057 ::  TYPE) = SUM(0,1)(APP(_1050,('a_1057)))
*         IN   _1058
*         END::Arrow_k(Open; 'a_1057 : TYPE; SINGLE_TYPE(SUM(0,1)(APP(_1050,('a_1057)))))
_1055 =           LET  _1055 =  FUN('a_1052 ::  TYPE) = SUM(0,1)(APP(_1047,('a_1052)))
*         IN   _1055
*         END::Arrow_k(Open; 'a_1052 : TYPE; SINGLE_TYPE(SUM(0,1)(APP(_1047,('a_1052)))))
_1050 =           LET  _1050 =  FUN('a_1049 ::  TYPE) = APP(_1041,('a_1049))
*         IN   _1050
*         END::Arrow_k(Open; 'a_1049 : TYPE; SINGLE_TYPE(APP(_1041,('a_1049))))
_1047 =           LET  _1047 =  FUN('a_1046 ::  TYPE) = APP(_1044,('a_1046))
*         IN   _1047
*         END::Arrow_k(Open; 'a_1046 : TYPE; SINGLE_TYPE(APP(_1044,('a_1046))))
_1044 =           LET  _1044 =  FUN('a_1043 ::  TYPE) = PROJ(APP(_990,('a_1043)),2)
*         IN   _1044
*         END::Arrow_k(Open; 'a_1043 : TYPE; SINGLE_TYPE(PROJ(APP(_990,('a_1043)),2)))
_1041 =           LET  _1041 =  FUN('a_1040 ::  TYPE) = PROJ(APP(_990,('a_1040)),1)
*         IN   _1041
*         END::Arrow_k(Open; 'a_1040 : TYPE; SINGLE_TYPE(PROJ(APP(_990,('a_1040)),1)))
_990 =           LET  _990 =  FUN('a_987 ::  TYPE) = MU((vdt_bar_988=SUM(0,1)(vdt_foo_989), vdt_foo_989=SUM(0,1)(vdt_bar_988)))
*         IN   _990
*         END::          Arrow_k(Open; 'a_987 : TYPE; REC_K{1 > vdt_bar_1206 : 
*                                            SINGLE_TYPE(PROJ(MU((vdt_bar_988=SUM(0,1)(vdt_foo_989),
*                                                                 vdt_foo_989=SUM(0,1)(vdt_bar_988))),1)),
*                                            2 > vdt_foo_1207 : 
*                                            SINGLE_TYPE(PROJ(MU((vdt_bar_988=SUM(0,1)(vdt_foo_989),
*                                                                 vdt_foo_989=SUM(0,1)(vdt_bar_988))),2))})

 Expression variables and constructors are :
_bar_foo_eq_r_993:          ALLARROW(Open; TOTAL; (mpoly_var_c_994 :: REC_K{'a > 'a_996 :  TYPE}); 
*            (DEP_RECORD[ ]); 0; 
*            LET  type_1150 = ALLARROW(Open; PARTIAL; (); 
*                                (LET  type_1140 = MU((vdt_bar_1036=SUM(0,1)(vdt_foo_1037), vdt_foo_1037=SUM(0,1)(vdt_bar_1036)))
*                                      type_1141 = type_1140.1
*                                      type_1144 = MU((vdt_bar_1034=SUM(0,1)(vdt_foo_1035), vdt_foo_1035=SUM(0,1)(vdt_bar_1034)))
*                                      type_1145 = type_1144.1
*                                      type_1146 = RECORD[1, 2](type_1141, type_1145)
*                                 IN   type_1146
*                                 END); 0; 
*                                LET  type_1148 = MU_NR((_1038=SUM(2,2)(CREC{})))
*                                     type_1149 = type_1148.1
*                                IN   type_1149
*                                END)
*                 type_1163 = ALLARROW(Open; PARTIAL; (); 
*                                (LET  type_1153 = MU((vdt_bar_1031=SUM(0,1)(vdt_foo_1032), vdt_foo_1032=SUM(0,1)(vdt_bar_1031)))
*                                      type_1154 = type_1153.2
*                                      type_1157 = MU((vdt_bar_1029=SUM(0,1)(vdt_foo_1030), vdt_foo_1030=SUM(0,1)(vdt_bar_1029)))
*                                      type_1158 = type_1157.2
*                                      type_1159 = RECORD[1, 2](type_1154, type_1158)
*                                 IN   type_1159
*                                 END); 0; 
*                                LET  type_1161 = MU_NR((_1033=SUM(2,2)(CREC{})))
*                                     type_1162 = type_1161.1
*                                IN   type_1162
*                                END)
*                 type_1164 = RECORD[1, 2](type_1150, type_1163)
*            IN   type_1164
*            END)
poly+Ebar_INT_r_1061:          ALLARROW(Open; TOTAL; (mpoly_var_c_1062 :: REC_K{'a > 'a_1064 :  TYPE}); 
*            (DEP_RECORD[ ]); 0; 
*            LET  type_1175 = ALLARROW(Open; PARTIAL; (); 
*                                (LET  type_1167 = mpoly_var_c_1062.'a
*                                      type_1168 = APP(_1041,(type_1167))
*                                      type_1169 = mpoly_var_c_1062.'a
*                                      type_1170 = APP(_1041,(type_1169))
*                                      type_1171 = RECORD[1, 2](type_1168, type_1170)
*                                 IN   type_1171
*                                 END); 0; 
*                                LET  type_1173 = MU_NR((_1070=SUM(2,2)(CREC{})))
*                                     type_1174 = type_1173.1
*                                IN   type_1174
*                                END)
*            IN   type_1175
*            END)
poly+Efoo_INT_r_1073:          ALLARROW(Open; TOTAL; (mpoly_var_c_1074 :: REC_K{'a > 'a_1076 :  TYPE}); 
*            (DEP_RECORD[ ]); 0; 
*            LET  type_1186 = ALLARROW(Open; PARTIAL; (); 
*                                (LET  type_1178 = mpoly_var_c_1074.'a
*                                      type_1179 = APP(_1044,(type_1178))
*                                      type_1180 = mpoly_var_c_1074.'a
*                                      type_1181 = APP(_1044,(type_1180))
*                                      type_1182 = RECORD[1, 2](type_1179, type_1181)
*                                 IN   type_1182
*                                 END); 0; 
*                                LET  type_1184 = MU_NR((_1082=SUM(2,2)(CREC{})))
*                                     type_1185 = type_1184.1
*                                IN   type_1185
*                                END)
*            IN   type_1186
*            END)
mpoly_var_r_1075:DEP_RECORD[ ]

XXXX exp_analyze 14 exp = mpoly_var_r_1075
XXXX exp_analyze 14 con = DEP_RECORD[ ]
exp_valid called with expression =
mpoly_var_r_1075

exp_valid returned
XXXX exp_analyze 14 con' = DEP_RECORD[ ]
XXXX exp_analyze 14 -----------------------------
exp_valid returned
bnd_valid returned
bnd_valid called with bnd =
v2_1177 : Unknown = select[2][](_1176)

exp_valid called with expression =
select[2][](_1176)

exp_valid called with expression =
_1176

exp_valid returned
exp_valid returned
bnd_valid returned
exp_valid called with expression =
v2_1177

exp_valid returned
exp_valid returned
XXXX exp_analyze 13 con' =           ALLARROW(Open; PARTIAL; (); 
*            (LET  type_1270 = MU((vdt_bar_1268=SUM(0,1)(vdt_foo_1269), vdt_foo_1269=SUM(0,1)(vdt_bar_1268)))
*                  type_1271 = type_1270.2
*                  type_1274 = MU((vdt_bar_1272=SUM(0,1)(vdt_foo_1273), vdt_foo_1273=SUM(0,1)(vdt_bar_1272)))
*                  type_1275 = type_1274.2
*                  type_1276 = RECORD[1, 2](type_1271, type_1275)
*             IN   type_1276
*             END); 0; 
*            LET  type_1277 = MU_NR((_1033=SUM(2,2)(CREC{})))
*                 type_1278 = type_1277.1
*            IN   type_1278
*            END)
XXXX exp_analyze 13 -----------------------------
XXXX finding path1
XXXX finding path2
XXXX finding path2
XXXX finding path1
XXXX finding path2
XXXX finding path1
XXXX finding path2
XXXX done
bnd_valid returned
  Done validating module
exp_valid called with expression =
poly+Efoo_INT_r_1073

exp_valid returned
exp_valid called with expression =
poly+Ebar_INT_r_1061

exp_valid returned
con_valid called with constructor =
_1058

con_valid returned
con_valid called with constructor =
_1055

con_valid returned
con_valid called with constructor =
_1050

con_valid returned
con_valid called with constructor =
_1047

con_valid returned
con_valid called with constructor =
_1044

con_valid returned
con_valid called with constructor =
_1041

con_valid returned
exp_valid called with expression =
_bar_foo_eq_r_993

exp_valid returned
con_valid called with constructor =
_990

con_valid returned
  Done validating exports
module_valid returned
===== Starting Vararg: Nilbug                            =====
PASS: Vararg
Vararg

          [_990 =  FUN('a_987 ::  TYPE) = MU((vdt_bar_988=SUM(0,1)(vdt_foo_989), vdt_foo_989=SUM(0,1)(vdt_bar_988))),
*          _1041 =  FUN('a_1040 ::  TYPE) = PROJ(APP(_990,('a_1040)),1),
*          _1044 =  FUN('a_1043 ::  TYPE) = PROJ(APP(_990,('a_1043)),2),
*          _1047 =  FUN('a_1046 ::  TYPE) = APP(_1044,('a_1046)),
*          _1050 =  FUN('a_1049 ::  TYPE) = APP(_1041,('a_1049)),
*          _1055 =  FUN('a_1052 ::  TYPE) = SUM(0,1)(APP(_1047,('a_1052))),
*          _1058 =  FUN('a_1057 ::  TYPE) = SUM(0,1)(APP(_1050,('a_1057))),
*          /LEAF\_bar_foo_eq_r_993
*            (mpoly_var_c_994 :: REC_K{'a > 'a_996 :  TYPE} ;; mpoly_var_r_995 : Unknown : DEP_RECORD[ ] ;; )
*          =>LET  type_1150 = ALLARROW(Open; PARTIAL; (); 
*                                (PROJ(MU((vdt_bar_1290=SUM(0,1)(vdt_foo_1291), vdt_foo_1291=SUM(0,1)(vdt_bar_1290))),1),
*                                 PROJ(MU((vdt_bar_1292=SUM(0,1)(vdt_foo_1293), vdt_foo_1293=SUM(0,1)(vdt_bar_1292))),1)); 0; 
*                                LET  type_1148 = MU_NR((_1038=SUM(2,2)(CREC{})))
*                                     type_1149 = type_1148.1
*                                IN   type_1149
*                                END)
*                 type_1163 = ALLARROW(Open; PARTIAL; (); 
*                                (PROJ(MU((vdt_bar_1298=SUM(0,1)(vdt_foo_1299), vdt_foo_1299=SUM(0,1)(vdt_bar_1298))),2),
*                                 PROJ(MU((vdt_bar_1300=SUM(0,1)(vdt_foo_1301), vdt_foo_1301=SUM(0,1)(vdt_bar_1300))),2)); 0; 
*                                LET  type_1161 = MU_NR((_1033=SUM(2,2)(CREC{})))
*                                     type_1162 = type_1161.1
*                                IN   type_1162
*                                END)
*                 type_1164 = RECORD[1, 2](type_1150, type_1163)
*            IN   type_1164
*            END =
*          Let  type_1087 = MU_NR((_997=SUM(2,2)(CREC{})))
*               type_1088 = type_1087.1
*               type_1091 = MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001)))
*               type_1093 = MU_NR((_999=SUM(2,2)(CREC{})))
*               type_1094 = type_1093.1
*               type_1095 = CREC{}
*               type_1096 = SUM(2,2)(type_1095)
*               _1097 : Unknown = inject_known_0[type_1096]()
*               false_1098 : Unknown = roll[type_1094](_1097)
*               /\ vars_eq_0_1004
*                 ( ;; v1_1304 : Unknown : type_1091.1, v2_1305 : Unknown : type_1091.1 ;; )
*               =>type_1088 =
*               Let  arg_pair_1006 : Unknown = record(1>v1_1304, 2>v2_1305)
*                    type_1099 = type_1091.2
*                    type_1100 = SUM(0,1)(type_1099)
*                    type_1101 = type_1091.1
*                    arg_pair_1_1102 : Unknown = select[1][](arg_pair_1006)
*                    eqargpair_1_1103 : Unknown = unroll[type_1101](arg_pair_1_1102)
*                    type_1104 = type_1091.1
*                    arg_pair_2_1105 : Unknown = select[2][](arg_pair_1006)
*                    eqargpair_2_1106 : Unknown = unroll[type_1104](arg_pair_2_1105)
*                    _1117 : Unknown = 
*                      SUM_SWITCH(eqargpair_1_1103: type_1100, 
*                           eqarg1_1013, 
*                           0: Unknown:: 
*                             Let  _1116 : Unknown = 
*                                    SUM_SWITCH(eqargpair_2_1106: type_1100, 
*                                         eqarg2_1014, 
*                                         0: Unknown:: 
*                                           Let  type_1110 = type_1091.2
*                                                type_1111 = SUM_0(0,1)(type_1110)
*                                                _1112 : Unknown = project_known0[type_1111](eqarg1_1013)
*                                                _1113 : Unknown = project_known0[type_1111](eqarg2_1014)
*                                                _1114 : Unknown = record(1>_1112, 2>_1113)
*                                                _1115 : Unknown = 
*                                                  Let  funarg_1309 : Unknown = _1114
*                                                       funarg_1_1310 : Unknown = select[1][](funarg_1309)
*                                                       funarg_2_1311 : Unknown = select[2][](funarg_1309)
*                                                       _1312 : Unknown = 
*                                                         App_Open(vars_eq_1_1005;  ; funarg_1_1310, funarg_2_1311;  )
*                                                  In   _1312
*                                                  End
*                                           In   _1115
*                                           End
*                                         DEFAULT = false_1098) : type_1088
*                             In   _1116
*                             End
*                           NODEFAULT) : type_1088
*               In   _1117
*               End
*               /\ vars_eq_1_1005
*                 ( ;; v1_1313 : Unknown : type_1091.2, v2_1314 : Unknown : type_1091.2 ;; )
*               =>type_1088 =
*               Let  arg_pair_1016 : Unknown = record(1>v1_1313, 2>v2_1314)
*                    type_1118 = type_1091.1
*                    type_1119 = SUM(0,1)(type_1118)
*                    type_1120 = type_1091.2
*                    arg_pair_1_1121 : Unknown = select[1][](arg_pair_1016)
*                    eqargpair_1_1122 : Unknown = unroll[type_1120](arg_pair_1_1121)
*                    type_1123 = type_1091.2
*                    arg_pair_2_1124 : Unknown = select[2][](arg_pair_1016)
*                    eqargpair_2_1125 : Unknown = unroll[type_1123](arg_pair_2_1124)
*                    _1136 : Unknown = 
*                      SUM_SWITCH(eqargpair_1_1122: type_1119, 
*                           eqarg1_1021, 
*                           0: Unknown:: 
*                             Let  _1135 : Unknown = 
*                                    SUM_SWITCH(eqargpair_2_1125: type_1119, 
*                                         eqarg2_1022, 
*                                         0: Unknown:: 
*                                           Let  type_1129 = type_1091.1
*                                                type_1130 = SUM_0(0,1)(type_1129)
*                                                _1131 : Unknown = project_known0[type_1130](eqarg1_1021)
*                                                _1132 : Unknown = project_known0[type_1130](eqarg2_1022)
*                                                _1133 : Unknown = record(1>_1131, 2>_1132)
*                                                _1134 : Unknown = 
*                                                  Let  funarg_1318 : Unknown = _1133
*                                                       funarg_1_1319 : Unknown = select[1][](funarg_1318)
*                                                       funarg_2_1320 : Unknown = select[2][](funarg_1318)
*                                                       _1321 : Unknown = 
*                                                         App_Open(vars_eq_0_1004;  ; funarg_1_1319, funarg_2_1320;  )
*                                                  In   _1321
*                                                  End
*                                           In   _1134
*                                           End
*                                         DEFAULT = false_1098) : type_1088
*                             In   _1135
*                             End
*                           NODEFAULT) : type_1088
*               In   _1136
*               End
*               top_eq_1137 : Unknown = record(1>vars_eq_0_1004, 2>vars_eq_1_1005)
*          In   top_eq_1137
*          End,
*          /LEAF\poly+Ebar_INT_r_1061
*            (mpoly_var_c_1062 :: REC_K{'a > 'a_1064 :  TYPE} ;; mpoly_var_r_1063 : Unknown : DEP_RECORD[ ] ;; )
*          =>LET  type_1175 = ALLARROW(Open; PARTIAL; (); 
*                                (APP(_1041,(mpoly_var_c_1062.'a)), APP(_1041,(mpoly_var_c_1062.'a))); 0; 
*                                LET  type_1173 = MU_NR((_1070=SUM(2,2)(CREC{})))
*                                     type_1174 = type_1173.1
*                                IN   type_1174
*                                END)
*            IN   type_1175
*            END =
*          Let  _1165 : Unknown = App_Open(_bar_foo_eq_r_993;  mpoly_var_c_1062; mpoly_var_r_1063;  )
*               v1_1166 : Unknown = select[1][](_1165)
*          In   v1_1166
*          End,
*          /LEAF\poly+Efoo_INT_r_1073
*            (mpoly_var_c_1074 :: REC_K{'a > 'a_1076 :  TYPE} ;; mpoly_var_r_1075 : Unknown : DEP_RECORD[ ] ;; )
*          =>LET  type_1186 = ALLARROW(Open; PARTIAL; (); 
*                                (APP(_1044,(mpoly_var_c_1074.'a)), APP(_1044,(mpoly_var_c_1074.'a))); 0; 
*                                LET  type_1184 = MU_NR((_1082=SUM(2,2)(CREC{})))
*                                     type_1185 = type_1184.1
*                                IN   type_1185
*                                END)
*            IN   type_1186
*            END =
*          Let  _1176 : Unknown = App_Open(_bar_foo_eq_r_993;  mpoly_var_c_1074; mpoly_var_r_1075;  )
*               v2_1177 : Unknown = select[2][](_1176)
*          In   v2_1177
*          End]
*         IMPORTS:
*         
*         EXPORTS:
*         +Efoo_INT_r = poly+Efoo_INT_r_1073
*         +Ebar_INT_r = poly+Ebar_INT_r_1061
*         foo_sum = _1058
*         bar_sum = _1055
*         foo_sumarg = _1050
*         bar_sumarg = _1047
*         foo = _1044
*         bar = _1041
*         _bar_foo_eq_TYC_r = _bar_foo_eq_r_993
*         +Q_bar_foo = _990
*         
===== Starting TypecheckBetweenOpts: Nilbug              =====
module_valid called with module =
PASS: 


          [_990 =  FUN('a_987 ::  TYPE) = MU((vdt_bar_988=SUM(0,1)(vdt_foo_989), vdt_foo_989=SUM(0,1)(vdt_bar_988))),
*          _1041 =  FUN('a_1040 ::  TYPE) = PROJ(APP(_990,('a_1040)),1),
*          _1044 =  FUN('a_1043 ::  TYPE) = PROJ(APP(_990,('a_1043)),2),
*          _1047 =  FUN('a_1046 ::  TYPE) = APP(_1044,('a_1046)),
*          _1050 =  FUN('a_1049 ::  TYPE) = APP(_1041,('a_1049)),
*          _1055 =  FUN('a_1052 ::  TYPE) = SUM(0,1)(APP(_1047,('a_1052))),
*          _1058 =  FUN('a_1057 ::  TYPE) = SUM(0,1)(APP(_1050,('a_1057))),
*          /LEAF\_bar_foo_eq_r_993
*            (mpoly_var_c_994 :: REC_K{'a > 'a_996 :  TYPE} ;; mpoly_var_r_995 : Unknown : DEP_RECORD[ ] ;; )
*          =>LET  type_1150 = ALLARROW(Open; PARTIAL; (); 
*                                (PROJ(MU((vdt_bar_1290=SUM(0,1)(vdt_foo_1291), vdt_foo_1291=SUM(0,1)(vdt_bar_1290))),1),
*                                 PROJ(MU((vdt_bar_1292=SUM(0,1)(vdt_foo_1293), vdt_foo_1293=SUM(0,1)(vdt_bar_1292))),1)); 0; 
*                                LET  type_1148 = MU_NR((_1038=SUM(2,2)(CREC{})))
*                                     type_1149 = type_1148.1
*                                IN   type_1149
*                                END)
*                 type_1163 = ALLARROW(Open; PARTIAL; (); 
*                                (PROJ(MU((vdt_bar_1298=SUM(0,1)(vdt_foo_1299), vdt_foo_1299=SUM(0,1)(vdt_bar_1298))),2),
*                                 PROJ(MU((vdt_bar_1300=SUM(0,1)(vdt_foo_1301), vdt_foo_1301=SUM(0,1)(vdt_bar_1300))),2)); 0; 
*                                LET  type_1161 = MU_NR((_1033=SUM(2,2)(CREC{})))
*                                     type_1162 = type_1161.1
*                                IN   type_1162
*                                END)
*                 type_1164 = RECORD[1, 2](type_1150, type_1163)
*            IN   type_1164
*            END =
*          Let  type_1087 = MU_NR((_997=SUM(2,2)(CREC{})))
*               type_1088 = type_1087.1
*               type_1091 = MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001)))
*               type_1093 = MU_NR((_999=SUM(2,2)(CREC{})))
*               type_1094 = type_1093.1
*               type_1095 = CREC{}
*               type_1096 = SUM(2,2)(type_1095)
*               _1097 : Unknown = inject_known_0[type_1096]()
*               false_1098 : Unknown = roll[type_1094](_1097)
*               /\ vars_eq_0_1004
*                 ( ;; v1_1304 : Unknown : type_1091.1, v2_1305 : Unknown : type_1091.1 ;; )
*               =>type_1088 =
*               Let  arg_pair_1006 : Unknown = record(1>v1_1304, 2>v2_1305)
*                    type_1099 = type_1091.2
*                    type_1100 = SUM(0,1)(type_1099)
*                    type_1101 = type_1091.1
*                    arg_pair_1_1102 : Unknown = select[1][](arg_pair_1006)
*                    eqargpair_1_1103 : Unknown = unroll[type_1101](arg_pair_1_1102)
*                    type_1104 = type_1091.1
*                    arg_pair_2_1105 : Unknown = select[2][](arg_pair_1006)
*                    eqargpair_2_1106 : Unknown = unroll[type_1104](arg_pair_2_1105)
*                    _1117 : Unknown = 
*                      SUM_SWITCH(eqargpair_1_1103: type_1100, 
*                           eqarg1_1013, 
*                           0: Unknown:: 
*                             Let  _1116 : Unknown = 
*                                    SUM_SWITCH(eqargpair_2_1106: type_1100, 
*                                         eqarg2_1014, 
*                                         0: Unknown:: 
*                                           Let  type_1110 = type_1091.2
*                                                type_1111 = SUM_0(0,1)(type_1110)
*                                                _1112 : Unknown = project_known0[type_1111](eqarg1_1013)
*                                                _1113 : Unknown = project_known0[type_1111](eqarg2_1014)
*                                                _1114 : Unknown = record(1>_1112, 2>_1113)
*                                                _1115 : Unknown = 
*                                                  Let  funarg_1309 : Unknown = _1114
*                                                       funarg_1_1310 : Unknown = select[1][](funarg_1309)
*                                                       funarg_2_1311 : Unknown = select[2][](funarg_1309)
*                                                       _1312 : Unknown = 
*                                                         App_Open(vars_eq_1_1005;  ; funarg_1_1310, funarg_2_1311;  )
*                                                  In   _1312
*                                                  End
*                                           In   _1115
*                                           End
*                                         DEFAULT = false_1098) : type_1088
*                             In   _1116
*                             End
*                           NODEFAULT) : type_1088
*               In   _1117
*               End
*               /\ vars_eq_1_1005
*                 ( ;; v1_1313 : Unknown : type_1091.2, v2_1314 : Unknown : type_1091.2 ;; )
*               =>type_1088 =
*               Let  arg_pair_1016 : Unknown = record(1>v1_1313, 2>v2_1314)
*                    type_1118 = type_1091.1
*                    type_1119 = SUM(0,1)(type_1118)
*                    type_1120 = type_1091.2
*                    arg_pair_1_1121 : Unknown = select[1][](arg_pair_1016)
*                    eqargpair_1_1122 : Unknown = unroll[type_1120](arg_pair_1_1121)
*                    type_1123 = type_1091.2
*                    arg_pair_2_1124 : Unknown = select[2][](arg_pair_1016)
*                    eqargpair_2_1125 : Unknown = unroll[type_1123](arg_pair_2_1124)
*                    _1136 : Unknown = 
*                      SUM_SWITCH(eqargpair_1_1122: type_1119, 
*                           eqarg1_1021, 
*                           0: Unknown:: 
*                             Let  _1135 : Unknown = 
*                                    SUM_SWITCH(eqargpair_2_1125: type_1119, 
*                                         eqarg2_1022, 
*                                         0: Unknown:: 
*                                           Let  type_1129 = type_1091.1
*                                                type_1130 = SUM_0(0,1)(type_1129)
*                                                _1131 : Unknown = project_known0[type_1130](eqarg1_1021)
*                                                _1132 : Unknown = project_known0[type_1130](eqarg2_1022)
*                                                _1133 : Unknown = record(1>_1131, 2>_1132)
*                                                _1134 : Unknown = 
*                                                  Let  funarg_1318 : Unknown = _1133
*                                                       funarg_1_1319 : Unknown = select[1][](funarg_1318)
*                                                       funarg_2_1320 : Unknown = select[2][](funarg_1318)
*                                                       _1321 : Unknown = 
*                                                         App_Open(vars_eq_0_1004;  ; funarg_1_1319, funarg_2_1320;  )
*                                                  In   _1321
*                                                  End
*                                           In   _1134
*                                           End
*                                         DEFAULT = false_1098) : type_1088
*                             In   _1135
*                             End
*                           NODEFAULT) : type_1088
*               In   _1136
*               End
*               top_eq_1137 : Unknown = record(1>vars_eq_0_1004, 2>vars_eq_1_1005)
*          In   top_eq_1137
*          End,
*          /LEAF\poly+Ebar_INT_r_1061
*            (mpoly_var_c_1062 :: REC_K{'a > 'a_1064 :  TYPE} ;; mpoly_var_r_1063 : Unknown : DEP_RECORD[ ] ;; )
*          =>LET  type_1175 = ALLARROW(Open; PARTIAL; (); 
*                                (APP(_1041,(mpoly_var_c_1062.'a)), APP(_1041,(mpoly_var_c_1062.'a))); 0; 
*                                LET  type_1173 = MU_NR((_1070=SUM(2,2)(CREC{})))
*                                     type_1174 = type_1173.1
*                                IN   type_1174
*                                END)
*            IN   type_1175
*            END =
*          Let  _1165 : Unknown = App_Open(_bar_foo_eq_r_993;  mpoly_var_c_1062; mpoly_var_r_1063;  )
*               v1_1166 : Unknown = select[1][](_1165)
*          In   v1_1166
*          End,
*          /LEAF\poly+Efoo_INT_r_1073
*            (mpoly_var_c_1074 :: REC_K{'a > 'a_1076 :  TYPE} ;; mpoly_var_r_1075 : Unknown : DEP_RECORD[ ] ;; )
*          =>LET  type_1186 = ALLARROW(Open; PARTIAL; (); 
*                                (APP(_1044,(mpoly_var_c_1074.'a)), APP(_1044,(mpoly_var_c_1074.'a))); 0; 
*                                LET  type_1184 = MU_NR((_1082=SUM(2,2)(CREC{})))
*                                     type_1185 = type_1184.1
*                                IN   type_1185
*                                END)
*            IN   type_1186
*            END =
*          Let  _1176 : Unknown = App_Open(_bar_foo_eq_r_993;  mpoly_var_c_1074; mpoly_var_r_1075;  )
*               v2_1177 : Unknown = select[2][](_1176)
*          In   v2_1177
*          End]
*         IMPORTS:
*         
*         EXPORTS:
*         +Efoo_INT_r = poly+Efoo_INT_r_1073
*         +Ebar_INT_r = poly+Ebar_INT_r_1061
*         foo_sum = _1058
*         bar_sum = _1055
*         foo_sumarg = _1050
*         bar_sumarg = _1047
*         foo = _1044
*         bar = _1041
*         _bar_foo_eq_TYC_r = _bar_foo_eq_r_993
*         +Q_bar_foo = _990
*         

  Done checking context
  Done validating imports
bnd_valid called with bnd =
_990 =  FUN('a_987 ::  TYPE) = MU((vdt_bar_988=SUM(0,1)(vdt_foo_989), vdt_foo_989=SUM(0,1)(vdt_bar_988)))

kind_valid called with kind =
TYPE

kind_valid returned
con_valid called with constructor =
MU((vdt_bar_988=SUM(0,1)(vdt_foo_989), vdt_foo_989=SUM(0,1)(vdt_bar_988)))

con_valid returned
bnd_valid returned
bnd_valid called with bnd =
_1041 =  FUN('a_1040 ::  TYPE) = PROJ(APP(_990,('a_1040)),1)

kind_valid called with kind =
TYPE

kind_valid returned
con_valid called with constructor =
PROJ(APP(_990,('a_1040)),1)

con_valid called with constructor =
APP(_990,('a_1040))

con_valid called with constructor =
_990

con_valid returned
con_valid returned
con_valid returned
bnd_valid returned
bnd_valid called with bnd =
_1044 =  FUN('a_1043 ::  TYPE) = PROJ(APP(_990,('a_1043)),2)

kind_valid called with kind =
TYPE

kind_valid returned
con_valid called with constructor =
PROJ(APP(_990,('a_1043)),2)

con_valid called with constructor =
APP(_990,('a_1043))

con_valid called with constructor =
_990

con_valid returned
con_valid returned
con_valid returned
bnd_valid returned
bnd_valid called with bnd =
_1047 =  FUN('a_1046 ::  TYPE) = APP(_1044,('a_1046))

kind_valid called with kind =
TYPE

kind_valid returned
con_valid called with constructor =
APP(_1044,('a_1046))

con_valid called with constructor =
_1044

con_valid returned
con_valid returned
bnd_valid returned
bnd_valid called with bnd =
_1050 =  FUN('a_1049 ::  TYPE) = APP(_1041,('a_1049))

kind_valid called with kind =
TYPE

kind_valid returned
con_valid called with constructor =
APP(_1041,('a_1049))

con_valid called with constructor =
_1041

con_valid returned
con_valid returned
bnd_valid returned
bnd_valid called with bnd =
_1055 =  FUN('a_1052 ::  TYPE) = SUM(0,1)(APP(_1047,('a_1052)))

kind_valid called with kind =
TYPE

kind_valid returned
con_valid called with constructor =
SUM(0,1)(APP(_1047,('a_1052)))

con_valid called with constructor =
_1047

con_valid returned
con_valid returned
bnd_valid returned
bnd_valid called with bnd =
_1058 =  FUN('a_1057 ::  TYPE) = SUM(0,1)(APP(_1050,('a_1057)))

kind_valid called with kind =
TYPE

kind_valid returned
con_valid called with constructor =
SUM(0,1)(APP(_1050,('a_1057)))

con_valid called with constructor =
_1050

con_valid returned
con_valid returned
bnd_valid returned
bnd_valid called with bnd =
          /LEAF\_bar_foo_eq_r_993
*           (mpoly_var_c_994 :: REC_K{'a > 'a_996 :  TYPE} ;; mpoly_var_r_995 : Unknown : DEP_RECORD[ ] ;; )
*         =>LET  type_1150 = ALLARROW(Open; PARTIAL; (); 
*                               (PROJ(MU((vdt_bar_1290=SUM(0,1)(vdt_foo_1291), vdt_foo_1291=SUM(0,1)(vdt_bar_1290))),1),
*                                PROJ(MU((vdt_bar_1292=SUM(0,1)(vdt_foo_1293), vdt_foo_1293=SUM(0,1)(vdt_bar_1292))),1)); 0; 
*                               LET  type_1148 = MU_NR((_1038=SUM(2,2)(CREC{})))
*                                    type_1149 = type_1148.1
*                               IN   type_1149
*                               END)
*                type_1163 = ALLARROW(Open; PARTIAL; (); 
*                               (PROJ(MU((vdt_bar_1298=SUM(0,1)(vdt_foo_1299), vdt_foo_1299=SUM(0,1)(vdt_bar_1298))),2),
*                                PROJ(MU((vdt_bar_1300=SUM(0,1)(vdt_foo_1301), vdt_foo_1301=SUM(0,1)(vdt_bar_1300))),2)); 0; 
*                               LET  type_1161 = MU_NR((_1033=SUM(2,2)(CREC{})))
*                                    type_1162 = type_1161.1
*                               IN   type_1162
*                               END)
*                type_1164 = RECORD[1, 2](type_1150, type_1163)
*           IN   type_1164
*           END =
*         Let  type_1087 = MU_NR((_997=SUM(2,2)(CREC{})))
*              type_1088 = type_1087.1
*              type_1091 = MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001)))
*              type_1093 = MU_NR((_999=SUM(2,2)(CREC{})))
*              type_1094 = type_1093.1
*              type_1095 = CREC{}
*              type_1096 = SUM(2,2)(type_1095)
*              _1097 : Unknown = inject_known_0[type_1096]()
*              false_1098 : Unknown = roll[type_1094](_1097)
*              /\ vars_eq_0_1004
*                ( ;; v1_1304 : Unknown : type_1091.1, v2_1305 : Unknown : type_1091.1 ;; )
*              =>type_1088 =
*              Let  arg_pair_1006 : Unknown = record(1>v1_1304, 2>v2_1305)
*                   type_1099 = type_1091.2
*                   type_1100 = SUM(0,1)(type_1099)
*                   type_1101 = type_1091.1
*                   arg_pair_1_1102 : Unknown = select[1][](arg_pair_1006)
*                   eqargpair_1_1103 : Unknown = unroll[type_1101](arg_pair_1_1102)
*                   type_1104 = type_1091.1
*                   arg_pair_2_1105 : Unknown = select[2][](arg_pair_1006)
*                   eqargpair_2_1106 : Unknown = unroll[type_1104](arg_pair_2_1105)
*                   _1117 : Unknown = 
*                     SUM_SWITCH(eqargpair_1_1103: type_1100, 
*                          eqarg1_1013, 
*                          0: Unknown:: 
*                            Let  _1116 : Unknown = 
*                                   SUM_SWITCH(eqargpair_2_1106: type_1100, 
*                                        eqarg2_1014, 
*                                        0: Unknown:: 
*                                          Let  type_1110 = type_1091.2
*                                               type_1111 = SUM_0(0,1)(type_1110)
*                                               _1112 : Unknown = project_known0[type_1111](eqarg1_1013)
*                                               _1113 : Unknown = project_known0[type_1111](eqarg2_1014)
*                                               _1114 : Unknown = record(1>_1112, 2>_1113)
*                                               _1115 : Unknown = 
*                                                 Let  funarg_1309 : Unknown = _1114
*                                                      funarg_1_1310 : Unknown = select[1][](funarg_1309)
*                                                      funarg_2_1311 : Unknown = select[2][](funarg_1309)
*                                                      _1312 : Unknown = 
*                                                        App_Open(vars_eq_1_1005;  ; funarg_1_1310, funarg_2_1311;  )
*                                                 In   _1312
*                                                 End
*                                          In   _1115
*                                          End
*                                        DEFAULT = false_1098) : type_1088
*                            In   _1116
*                            End
*                          NODEFAULT) : type_1088
*              In   _1117
*              End
*              /\ vars_eq_1_1005
*                ( ;; v1_1313 : Unknown : type_1091.2, v2_1314 : Unknown : type_1091.2 ;; )
*              =>type_1088 =
*              Let  arg_pair_1016 : Unknown = record(1>v1_1313, 2>v2_1314)
*                   type_1118 = type_1091.1
*                   type_1119 = SUM(0,1)(type_1118)
*                   type_1120 = type_1091.2
*                   arg_pair_1_1121 : Unknown = select[1][](arg_pair_1016)
*                   eqargpair_1_1122 : Unknown = unroll[type_1120](arg_pair_1_1121)
*                   type_1123 = type_1091.2
*                   arg_pair_2_1124 : Unknown = select[2][](arg_pair_1016)
*                   eqargpair_2_1125 : Unknown = unroll[type_1123](arg_pair_2_1124)
*                   _1136 : Unknown = 
*                     SUM_SWITCH(eqargpair_1_1122: type_1119, 
*                          eqarg1_1021, 
*                          0: Unknown:: 
*                            Let  _1135 : Unknown = 
*                                   SUM_SWITCH(eqargpair_2_1125: type_1119, 
*                                        eqarg2_1022, 
*                                        0: Unknown:: 
*                                          Let  type_1129 = type_1091.1
*                                               type_1130 = SUM_0(0,1)(type_1129)
*                                               _1131 : Unknown = project_known0[type_1130](eqarg1_1021)
*                                               _1132 : Unknown = project_known0[type_1130](eqarg2_1022)
*                                               _1133 : Unknown = record(1>_1131, 2>_1132)
*                                               _1134 : Unknown = 
*                                                 Let  funarg_1318 : Unknown = _1133
*                                                      funarg_1_1319 : Unknown = select[1][](funarg_1318)
*                                                      funarg_2_1320 : Unknown = select[2][](funarg_1318)
*                                                      _1321 : Unknown = 
*                                                        App_Open(vars_eq_0_1004;  ; funarg_1_1319, funarg_2_1320;  )
*                                                 In   _1321
*                                                 End
*                                          In   _1134
*                                          End
*                                        DEFAULT = false_1098) : type_1088
*                            In   _1135
*                            End
*                          NODEFAULT) : type_1088
*              In   _1136
*              End
*              top_eq_1137 : Unknown = record(1>vars_eq_0_1004, 2>vars_eq_1_1005)
*         In   top_eq_1137
*         End

XXXX getting function types
XXXX analyzing bnd_types
kind_valid called with kind =
REC_K{'a > 'a_996 :  TYPE}

kind_valid called with kind =
TYPE

kind_valid returned
kind_valid returned
con_valid called with constructor =
          ALLARROW(Open; PARTIAL; (); 
*            (PROJ(MU((vdt_bar_1290=SUM(0,1)(vdt_foo_1291), vdt_foo_1291=SUM(0,1)(vdt_bar_1290))),1),
*             PROJ(MU((vdt_bar_1292=SUM(0,1)(vdt_foo_1293), vdt_foo_1293=SUM(0,1)(vdt_bar_1292))),1)); 0; 
*            LET  type_1148 = MU_NR((_1038=SUM(2,2)(CREC{})))
*                 type_1149 = type_1148.1
*            IN   type_1149
*            END)

con_valid called with constructor =
MU((vdt_bar_1290=SUM(0,1)(vdt_foo_1291), vdt_foo_1291=SUM(0,1)(vdt_bar_1290)))

con_valid returned
con_valid called with constructor =
MU((vdt_bar_1292=SUM(0,1)(vdt_foo_1293), vdt_foo_1293=SUM(0,1)(vdt_bar_1292)))

con_valid returned
con_valid called with constructor =
MU_NR((_1038=SUM(2,2)(CREC{})))

con_valid returned
con_valid called with constructor =
type_1148.1

con_valid called with constructor =
type_1148

con_valid returned
con_valid returned
con_valid returned
con_valid called with constructor =
          ALLARROW(Open; PARTIAL; (); 
*            (PROJ(MU((vdt_bar_1298=SUM(0,1)(vdt_foo_1299), vdt_foo_1299=SUM(0,1)(vdt_bar_1298))),2),
*             PROJ(MU((vdt_bar_1300=SUM(0,1)(vdt_foo_1301), vdt_foo_1301=SUM(0,1)(vdt_bar_1300))),2)); 0; 
*            LET  type_1161 = MU_NR((_1033=SUM(2,2)(CREC{})))
*                 type_1162 = type_1161.1
*            IN   type_1162
*            END)

con_valid called with constructor =
MU((vdt_bar_1298=SUM(0,1)(vdt_foo_1299), vdt_foo_1299=SUM(0,1)(vdt_bar_1298)))

con_valid returned
con_valid called with constructor =
MU((vdt_bar_1300=SUM(0,1)(vdt_foo_1301), vdt_foo_1301=SUM(0,1)(vdt_bar_1300)))

con_valid returned
con_valid called with constructor =
MU_NR((_1033=SUM(2,2)(CREC{})))

con_valid returned
con_valid called with constructor =
type_1161.1

con_valid called with constructor =
type_1161

con_valid returned
con_valid returned
con_valid returned
con_valid called with constructor =
RECORD[1, 2](type_1150, type_1163)

con_valid returned
XXXX building up context
XXXX checking defs
XXXX exp_analyze 15 -----------------------------
XXXX exp_analyze 15 context = 
 Constructor variables, kinds, and equations are :
mpoly_var_c_994::REC_K{'a > 'a_996 :  TYPE}
_1058 =           LET  _1058 =  FUN('a_1057 ::  TYPE) = SUM(0,1)(APP(_1050,('a_1057)))
*         IN   _1058
*         END::Arrow_k(Open; 'a_1057 : TYPE; SINGLE_TYPE(SUM(0,1)(APP(_1050,('a_1057)))))
_1055 =           LET  _1055 =  FUN('a_1052 ::  TYPE) = SUM(0,1)(APP(_1047,('a_1052)))
*         IN   _1055
*         END::Arrow_k(Open; 'a_1052 : TYPE; SINGLE_TYPE(SUM(0,1)(APP(_1047,('a_1052)))))
_1050 =           LET  _1050 =  FUN('a_1049 ::  TYPE) = APP(_1041,('a_1049))
*         IN   _1050
*         END::Arrow_k(Open; 'a_1049 : TYPE; SINGLE_TYPE(APP(_1041,('a_1049))))
_1047 =           LET  _1047 =  FUN('a_1046 ::  TYPE) = APP(_1044,('a_1046))
*         IN   _1047
*         END::Arrow_k(Open; 'a_1046 : TYPE; SINGLE_TYPE(APP(_1044,('a_1046))))
_1044 =           LET  _1044 =  FUN('a_1043 ::  TYPE) = PROJ(APP(_990,('a_1043)),2)
*         IN   _1044
*         END::Arrow_k(Open; 'a_1043 : TYPE; SINGLE_TYPE(PROJ(APP(_990,('a_1043)),2)))
_1041 =           LET  _1041 =  FUN('a_1040 ::  TYPE) = PROJ(APP(_990,('a_1040)),1)
*         IN   _1041
*         END::Arrow_k(Open; 'a_1040 : TYPE; SINGLE_TYPE(PROJ(APP(_990,('a_1040)),1)))
_990 =           LET  _990 =  FUN('a_987 ::  TYPE) = MU((vdt_bar_988=SUM(0,1)(vdt_foo_989), vdt_foo_989=SUM(0,1)(vdt_bar_988)))
*         IN   _990
*         END::          Arrow_k(Open; 'a_987 : TYPE; REC_K{1 > vdt_bar_1370 : 
*                                            SINGLE_TYPE(PROJ(MU((vdt_bar_988=SUM(0,1)(vdt_foo_989),
*                                                                 vdt_foo_989=SUM(0,1)(vdt_bar_988))),1)),
*                                            2 > vdt_foo_1371 : 
*                                            SINGLE_TYPE(PROJ(MU((vdt_bar_988=SUM(0,1)(vdt_foo_989),
*                                                                 vdt_foo_989=SUM(0,1)(vdt_bar_988))),2))})

 Expression variables and constructors are :
_bar_foo_eq_r_993:          ALLARROW(Open; TOTAL; (mpoly_var_c_994 :: REC_K{'a > 'a_996 :  TYPE}); 
*            (DEP_RECORD[ ]); 0; 
*            LET  type_1150 = ALLARROW(Open; PARTIAL; (); 
*                                (PROJ(MU((vdt_bar_1290=SUM(0,1)(vdt_foo_1291), vdt_foo_1291=SUM(0,1)(vdt_bar_1290))),1),
*                                 PROJ(MU((vdt_bar_1292=SUM(0,1)(vdt_foo_1293), vdt_foo_1293=SUM(0,1)(vdt_bar_1292))),1)); 0; 
*                                LET  type_1148 = MU_NR((_1038=SUM(2,2)(CREC{})))
*                                     type_1149 = type_1148.1
*                                IN   type_1149
*                                END)
*                 type_1163 = ALLARROW(Open; PARTIAL; (); 
*                                (PROJ(MU((vdt_bar_1298=SUM(0,1)(vdt_foo_1299), vdt_foo_1299=SUM(0,1)(vdt_bar_1298))),2),
*                                 PROJ(MU((vdt_bar_1300=SUM(0,1)(vdt_foo_1301), vdt_foo_1301=SUM(0,1)(vdt_bar_1300))),2)); 0; 
*                                LET  type_1161 = MU_NR((_1033=SUM(2,2)(CREC{})))
*                                     type_1162 = type_1161.1
*                                IN   type_1162
*                                END)
*                 type_1164 = RECORD[1, 2](type_1150, type_1163)
*            IN   type_1164
*            END)
mpoly_var_r_995:DEP_RECORD[ ]

XXXX exp_analyze 15 exp =           Let  type_1087 = MU_NR((_997=SUM(2,2)(CREC{})))
*              type_1088 = type_1087.1
*              type_1091 = MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001)))
*              type_1093 = MU_NR((_999=SUM(2,2)(CREC{})))
*              type_1094 = type_1093.1
*              type_1095 = CREC{}
*              type_1096 = SUM(2,2)(type_1095)
*              _1097 : Unknown = inject_known_0[type_1096]()
*              false_1098 : Unknown = roll[type_1094](_1097)
*              /\ vars_eq_0_1004
*                ( ;; v1_1304 : Unknown : type_1091.1, v2_1305 : Unknown : type_1091.1 ;; )
*              =>type_1088 =
*              Let  arg_pair_1006 : Unknown = record(1>v1_1304, 2>v2_1305)
*                   type_1099 = type_1091.2
*                   type_1100 = SUM(0,1)(type_1099)
*                   type_1101 = type_1091.1
*                   arg_pair_1_1102 : Unknown = select[1][](arg_pair_1006)
*                   eqargpair_1_1103 : Unknown = unroll[type_1101](arg_pair_1_1102)
*                   type_1104 = type_1091.1
*                   arg_pair_2_1105 : Unknown = select[2][](arg_pair_1006)
*                   eqargpair_2_1106 : Unknown = unroll[type_1104](arg_pair_2_1105)
*                   _1117 : Unknown = 
*                     SUM_SWITCH(eqargpair_1_1103: type_1100, 
*                          eqarg1_1013, 
*                          0: Unknown:: 
*                            Let  _1116 : Unknown = 
*                                   SUM_SWITCH(eqargpair_2_1106: type_1100, 
*                                        eqarg2_1014, 
*                                        0: Unknown:: 
*                                          Let  type_1110 = type_1091.2
*                                               type_1111 = SUM_0(0,1)(type_1110)
*                                               _1112 : Unknown = project_known0[type_1111](eqarg1_1013)
*                                               _1113 : Unknown = project_known0[type_1111](eqarg2_1014)
*                                               _1114 : Unknown = record(1>_1112, 2>_1113)
*                                               _1115 : Unknown = 
*                                                 Let  funarg_1309 : Unknown = _1114
*                                                      funarg_1_1310 : Unknown = select[1][](funarg_1309)
*                                                      funarg_2_1311 : Unknown = select[2][](funarg_1309)
*                                                      _1312 : Unknown = 
*                                                        App_Open(vars_eq_1_1005;  ; funarg_1_1310, funarg_2_1311;  )
*                                                 In   _1312
*                                                 End
*                                          In   _1115
*                                          End
*                                        DEFAULT = false_1098) : type_1088
*                            In   _1116
*                            End
*                          NODEFAULT) : type_1088
*              In   _1117
*              End
*              /\ vars_eq_1_1005
*                ( ;; v1_1313 : Unknown : type_1091.2, v2_1314 : Unknown : type_1091.2 ;; )
*              =>type_1088 =
*              Let  arg_pair_1016 : Unknown = record(1>v1_1313, 2>v2_1314)
*                   type_1118 = type_1091.1
*                   type_1119 = SUM(0,1)(type_1118)
*                   type_1120 = type_1091.2
*                   arg_pair_1_1121 : Unknown = select[1][](arg_pair_1016)
*                   eqargpair_1_1122 : Unknown = unroll[type_1120](arg_pair_1_1121)
*                   type_1123 = type_1091.2
*                   arg_pair_2_1124 : Unknown = select[2][](arg_pair_1016)
*                   eqargpair_2_1125 : Unknown = unroll[type_1123](arg_pair_2_1124)
*                   _1136 : Unknown = 
*                     SUM_SWITCH(eqargpair_1_1122: type_1119, 
*                          eqarg1_1021, 
*                          0: Unknown:: 
*                            Let  _1135 : Unknown = 
*                                   SUM_SWITCH(eqargpair_2_1125: type_1119, 
*                                        eqarg2_1022, 
*                                        0: Unknown:: 
*                                          Let  type_1129 = type_1091.1
*                                               type_1130 = SUM_0(0,1)(type_1129)
*                                               _1131 : Unknown = project_known0[type_1130](eqarg1_1021)
*                                               _1132 : Unknown = project_known0[type_1130](eqarg2_1022)
*                                               _1133 : Unknown = record(1>_1131, 2>_1132)
*                                               _1134 : Unknown = 
*                                                 Let  funarg_1318 : Unknown = _1133
*                                                      funarg_1_1319 : Unknown = select[1][](funarg_1318)
*                                                      funarg_2_1320 : Unknown = select[2][](funarg_1318)
*                                                      _1321 : Unknown = 
*                                                        App_Open(vars_eq_0_1004;  ; funarg_1_1319, funarg_2_1320;  )
*                                                 In   _1321
*                                                 End
*                                          In   _1134
*                                          End
*                                        DEFAULT = false_1098) : type_1088
*                            In   _1135
*                            End
*                          NODEFAULT) : type_1088
*              In   _1136
*              End
*              top_eq_1137 : Unknown = record(1>vars_eq_0_1004, 2>vars_eq_1_1005)
*         In   top_eq_1137
*         End
XXXX exp_analyze 15 con =           LET  type_1150 = ALLARROW(Open; PARTIAL; (); 
*                             (PROJ(MU((vdt_bar_1290=SUM(0,1)(vdt_foo_1291), vdt_foo_1291=SUM(0,1)(vdt_bar_1290))),1),
*                              PROJ(MU((vdt_bar_1292=SUM(0,1)(vdt_foo_1293), vdt_foo_1293=SUM(0,1)(vdt_bar_1292))),1)); 0; 
*                             LET  type_1148 = MU_NR((_1038=SUM(2,2)(CREC{})))
*                                  type_1149 = type_1148.1
*                             IN   type_1149
*                             END)
*              type_1163 = ALLARROW(Open; PARTIAL; (); 
*                             (PROJ(MU((vdt_bar_1298=SUM(0,1)(vdt_foo_1299), vdt_foo_1299=SUM(0,1)(vdt_bar_1298))),2),
*                              PROJ(MU((vdt_bar_1300=SUM(0,1)(vdt_foo_1301), vdt_foo_1301=SUM(0,1)(vdt_bar_1300))),2)); 0; 
*                             LET  type_1161 = MU_NR((_1033=SUM(2,2)(CREC{})))
*                                  type_1162 = type_1161.1
*                             IN   type_1162
*                             END)
*              type_1164 = RECORD[1, 2](type_1150, type_1163)
*         IN   type_1164
*         END
exp_valid called with expression =
          Let  type_1087 = MU_NR((_997=SUM(2,2)(CREC{})))
*              type_1088 = type_1087.1
*              type_1091 = MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001)))
*              type_1093 = MU_NR((_999=SUM(2,2)(CREC{})))
*              type_1094 = type_1093.1
*              type_1095 = CREC{}
*              type_1096 = SUM(2,2)(type_1095)
*              _1097 : Unknown = inject_known_0[type_1096]()
*              false_1098 : Unknown = roll[type_1094](_1097)
*              /\ vars_eq_0_1004
*                ( ;; v1_1304 : Unknown : type_1091.1, v2_1305 : Unknown : type_1091.1 ;; )
*              =>type_1088 =
*              Let  arg_pair_1006 : Unknown = record(1>v1_1304, 2>v2_1305)
*                   type_1099 = type_1091.2
*                   type_1100 = SUM(0,1)(type_1099)
*                   type_1101 = type_1091.1
*                   arg_pair_1_1102 : Unknown = select[1][](arg_pair_1006)
*                   eqargpair_1_1103 : Unknown = unroll[type_1101](arg_pair_1_1102)
*                   type_1104 = type_1091.1
*                   arg_pair_2_1105 : Unknown = select[2][](arg_pair_1006)
*                   eqargpair_2_1106 : Unknown = unroll[type_1104](arg_pair_2_1105)
*                   _1117 : Unknown = 
*                     SUM_SWITCH(eqargpair_1_1103: type_1100, 
*                          eqarg1_1013, 
*                          0: Unknown:: 
*                            Let  _1116 : Unknown = 
*                                   SUM_SWITCH(eqargpair_2_1106: type_1100, 
*                                        eqarg2_1014, 
*                                        0: Unknown:: 
*                                          Let  type_1110 = type_1091.2
*                                               type_1111 = SUM_0(0,1)(type_1110)
*                                               _1112 : Unknown = project_known0[type_1111](eqarg1_1013)
*                                               _1113 : Unknown = project_known0[type_1111](eqarg2_1014)
*                                               _1114 : Unknown = record(1>_1112, 2>_1113)
*                                               _1115 : Unknown = 
*                                                 Let  funarg_1309 : Unknown = _1114
*                                                      funarg_1_1310 : Unknown = select[1][](funarg_1309)
*                                                      funarg_2_1311 : Unknown = select[2][](funarg_1309)
*                                                      _1312 : Unknown = 
*                                                        App_Open(vars_eq_1_1005;  ; funarg_1_1310, funarg_2_1311;  )
*                                                 In   _1312
*                                                 End
*                                          In   _1115
*                                          End
*                                        DEFAULT = false_1098) : type_1088
*                            In   _1116
*                            End
*                          NODEFAULT) : type_1088
*              In   _1117
*              End
*              /\ vars_eq_1_1005
*                ( ;; v1_1313 : Unknown : type_1091.2, v2_1314 : Unknown : type_1091.2 ;; )
*              =>type_1088 =
*              Let  arg_pair_1016 : Unknown = record(1>v1_1313, 2>v2_1314)
*                   type_1118 = type_1091.1
*                   type_1119 = SUM(0,1)(type_1118)
*                   type_1120 = type_1091.2
*                   arg_pair_1_1121 : Unknown = select[1][](arg_pair_1016)
*                   eqargpair_1_1122 : Unknown = unroll[type_1120](arg_pair_1_1121)
*                   type_1123 = type_1091.2
*                   arg_pair_2_1124 : Unknown = select[2][](arg_pair_1016)
*                   eqargpair_2_1125 : Unknown = unroll[type_1123](arg_pair_2_1124)
*                   _1136 : Unknown = 
*                     SUM_SWITCH(eqargpair_1_1122: type_1119, 
*                          eqarg1_1021, 
*                          0: Unknown:: 
*                            Let  _1135 : Unknown = 
*                                   SUM_SWITCH(eqargpair_2_1125: type_1119, 
*                                        eqarg2_1022, 
*                                        0: Unknown:: 
*                                          Let  type_1129 = type_1091.1
*                                               type_1130 = SUM_0(0,1)(type_1129)
*                                               _1131 : Unknown = project_known0[type_1130](eqarg1_1021)
*                                               _1132 : Unknown = project_known0[type_1130](eqarg2_1022)
*                                               _1133 : Unknown = record(1>_1131, 2>_1132)
*                                               _1134 : Unknown = 
*                                                 Let  funarg_1318 : Unknown = _1133
*                                                      funarg_1_1319 : Unknown = select[1][](funarg_1318)
*                                                      funarg_2_1320 : Unknown = select[2][](funarg_1318)
*                                                      _1321 : Unknown = 
*                                                        App_Open(vars_eq_0_1004;  ; funarg_1_1319, funarg_2_1320;  )
*                                                 In   _1321
*                                                 End
*                                          In   _1134
*                                          End
*                                        DEFAULT = false_1098) : type_1088
*                            In   _1135
*                            End
*                          NODEFAULT) : type_1088
*              In   _1136
*              End
*              top_eq_1137 : Unknown = record(1>vars_eq_0_1004, 2>vars_eq_1_1005)
*         In   top_eq_1137
*         End

bnd_valid called with bnd =
type_1087 = MU_NR((_997=SUM(2,2)(CREC{})))

con_valid called with constructor =
MU_NR((_997=SUM(2,2)(CREC{})))

con_valid returned
bnd_valid returned
bnd_valid called with bnd =
type_1088 = type_1087.1

con_valid called with constructor =
type_1087.1

con_valid called with constructor =
type_1087

con_valid returned
con_valid returned
bnd_valid returned
bnd_valid called with bnd =
type_1091 = MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001)))

con_valid called with constructor =
MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001)))

con_valid returned
bnd_valid returned
bnd_valid called with bnd =
type_1093 = MU_NR((_999=SUM(2,2)(CREC{})))

con_valid called with constructor =
MU_NR((_999=SUM(2,2)(CREC{})))

con_valid returned
bnd_valid returned
bnd_valid called with bnd =
type_1094 = type_1093.1

con_valid called with constructor =
type_1093.1

con_valid called with constructor =
type_1093

con_valid returned
con_valid returned
bnd_valid returned
bnd_valid called with bnd =
type_1095 = CREC{}

con_valid called with constructor =
CREC{}

con_valid returned
bnd_valid returned
bnd_valid called with bnd =
type_1096 = SUM(2,2)(type_1095)

con_valid called with constructor =
SUM(2,2)(type_1095)

con_valid returned
bnd_valid returned
bnd_valid called with bnd =
_1097 : Unknown = inject_known_0[type_1096]()

exp_valid called with expression =
inject_known_0[type_1096]()

exp_valid returned
bnd_valid returned
bnd_valid called with bnd =
false_1098 : Unknown = roll[type_1094](_1097)

exp_valid called with expression =
roll[type_1094](_1097)

exp_valid called with expression =
_1097

exp_valid returned
XXXX finding path1
XXXX finding path2
exp_valid returned
bnd_valid returned
bnd_valid called with bnd =
          /\ vars_eq_0_1004
*           ( ;; v1_1304 : Unknown : type_1091.1, v2_1305 : Unknown : type_1091.1 ;; )
*         =>type_1088 =
*         Let  arg_pair_1006 : Unknown = record(1>v1_1304, 2>v2_1305)
*              type_1099 = type_1091.2
*              type_1100 = SUM(0,1)(type_1099)
*              type_1101 = type_1091.1
*              arg_pair_1_1102 : Unknown = select[1][](arg_pair_1006)
*              eqargpair_1_1103 : Unknown = unroll[type_1101](arg_pair_1_1102)
*              type_1104 = type_1091.1
*              arg_pair_2_1105 : Unknown = select[2][](arg_pair_1006)
*              eqargpair_2_1106 : Unknown = unroll[type_1104](arg_pair_2_1105)
*              _1117 : Unknown = 
*                SUM_SWITCH(eqargpair_1_1103: type_1100, 
*                     eqarg1_1013, 
*                     0: Unknown:: 
*                       Let  _1116 : Unknown = 
*                              SUM_SWITCH(eqargpair_2_1106: type_1100, 
*                                   eqarg2_1014, 
*                                   0: Unknown:: 
*                                     Let  type_1110 = type_1091.2
*                                          type_1111 = SUM_0(0,1)(type_1110)
*                                          _1112 : Unknown = project_known0[type_1111](eqarg1_1013)
*                                          _1113 : Unknown = project_known0[type_1111](eqarg2_1014)
*                                          _1114 : Unknown = record(1>_1112, 2>_1113)
*                                          _1115 : Unknown = 
*                                            Let  funarg_1309 : Unknown = _1114
*                                                 funarg_1_1310 : Unknown = select[1][](funarg_1309)
*                                                 funarg_2_1311 : Unknown = select[2][](funarg_1309)
*                                                 _1312 : Unknown = App_Open(vars_eq_1_1005;  ; funarg_1_1310, funarg_2_1311;  )
*                                            In   _1312
*                                            End
*                                     In   _1115
*                                     End
*                                   DEFAULT = false_1098) : type_1088
*                       In   _1116
*                       End
*                     NODEFAULT) : type_1088
*         In   _1117
*         End
*         /\ vars_eq_1_1005
*           ( ;; v1_1313 : Unknown : type_1091.2, v2_1314 : Unknown : type_1091.2 ;; )
*         =>type_1088 =
*         Let  arg_pair_1016 : Unknown = record(1>v1_1313, 2>v2_1314)
*              type_1118 = type_1091.1
*              type_1119 = SUM(0,1)(type_1118)
*              type_1120 = type_1091.2
*              arg_pair_1_1121 : Unknown = select[1][](arg_pair_1016)
*              eqargpair_1_1122 : Unknown = unroll[type_1120](arg_pair_1_1121)
*              type_1123 = type_1091.2
*              arg_pair_2_1124 : Unknown = select[2][](arg_pair_1016)
*              eqargpair_2_1125 : Unknown = unroll[type_1123](arg_pair_2_1124)
*              _1136 : Unknown = 
*                SUM_SWITCH(eqargpair_1_1122: type_1119, 
*                     eqarg1_1021, 
*                     0: Unknown:: 
*                       Let  _1135 : Unknown = 
*                              SUM_SWITCH(eqargpair_2_1125: type_1119, 
*                                   eqarg2_1022, 
*                                   0: Unknown:: 
*                                     Let  type_1129 = type_1091.1
*                                          type_1130 = SUM_0(0,1)(type_1129)
*                                          _1131 : Unknown = project_known0[type_1130](eqarg1_1021)
*                                          _1132 : Unknown = project_known0[type_1130](eqarg2_1022)
*                                          _1133 : Unknown = record(1>_1131, 2>_1132)
*                                          _1134 : Unknown = 
*                                            Let  funarg_1318 : Unknown = _1133
*                                                 funarg_1_1319 : Unknown = select[1][](funarg_1318)
*                                                 funarg_2_1320 : Unknown = select[2][](funarg_1318)
*                                                 _1321 : Unknown = App_Open(vars_eq_0_1004;  ; funarg_1_1319, funarg_2_1320;  )
*                                            In   _1321
*                                            End
*                                     In   _1134
*                                     End
*                                   DEFAULT = false_1098) : type_1088
*                       In   _1135
*                       End
*                     NODEFAULT) : type_1088
*         In   _1136
*         End

XXXX getting function types
XXXX analyzing bnd_types
con_valid called with constructor =
type_1091

con_valid returned
con_valid called with constructor =
type_1091

con_valid returned
con_valid called with constructor =
type_1091

con_valid returned
con_valid called with constructor =
type_1091

con_valid returned
XXXX building up context
XXXX checking defs
XXXX exp_analyze 16 -----------------------------
XXXX exp_analyze 16 context = 
 Constructor variables, kinds, and equations are :
type_1096 = SUM(2,2)(type_1095)::SINGLE_TYPE(SUM(2,2)(type_1095))
type_1095 = CREC{}::REC_K{}
type_1094 = PROJ(MU_NR((_999=SUM(2,2)(CREC{}))),1)::SINGLE_TYPE(type_1093.1)
type_1093 = MU_NR((_999=SUM(2,2)(CREC{})))::REC_K{1 > _1385 :  SINGLE_TYPE(PROJ(MU_NR((_999=SUM(2,2)(CREC{}))),1))}
type_1091 = MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001)))::          REC_K{1 > vdt_bar_1383 : 
*               SINGLE_TYPE(PROJ(MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001))),1)),
*               2 > vdt_foo_1384 : 
*               SINGLE_TYPE(PROJ(MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001))),2))}
type_1088 = type_1087.1::SINGLE_TYPE(type_1087.1)
type_1087 = MU_NR((_997=SUM(2,2)(CREC{})))::REC_K{1 > _1382 :  SINGLE_TYPE(PROJ(MU_NR((_997=SUM(2,2)(CREC{}))),1))}
mpoly_var_c_994::REC_K{'a > 'a_996 :  TYPE}
_1058 =           LET  _1058 =  FUN('a_1057 ::  TYPE) = SUM(0,1)(APP(_1050,('a_1057)))
*         IN   _1058
*         END::Arrow_k(Open; 'a_1057 : TYPE; SINGLE_TYPE(SUM(0,1)(APP(_1050,('a_1057)))))
_1055 =           LET  _1055 =  FUN('a_1052 ::  TYPE) = SUM(0,1)(APP(_1047,('a_1052)))
*         IN   _1055
*         END::Arrow_k(Open; 'a_1052 : TYPE; SINGLE_TYPE(SUM(0,1)(APP(_1047,('a_1052)))))
_1050 =           LET  _1050 =  FUN('a_1049 ::  TYPE) = APP(_1041,('a_1049))
*         IN   _1050
*         END::Arrow_k(Open; 'a_1049 : TYPE; SINGLE_TYPE(APP(_1041,('a_1049))))
_1047 =           LET  _1047 =  FUN('a_1046 ::  TYPE) = APP(_1044,('a_1046))
*         IN   _1047
*         END::Arrow_k(Open; 'a_1046 : TYPE; SINGLE_TYPE(APP(_1044,('a_1046))))
_1044 =           LET  _1044 =  FUN('a_1043 ::  TYPE) = PROJ(APP(_990,('a_1043)),2)
*         IN   _1044
*         END::Arrow_k(Open; 'a_1043 : TYPE; SINGLE_TYPE(PROJ(APP(_990,('a_1043)),2)))
_1041 =           LET  _1041 =  FUN('a_1040 ::  TYPE) = PROJ(APP(_990,('a_1040)),1)
*         IN   _1041
*         END::Arrow_k(Open; 'a_1040 : TYPE; SINGLE_TYPE(PROJ(APP(_990,('a_1040)),1)))
_990 =           LET  _990 =  FUN('a_987 ::  TYPE) = MU((vdt_bar_988=SUM(0,1)(vdt_foo_989), vdt_foo_989=SUM(0,1)(vdt_bar_988)))
*         IN   _990
*         END::          Arrow_k(Open; 'a_987 : TYPE; REC_K{1 > vdt_bar_1370 : 
*                                            SINGLE_TYPE(PROJ(MU((vdt_bar_988=SUM(0,1)(vdt_foo_989),
*                                                                 vdt_foo_989=SUM(0,1)(vdt_bar_988))),1)),
*                                            2 > vdt_foo_1371 : 
*                                            SINGLE_TYPE(PROJ(MU((vdt_bar_988=SUM(0,1)(vdt_foo_989),
*                                                                 vdt_foo_989=SUM(0,1)(vdt_bar_988))),2))})

 Expression variables and constructors are :
_bar_foo_eq_r_993:          ALLARROW(Open; TOTAL; (mpoly_var_c_994 :: REC_K{'a > 'a_996 :  TYPE}); 
*            (DEP_RECORD[ ]); 0; 
*            LET  type_1150 = ALLARROW(Open; PARTIAL; (); 
*                                (PROJ(MU((vdt_bar_1290=SUM(0,1)(vdt_foo_1291), vdt_foo_1291=SUM(0,1)(vdt_bar_1290))),1),
*                                 PROJ(MU((vdt_bar_1292=SUM(0,1)(vdt_foo_1293), vdt_foo_1293=SUM(0,1)(vdt_bar_1292))),1)); 0; 
*                                LET  type_1148 = MU_NR((_1038=SUM(2,2)(CREC{})))
*                                     type_1149 = type_1148.1
*                                IN   type_1149
*                                END)
*                 type_1163 = ALLARROW(Open; PARTIAL; (); 
*                                (PROJ(MU((vdt_bar_1298=SUM(0,1)(vdt_foo_1299), vdt_foo_1299=SUM(0,1)(vdt_bar_1298))),2),
*                                 PROJ(MU((vdt_bar_1300=SUM(0,1)(vdt_foo_1301), vdt_foo_1301=SUM(0,1)(vdt_bar_1300))),2)); 0; 
*                                LET  type_1161 = MU_NR((_1033=SUM(2,2)(CREC{})))
*                                     type_1162 = type_1161.1
*                                IN   type_1162
*                                END)
*                 type_1164 = RECORD[1, 2](type_1150, type_1163)
*            IN   type_1164
*            END)
mpoly_var_r_995:DEP_RECORD[ ]
vars_eq_0_1004:ALLARROW(Open; TOTAL; (); (type_1091.1, type_1091.1); 0; type_1088)
vars_eq_1_1005:ALLARROW(Open; TOTAL; (); (type_1091.2, type_1091.2); 0; type_1088)
_1097:SUM_0(2,2)(type_1095)
false_1098:type_1094
v1_1304:type_1091.1
v2_1305:type_1091.1

XXXX exp_analyze 16 exp =           Let  arg_pair_1006 : Unknown = record(1>v1_1304, 2>v2_1305)
*              type_1099 = type_1091.2
*              type_1100 = SUM(0,1)(type_1099)
*              type_1101 = type_1091.1
*              arg_pair_1_1102 : Unknown = select[1][](arg_pair_1006)
*              eqargpair_1_1103 : Unknown = unroll[type_1101](arg_pair_1_1102)
*              type_1104 = type_1091.1
*              arg_pair_2_1105 : Unknown = select[2][](arg_pair_1006)
*              eqargpair_2_1106 : Unknown = unroll[type_1104](arg_pair_2_1105)
*              _1117 : Unknown = 
*                SUM_SWITCH(eqargpair_1_1103: type_1100, 
*                     eqarg1_1013, 
*                     0: Unknown:: 
*                       Let  _1116 : Unknown = 
*                              SUM_SWITCH(eqargpair_2_1106: type_1100, 
*                                   eqarg2_1014, 
*                                   0: Unknown:: 
*                                     Let  type_1110 = type_1091.2
*                                          type_1111 = SUM_0(0,1)(type_1110)
*                                          _1112 : Unknown = project_known0[type_1111](eqarg1_1013)
*                                          _1113 : Unknown = project_known0[type_1111](eqarg2_1014)
*                                          _1114 : Unknown = record(1>_1112, 2>_1113)
*                                          _1115 : Unknown = 
*                                            Let  funarg_1309 : Unknown = _1114
*                                                 funarg_1_1310 : Unknown = select[1][](funarg_1309)
*                                                 funarg_2_1311 : Unknown = select[2][](funarg_1309)
*                                                 _1312 : Unknown = App_Open(vars_eq_1_1005;  ; funarg_1_1310, funarg_2_1311;  )
*                                            In   _1312
*                                            End
*                                     In   _1115
*                                     End
*                                   DEFAULT = false_1098) : type_1088
*                       In   _1116
*                       End
*                     NODEFAULT) : type_1088
*         In   _1117
*         End
XXXX exp_analyze 16 con = type_1088
exp_valid called with expression =
          Let  arg_pair_1006 : Unknown = record(1>v1_1304, 2>v2_1305)
*              type_1099 = type_1091.2
*              type_1100 = SUM(0,1)(type_1099)
*              type_1101 = type_1091.1
*              arg_pair_1_1102 : Unknown = select[1][](arg_pair_1006)
*              eqargpair_1_1103 : Unknown = unroll[type_1101](arg_pair_1_1102)
*              type_1104 = type_1091.1
*              arg_pair_2_1105 : Unknown = select[2][](arg_pair_1006)
*              eqargpair_2_1106 : Unknown = unroll[type_1104](arg_pair_2_1105)
*              _1117 : Unknown = 
*                SUM_SWITCH(eqargpair_1_1103: type_1100, 
*                     eqarg1_1013, 
*                     0: Unknown:: 
*                       Let  _1116 : Unknown = 
*                              SUM_SWITCH(eqargpair_2_1106: type_1100, 
*                                   eqarg2_1014, 
*                                   0: Unknown:: 
*                                     Let  type_1110 = type_1091.2
*                                          type_1111 = SUM_0(0,1)(type_1110)
*                                          _1112 : Unknown = project_known0[type_1111](eqarg1_1013)
*                                          _1113 : Unknown = project_known0[type_1111](eqarg2_1014)
*                                          _1114 : Unknown = record(1>_1112, 2>_1113)
*                                          _1115 : Unknown = 
*                                            Let  funarg_1309 : Unknown = _1114
*                                                 funarg_1_1310 : Unknown = select[1][](funarg_1309)
*                                                 funarg_2_1311 : Unknown = select[2][](funarg_1309)
*                                                 _1312 : Unknown = App_Open(vars_eq_1_1005;  ; funarg_1_1310, funarg_2_1311;  )
*                                            In   _1312
*                                            End
*                                     In   _1115
*                                     End
*                                   DEFAULT = false_1098) : type_1088
*                       In   _1116
*                       End
*                     NODEFAULT) : type_1088
*         In   _1117
*         End

bnd_valid called with bnd =
arg_pair_1006 : Unknown = record(1>v1_1304, 2>v2_1305)

exp_valid called with expression =
record(1>v1_1304, 2>v2_1305)

exp_valid called with expression =
v1_1304

exp_valid returned
exp_valid called with expression =
v2_1305

exp_valid returned
exp_valid returned
bnd_valid returned
bnd_valid called with bnd =
type_1099 = type_1091.2

con_valid called with constructor =
type_1091.2

con_valid called with constructor =
type_1091

con_valid returned
con_valid returned
bnd_valid returned
bnd_valid called with bnd =
type_1100 = SUM(0,1)(type_1099)

con_valid called with constructor =
SUM(0,1)(type_1099)

con_valid returned
bnd_valid returned
bnd_valid called with bnd =
type_1101 = type_1091.1

con_valid called with constructor =
type_1091.1

con_valid called with constructor =
type_1091

con_valid returned
con_valid returned
bnd_valid returned
bnd_valid called with bnd =
arg_pair_1_1102 : Unknown = select[1][](arg_pair_1006)

exp_valid called with expression =
select[1][](arg_pair_1006)

exp_valid called with expression =
arg_pair_1006

exp_valid returned
exp_valid returned
bnd_valid returned
bnd_valid called with bnd =
eqargpair_1_1103 : Unknown = unroll[type_1101](arg_pair_1_1102)

exp_valid called with expression =
unroll[type_1101](arg_pair_1_1102)

exp_valid called with expression =
arg_pair_1_1102

exp_valid returned
XXXX finding path1
XXXX finding path2
XXXX finding path1
XXXX finding path2
exp_valid returned
bnd_valid returned
bnd_valid called with bnd =
type_1104 = type_1091.1

con_valid called with constructor =
type_1091.1

con_valid called with constructor =
type_1091

con_valid returned
con_valid returned
bnd_valid returned
bnd_valid called with bnd =
arg_pair_2_1105 : Unknown = select[2][](arg_pair_1006)

exp_valid called with expression =
select[2][](arg_pair_1006)

exp_valid called with expression =
arg_pair_1006

exp_valid returned
exp_valid returned
bnd_valid returned
bnd_valid called with bnd =
eqargpair_2_1106 : Unknown = unroll[type_1104](arg_pair_2_1105)

exp_valid called with expression =
unroll[type_1104](arg_pair_2_1105)

exp_valid called with expression =
arg_pair_2_1105

exp_valid returned
XXXX finding path1
XXXX finding path2
XXXX finding path1
XXXX finding path2
exp_valid returned
bnd_valid returned
bnd_valid called with bnd =
          _1117 : Unknown = 
*           SUM_SWITCH(eqargpair_1_1103: type_1100, 
*                eqarg1_1013, 
*                0: Unknown:: 
*                  Let  _1116 : Unknown = 
*                         SUM_SWITCH(eqargpair_2_1106: type_1100, 
*                              eqarg2_1014, 
*                              0: Unknown:: 
*                                Let  type_1110 = type_1091.2
*                                     type_1111 = SUM_0(0,1)(type_1110)
*                                     _1112 : Unknown = project_known0[type_1111](eqarg1_1013)
*                                     _1113 : Unknown = project_known0[type_1111](eqarg2_1014)
*                                     _1114 : Unknown = record(1>_1112, 2>_1113)
*                                     _1115 : Unknown = 
*                                       Let  funarg_1309 : Unknown = _1114
*                                            funarg_1_1310 : Unknown = select[1][](funarg_1309)
*                                            funarg_2_1311 : Unknown = select[2][](funarg_1309)
*                                            _1312 : Unknown = App_Open(vars_eq_1_1005;  ; funarg_1_1310, funarg_2_1311;  )
*                                       In   _1312
*                                       End
*                                In   _1115
*                                End
*                              DEFAULT = false_1098) : type_1088
*                  In   _1116
*                  End
*                NODEFAULT) : type_1088

exp_valid called with expression =
          SUM_SWITCH(eqargpair_1_1103: type_1100, 
*              eqarg1_1013, 
*              0: Unknown:: 
*                Let  _1116 : Unknown = 
*                       SUM_SWITCH(eqargpair_2_1106: type_1100, 
*                            eqarg2_1014, 
*                            0: Unknown:: 
*                              Let  type_1110 = type_1091.2
*                                   type_1111 = SUM_0(0,1)(type_1110)
*                                   _1112 : Unknown = project_known0[type_1111](eqarg1_1013)
*                                   _1113 : Unknown = project_known0[type_1111](eqarg2_1014)
*                                   _1114 : Unknown = record(1>_1112, 2>_1113)
*                                   _1115 : Unknown = 
*                                     Let  funarg_1309 : Unknown = _1114
*                                          funarg_1_1310 : Unknown = select[1][](funarg_1309)
*                                          funarg_2_1311 : Unknown = select[2][](funarg_1309)
*                                          _1312 : Unknown = App_Open(vars_eq_1_1005;  ; funarg_1_1310, funarg_2_1311;  )
*                                     In   _1312
*                                     End
*                              In   _1115
*                              End
*                            DEFAULT = false_1098) : type_1088
*                In   _1116
*                End
*              NODEFAULT) : type_1088

exp_valid called with expression =
eqargpair_1_1103

exp_valid returned
XXXX finding path1
XXXX finding path2
XXXX finding path1
XXXX finding path2
XXXX finding path1
XXXX finding path2
exp_valid called with expression =
          Let  _1116 : Unknown = 
*                SUM_SWITCH(eqargpair_2_1106: type_1100, 
*                     eqarg2_1014, 
*                     0: Unknown:: 
*                       Let  type_1110 = type_1091.2
*                            type_1111 = SUM_0(0,1)(type_1110)
*                            _1112 : Unknown = project_known0[type_1111](eqarg1_1013)
*                            _1113 : Unknown = project_known0[type_1111](eqarg2_1014)
*                            _1114 : Unknown = record(1>_1112, 2>_1113)
*                            _1115 : Unknown = Let  funarg_1309 : Unknown = _1114
*                                                   funarg_1_1310 : Unknown = select[1][](funarg_1309)
*                                                   funarg_2_1311 : Unknown = select[2][](funarg_1309)
*                                                   _1312 : Unknown = App_Open(vars_eq_1_1005;  ; funarg_1_1310, funarg_2_1311;  )
*                                              In   _1312
*                                              End
*                       In   _1115
*                       End
*                     DEFAULT = false_1098) : type_1088
*         In   _1116
*         End

bnd_valid called with bnd =
          _1116 : Unknown = 
*           SUM_SWITCH(eqargpair_2_1106: type_1100, 
*                eqarg2_1014, 
*                0: Unknown:: 
*                  Let  type_1110 = type_1091.2
*                       type_1111 = SUM_0(0,1)(type_1110)
*                       _1112 : Unknown = project_known0[type_1111](eqarg1_1013)
*                       _1113 : Unknown = project_known0[type_1111](eqarg2_1014)
*                       _1114 : Unknown = record(1>_1112, 2>_1113)
*                       _1115 : Unknown = Let  funarg_1309 : Unknown = _1114
*                                              funarg_1_1310 : Unknown = select[1][](funarg_1309)
*                                              funarg_2_1311 : Unknown = select[2][](funarg_1309)
*                                              _1312 : Unknown = App_Open(vars_eq_1_1005;  ; funarg_1_1310, funarg_2_1311;  )
*                                         In   _1312
*                                         End
*                  In   _1115
*                  End
*                DEFAULT = false_1098) : type_1088

exp_valid called with expression =
          SUM_SWITCH(eqargpair_2_1106: type_1100, 
*              eqarg2_1014, 
*              0: Unknown:: 
*                Let  type_1110 = type_1091.2
*                     type_1111 = SUM_0(0,1)(type_1110)
*                     _1112 : Unknown = project_known0[type_1111](eqarg1_1013)
*                     _1113 : Unknown = project_known0[type_1111](eqarg2_1014)
*                     _1114 : Unknown = record(1>_1112, 2>_1113)
*                     _1115 : Unknown = Let  funarg_1309 : Unknown = _1114
*                                            funarg_1_1310 : Unknown = select[1][](funarg_1309)
*                                            funarg_2_1311 : Unknown = select[2][](funarg_1309)
*                                            _1312 : Unknown = App_Open(vars_eq_1_1005;  ; funarg_1_1310, funarg_2_1311;  )
*                                       In   _1312
*                                       End
*                In   _1115
*                End
*              DEFAULT = false_1098) : type_1088

exp_valid called with expression =
eqargpair_2_1106

exp_valid returned
XXXX finding path1
XXXX finding path2
XXXX finding path1
XXXX finding path2
XXXX finding path1
XXXX finding path2
exp_valid called with expression =
          Let  type_1110 = type_1091.2
*              type_1111 = SUM_0(0,1)(type_1110)
*              _1112 : Unknown = project_known0[type_1111](eqarg1_1013)
*              _1113 : Unknown = project_known0[type_1111](eqarg2_1014)
*              _1114 : Unknown = record(1>_1112, 2>_1113)
*              _1115 : Unknown = Let  funarg_1309 : Unknown = _1114
*                                     funarg_1_1310 : Unknown = select[1][](funarg_1309)
*                                     funarg_2_1311 : Unknown = select[2][](funarg_1309)
*                                     _1312 : Unknown = App_Open(vars_eq_1_1005;  ; funarg_1_1310, funarg_2_1311;  )
*                                In   _1312
*                                End
*         In   _1115
*         End

bnd_valid called with bnd =
type_1110 = type_1091.2

con_valid called with constructor =
type_1091.2

con_valid called with constructor =
type_1091

con_valid returned
con_valid returned
bnd_valid returned
bnd_valid called with bnd =
type_1111 = SUM_0(0,1)(type_1110)

con_valid called with constructor =
SUM_0(0,1)(type_1110)

con_valid returned
bnd_valid returned
bnd_valid called with bnd =
_1112 : Unknown = project_known0[type_1111](eqarg1_1013)

exp_valid called with expression =
project_known0[type_1111](eqarg1_1013)

XXXX exp_analyze 17 -----------------------------
XXXX exp_analyze 17 context = 
 Constructor variables, kinds, and equations are :
type_1111 = SUM_0(0,1)(type_1110)::SINGLE_TYPE(SUM_0(0,1)(type_1110))
type_1110 = type_1091.2::SINGLE_TYPE(type_1091.2)
type_1104 = PROJ(MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001))),1)::SINGLE_TYPE(type_1091.1)
type_1101 = PROJ(MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001))),1)::SINGLE_TYPE(type_1091.1)
type_1100 = SUM(0,1)(type_1099)::SINGLE_TYPE(SUM(0,1)(type_1099))
type_1099 = PROJ(MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001))),2)::SINGLE_TYPE(type_1091.2)
type_1096 = SUM(2,2)(type_1095)::SINGLE_TYPE(SUM(2,2)(type_1095))
type_1095 = CREC{}::REC_K{}
type_1094 = PROJ(MU_NR((_999=SUM(2,2)(CREC{}))),1)::SINGLE_TYPE(type_1093.1)
type_1093 = MU_NR((_999=SUM(2,2)(CREC{})))::REC_K{1 > _1385 :  SINGLE_TYPE(PROJ(MU_NR((_999=SUM(2,2)(CREC{}))),1))}
type_1091 = MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001)))::          REC_K{1 > vdt_bar_1383 : 
*               SINGLE_TYPE(PROJ(MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001))),1)),
*               2 > vdt_foo_1384 : 
*               SINGLE_TYPE(PROJ(MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001))),2))}
type_1088 = PROJ(MU_NR((_997=SUM(2,2)(CREC{}))),1)::SINGLE_TYPE(type_1087.1)
type_1087 = MU_NR((_997=SUM(2,2)(CREC{})))::REC_K{1 > _1382 :  SINGLE_TYPE(PROJ(MU_NR((_997=SUM(2,2)(CREC{}))),1))}
mpoly_var_c_994::REC_K{'a > 'a_996 :  TYPE}
_1058 =           LET  _1058 =  FUN('a_1057 ::  TYPE) = SUM(0,1)(APP(_1050,('a_1057)))
*         IN   _1058
*         END::Arrow_k(Open; 'a_1057 : TYPE; SINGLE_TYPE(SUM(0,1)(APP(_1050,('a_1057)))))
_1055 =           LET  _1055 =  FUN('a_1052 ::  TYPE) = SUM(0,1)(APP(_1047,('a_1052)))
*         IN   _1055
*         END::Arrow_k(Open; 'a_1052 : TYPE; SINGLE_TYPE(SUM(0,1)(APP(_1047,('a_1052)))))
_1050 =           LET  _1050 =  FUN('a_1049 ::  TYPE) = APP(_1041,('a_1049))
*         IN   _1050
*         END::Arrow_k(Open; 'a_1049 : TYPE; SINGLE_TYPE(APP(_1041,('a_1049))))
_1047 =           LET  _1047 =  FUN('a_1046 ::  TYPE) = APP(_1044,('a_1046))
*         IN   _1047
*         END::Arrow_k(Open; 'a_1046 : TYPE; SINGLE_TYPE(APP(_1044,('a_1046))))
_1044 =           LET  _1044 =  FUN('a_1043 ::  TYPE) = PROJ(APP(_990,('a_1043)),2)
*         IN   _1044
*         END::Arrow_k(Open; 'a_1043 : TYPE; SINGLE_TYPE(PROJ(APP(_990,('a_1043)),2)))
_1041 =           LET  _1041 =  FUN('a_1040 ::  TYPE) = PROJ(APP(_990,('a_1040)),1)
*         IN   _1041
*         END::Arrow_k(Open; 'a_1040 : TYPE; SINGLE_TYPE(PROJ(APP(_990,('a_1040)),1)))
_990 =           LET  _990 =  FUN('a_987 ::  TYPE) = MU((vdt_bar_988=SUM(0,1)(vdt_foo_989), vdt_foo_989=SUM(0,1)(vdt_bar_988)))
*         IN   _990
*         END::          Arrow_k(Open; 'a_987 : TYPE; REC_K{1 > vdt_bar_1370 : 
*                                            SINGLE_TYPE(PROJ(MU((vdt_bar_988=SUM(0,1)(vdt_foo_989),
*                                                                 vdt_foo_989=SUM(0,1)(vdt_bar_988))),1)),
*                                            2 > vdt_foo_1371 : 
*                                            SINGLE_TYPE(PROJ(MU((vdt_bar_988=SUM(0,1)(vdt_foo_989),
*                                                                 vdt_foo_989=SUM(0,1)(vdt_bar_988))),2))})

 Expression variables and constructors are :
_bar_foo_eq_r_993:          ALLARROW(Open; TOTAL; (mpoly_var_c_994 :: REC_K{'a > 'a_996 :  TYPE}); 
*            (DEP_RECORD[ ]); 0; 
*            LET  type_1150 = ALLARROW(Open; PARTIAL; (); 
*                                (PROJ(MU((vdt_bar_1290=SUM(0,1)(vdt_foo_1291), vdt_foo_1291=SUM(0,1)(vdt_bar_1290))),1),
*                                 PROJ(MU((vdt_bar_1292=SUM(0,1)(vdt_foo_1293), vdt_foo_1293=SUM(0,1)(vdt_bar_1292))),1)); 0; 
*                                LET  type_1148 = MU_NR((_1038=SUM(2,2)(CREC{})))
*                                     type_1149 = type_1148.1
*                                IN   type_1149
*                                END)
*                 type_1163 = ALLARROW(Open; PARTIAL; (); 
*                                (PROJ(MU((vdt_bar_1298=SUM(0,1)(vdt_foo_1299), vdt_foo_1299=SUM(0,1)(vdt_bar_1298))),2),
*                                 PROJ(MU((vdt_bar_1300=SUM(0,1)(vdt_foo_1301), vdt_foo_1301=SUM(0,1)(vdt_bar_1300))),2)); 0; 
*                                LET  type_1161 = MU_NR((_1033=SUM(2,2)(CREC{})))
*                                     type_1162 = type_1161.1
*                                IN   type_1162
*                                END)
*                 type_1164 = RECORD[1, 2](type_1150, type_1163)
*            IN   type_1164
*            END)
mpoly_var_r_995:DEP_RECORD[ ]
vars_eq_0_1004:ALLARROW(Open; TOTAL; (); (type_1091.1, type_1091.1); 0; type_1088)
vars_eq_1_1005:ALLARROW(Open; TOTAL; (); (type_1091.2, type_1091.2); 0; type_1088)
arg_pair_1006:RECORD[1, 2](type_1091.1, type_1091.1)
eqarg1_1013:SUM_0(0,1)(type_1099)
eqarg2_1014:SUM_0(0,1)(type_1099)
_1097:SUM_0(2,2)(type_1095)
false_1098:type_1094
arg_pair_1_1102:type_1091.1
eqargpair_1_1103:          LET  mu_bnd_1387 = MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001)))
*              vdt_bar_1001 = mu_bnd_1387.1
*              vdt_foo_1002 = mu_bnd_1387.2
*         IN   SUM(0,1)(vdt_foo_1002)
*         END
arg_pair_2_1105:type_1091.1
eqargpair_2_1106:          LET  mu_bnd_1388 = MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001)))
*              vdt_bar_1001 = mu_bnd_1388.1
*              vdt_foo_1002 = mu_bnd_1388.2
*         IN   SUM(0,1)(vdt_foo_1002)
*         END
v1_1304:type_1091.1
v2_1305:type_1091.1

XXXX exp_analyze 17 exp = eqarg1_1013
XXXX exp_analyze 17 con = SUM_0(0,1)(type_1110)
exp_valid called with expression =
eqarg1_1013

exp_valid returned
XXXX exp_analyze 17 con' = SUM_0(0,1)(type_1099)
XXXX exp_analyze 17 -----------------------------
XXXX finding path1
XXXX finding path2
XXXX finding path1
XXXX finding path2
XXXX finding path1
XXXX finding path2
exp_valid returned
bnd_valid returned
bnd_valid called with bnd =
_1113 : Unknown = project_known0[type_1111](eqarg2_1014)

exp_valid called with expression =
project_known0[type_1111](eqarg2_1014)

XXXX exp_analyze 18 -----------------------------
XXXX exp_analyze 18 context = 
 Constructor variables, kinds, and equations are :
type_1111 = SUM_0(0,1)(type_1110)::SINGLE_TYPE(SUM_0(0,1)(type_1110))
type_1110 = PROJ(MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001))),2)::SINGLE_TYPE(type_1091.2)
type_1104 = PROJ(MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001))),1)::SINGLE_TYPE(type_1091.1)
type_1101 = PROJ(MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001))),1)::SINGLE_TYPE(type_1091.1)
type_1100 = SUM(0,1)(type_1099)::SINGLE_TYPE(SUM(0,1)(type_1099))
type_1099 = PROJ(MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001))),2)::SINGLE_TYPE(type_1091.2)
type_1096 = SUM(2,2)(type_1095)::SINGLE_TYPE(SUM(2,2)(type_1095))
type_1095 = CREC{}::REC_K{}
type_1094 = PROJ(MU_NR((_999=SUM(2,2)(CREC{}))),1)::SINGLE_TYPE(type_1093.1)
type_1093 = MU_NR((_999=SUM(2,2)(CREC{})))::REC_K{1 > _1385 :  SINGLE_TYPE(PROJ(MU_NR((_999=SUM(2,2)(CREC{}))),1))}
type_1091 = MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001)))::          REC_K{1 > vdt_bar_1383 : 
*               SINGLE_TYPE(PROJ(MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001))),1)),
*               2 > vdt_foo_1384 : 
*               SINGLE_TYPE(PROJ(MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001))),2))}
type_1088 = PROJ(MU_NR((_997=SUM(2,2)(CREC{}))),1)::SINGLE_TYPE(type_1087.1)
type_1087 = MU_NR((_997=SUM(2,2)(CREC{})))::REC_K{1 > _1382 :  SINGLE_TYPE(PROJ(MU_NR((_997=SUM(2,2)(CREC{}))),1))}
mpoly_var_c_994::REC_K{'a > 'a_996 :  TYPE}
_1058 =           LET  _1058 =  FUN('a_1057 ::  TYPE) = SUM(0,1)(APP(_1050,('a_1057)))
*         IN   _1058
*         END::Arrow_k(Open; 'a_1057 : TYPE; SINGLE_TYPE(SUM(0,1)(APP(_1050,('a_1057)))))
_1055 =           LET  _1055 =  FUN('a_1052 ::  TYPE) = SUM(0,1)(APP(_1047,('a_1052)))
*         IN   _1055
*         END::Arrow_k(Open; 'a_1052 : TYPE; SINGLE_TYPE(SUM(0,1)(APP(_1047,('a_1052)))))
_1050 =           LET  _1050 =  FUN('a_1049 ::  TYPE) = APP(_1041,('a_1049))
*         IN   _1050
*         END::Arrow_k(Open; 'a_1049 : TYPE; SINGLE_TYPE(APP(_1041,('a_1049))))
_1047 =           LET  _1047 =  FUN('a_1046 ::  TYPE) = APP(_1044,('a_1046))
*         IN   _1047
*         END::Arrow_k(Open; 'a_1046 : TYPE; SINGLE_TYPE(APP(_1044,('a_1046))))
_1044 =           LET  _1044 =  FUN('a_1043 ::  TYPE) = PROJ(APP(_990,('a_1043)),2)
*         IN   _1044
*         END::Arrow_k(Open; 'a_1043 : TYPE; SINGLE_TYPE(PROJ(APP(_990,('a_1043)),2)))
_1041 =           LET  _1041 =  FUN('a_1040 ::  TYPE) = PROJ(APP(_990,('a_1040)),1)
*         IN   _1041
*         END::Arrow_k(Open; 'a_1040 : TYPE; SINGLE_TYPE(PROJ(APP(_990,('a_1040)),1)))
_990 =           LET  _990 =  FUN('a_987 ::  TYPE) = MU((vdt_bar_988=SUM(0,1)(vdt_foo_989), vdt_foo_989=SUM(0,1)(vdt_bar_988)))
*         IN   _990
*         END::          Arrow_k(Open; 'a_987 : TYPE; REC_K{1 > vdt_bar_1370 : 
*                                            SINGLE_TYPE(PROJ(MU((vdt_bar_988=SUM(0,1)(vdt_foo_989),
*                                                                 vdt_foo_989=SUM(0,1)(vdt_bar_988))),1)),
*                                            2 > vdt_foo_1371 : 
*                                            SINGLE_TYPE(PROJ(MU((vdt_bar_988=SUM(0,1)(vdt_foo_989),
*                                                                 vdt_foo_989=SUM(0,1)(vdt_bar_988))),2))})

 Expression variables and constructors are :
_bar_foo_eq_r_993:          ALLARROW(Open; TOTAL; (mpoly_var_c_994 :: REC_K{'a > 'a_996 :  TYPE}); 
*            (DEP_RECORD[ ]); 0; 
*            LET  type_1150 = ALLARROW(Open; PARTIAL; (); 
*                                (PROJ(MU((vdt_bar_1290=SUM(0,1)(vdt_foo_1291), vdt_foo_1291=SUM(0,1)(vdt_bar_1290))),1),
*                                 PROJ(MU((vdt_bar_1292=SUM(0,1)(vdt_foo_1293), vdt_foo_1293=SUM(0,1)(vdt_bar_1292))),1)); 0; 
*                                LET  type_1148 = MU_NR((_1038=SUM(2,2)(CREC{})))
*                                     type_1149 = type_1148.1
*                                IN   type_1149
*                                END)
*                 type_1163 = ALLARROW(Open; PARTIAL; (); 
*                                (PROJ(MU((vdt_bar_1298=SUM(0,1)(vdt_foo_1299), vdt_foo_1299=SUM(0,1)(vdt_bar_1298))),2),
*                                 PROJ(MU((vdt_bar_1300=SUM(0,1)(vdt_foo_1301), vdt_foo_1301=SUM(0,1)(vdt_bar_1300))),2)); 0; 
*                                LET  type_1161 = MU_NR((_1033=SUM(2,2)(CREC{})))
*                                     type_1162 = type_1161.1
*                                IN   type_1162
*                                END)
*                 type_1164 = RECORD[1, 2](type_1150, type_1163)
*            IN   type_1164
*            END)
mpoly_var_r_995:DEP_RECORD[ ]
vars_eq_0_1004:ALLARROW(Open; TOTAL; (); (type_1091.1, type_1091.1); 0; type_1088)
vars_eq_1_1005:ALLARROW(Open; TOTAL; (); (type_1091.2, type_1091.2); 0; type_1088)
arg_pair_1006:RECORD[1, 2](type_1091.1, type_1091.1)
eqarg1_1013:SUM_0(0,1)(type_1099)
eqarg2_1014:SUM_0(0,1)(type_1099)
_1097:SUM_0(2,2)(type_1095)
false_1098:type_1094
arg_pair_1_1102:type_1091.1
eqargpair_1_1103:          LET  mu_bnd_1387 = MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001)))
*              vdt_bar_1001 = mu_bnd_1387.1
*              vdt_foo_1002 = mu_bnd_1387.2
*         IN   SUM(0,1)(vdt_foo_1002)
*         END
arg_pair_2_1105:type_1091.1
eqargpair_2_1106:          LET  mu_bnd_1388 = MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001)))
*              vdt_bar_1001 = mu_bnd_1388.1
*              vdt_foo_1002 = mu_bnd_1388.2
*         IN   SUM(0,1)(vdt_foo_1002)
*         END
_1112:type_1110
v1_1304:type_1091.1
v2_1305:type_1091.1

XXXX exp_analyze 18 exp = eqarg2_1014
XXXX exp_analyze 18 con = SUM_0(0,1)(type_1110)
exp_valid called with expression =
eqarg2_1014

exp_valid returned
XXXX exp_analyze 18 con' = SUM_0(0,1)(type_1099)
XXXX exp_analyze 18 -----------------------------
XXXX finding path1
XXXX finding path2
XXXX finding path1
XXXX finding path2
XXXX finding path1
XXXX finding path2
exp_valid returned
bnd_valid returned
bnd_valid called with bnd =
_1114 : Unknown = record(1>_1112, 2>_1113)

exp_valid called with expression =
record(1>_1112, 2>_1113)

exp_valid called with expression =
_1112

exp_valid returned
exp_valid called with expression =
_1113

exp_valid returned
exp_valid returned
bnd_valid returned
bnd_valid called with bnd =
          _1115 : Unknown = Let  funarg_1309 : Unknown = _1114
*                                funarg_1_1310 : Unknown = select[1][](funarg_1309)
*                                funarg_2_1311 : Unknown = select[2][](funarg_1309)
*                                _1312 : Unknown = App_Open(vars_eq_1_1005;  ; funarg_1_1310, funarg_2_1311;  )
*                           In   _1312
*                           End

exp_valid called with expression =
          Let  funarg_1309 : Unknown = _1114
*              funarg_1_1310 : Unknown = select[1][](funarg_1309)
*              funarg_2_1311 : Unknown = select[2][](funarg_1309)
*              _1312 : Unknown = App_Open(vars_eq_1_1005;  ; funarg_1_1310, funarg_2_1311;  )
*         In   _1312
*         End

bnd_valid called with bnd =
funarg_1309 : Unknown = _1114

exp_valid called with expression =
_1114

exp_valid returned
bnd_valid returned
bnd_valid called with bnd =
funarg_1_1310 : Unknown = select[1][](funarg_1309)

exp_valid called with expression =
select[1][](funarg_1309)

exp_valid called with expression =
funarg_1309

exp_valid returned
exp_valid returned
bnd_valid returned
bnd_valid called with bnd =
funarg_2_1311 : Unknown = select[2][](funarg_1309)

exp_valid called with expression =
select[2][](funarg_1309)

exp_valid called with expression =
funarg_1309

exp_valid returned
exp_valid returned
bnd_valid returned
bnd_valid called with bnd =
_1312 : Unknown = App_Open(vars_eq_1_1005;  ; funarg_1_1310, funarg_2_1311;  )

exp_valid called with expression =
App_Open(vars_eq_1_1005;  ; funarg_1_1310, funarg_2_1311;  )

exp_valid called with expression =
vars_eq_1_1005

exp_valid returned
XXXX exp_analyze 19 -----------------------------
XXXX exp_analyze 19 context = 
 Constructor variables, kinds, and equations are :
type_1111 = SUM_0(0,1)(type_1110)::SINGLE_TYPE(SUM_0(0,1)(type_1110))
type_1110 = PROJ(MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001))),2)::SINGLE_TYPE(type_1091.2)
type_1104 = PROJ(MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001))),1)::SINGLE_TYPE(type_1091.1)
type_1101 = PROJ(MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001))),1)::SINGLE_TYPE(type_1091.1)
type_1100 = SUM(0,1)(type_1099)::SINGLE_TYPE(SUM(0,1)(type_1099))
type_1099 = PROJ(MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001))),2)::SINGLE_TYPE(type_1091.2)
type_1096 = SUM(2,2)(type_1095)::SINGLE_TYPE(SUM(2,2)(type_1095))
type_1095 = CREC{}::REC_K{}
type_1094 = PROJ(MU_NR((_999=SUM(2,2)(CREC{}))),1)::SINGLE_TYPE(type_1093.1)
type_1093 = MU_NR((_999=SUM(2,2)(CREC{})))::REC_K{1 > _1385 :  SINGLE_TYPE(PROJ(MU_NR((_999=SUM(2,2)(CREC{}))),1))}
type_1091 = MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001)))::          REC_K{1 > vdt_bar_1383 : 
*               SINGLE_TYPE(PROJ(MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001))),1)),
*               2 > vdt_foo_1384 : 
*               SINGLE_TYPE(PROJ(MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001))),2))}
type_1088 = PROJ(MU_NR((_997=SUM(2,2)(CREC{}))),1)::SINGLE_TYPE(type_1087.1)
type_1087 = MU_NR((_997=SUM(2,2)(CREC{})))::REC_K{1 > _1382 :  SINGLE_TYPE(PROJ(MU_NR((_997=SUM(2,2)(CREC{}))),1))}
mpoly_var_c_994::REC_K{'a > 'a_996 :  TYPE}
_1058 =           LET  _1058 =  FUN('a_1057 ::  TYPE) = SUM(0,1)(APP(_1050,('a_1057)))
*         IN   _1058
*         END::Arrow_k(Open; 'a_1057 : TYPE; SINGLE_TYPE(SUM(0,1)(APP(_1050,('a_1057)))))
_1055 =           LET  _1055 =  FUN('a_1052 ::  TYPE) = SUM(0,1)(APP(_1047,('a_1052)))
*         IN   _1055
*         END::Arrow_k(Open; 'a_1052 : TYPE; SINGLE_TYPE(SUM(0,1)(APP(_1047,('a_1052)))))
_1050 =           LET  _1050 =  FUN('a_1049 ::  TYPE) = APP(_1041,('a_1049))
*         IN   _1050
*         END::Arrow_k(Open; 'a_1049 : TYPE; SINGLE_TYPE(APP(_1041,('a_1049))))
_1047 =           LET  _1047 =  FUN('a_1046 ::  TYPE) = APP(_1044,('a_1046))
*         IN   _1047
*         END::Arrow_k(Open; 'a_1046 : TYPE; SINGLE_TYPE(APP(_1044,('a_1046))))
_1044 =           LET  _1044 =  FUN('a_1043 ::  TYPE) = PROJ(APP(_990,('a_1043)),2)
*         IN   _1044
*         END::Arrow_k(Open; 'a_1043 : TYPE; SINGLE_TYPE(PROJ(APP(_990,('a_1043)),2)))
_1041 =           LET  _1041 =  FUN('a_1040 ::  TYPE) = PROJ(APP(_990,('a_1040)),1)
*         IN   _1041
*         END::Arrow_k(Open; 'a_1040 : TYPE; SINGLE_TYPE(PROJ(APP(_990,('a_1040)),1)))
_990 =           LET  _990 =  FUN('a_987 ::  TYPE) = MU((vdt_bar_988=SUM(0,1)(vdt_foo_989), vdt_foo_989=SUM(0,1)(vdt_bar_988)))
*         IN   _990
*         END::          Arrow_k(Open; 'a_987 : TYPE; REC_K{1 > vdt_bar_1370 : 
*                                            SINGLE_TYPE(PROJ(MU((vdt_bar_988=SUM(0,1)(vdt_foo_989),
*                                                                 vdt_foo_989=SUM(0,1)(vdt_bar_988))),1)),
*                                            2 > vdt_foo_1371 : 
*                                            SINGLE_TYPE(PROJ(MU((vdt_bar_988=SUM(0,1)(vdt_foo_989),
*                                                                 vdt_foo_989=SUM(0,1)(vdt_bar_988))),2))})

 Expression variables and constructors are :
_bar_foo_eq_r_993:          ALLARROW(Open; TOTAL; (mpoly_var_c_994 :: REC_K{'a > 'a_996 :  TYPE}); 
*            (DEP_RECORD[ ]); 0; 
*            LET  type_1150 = ALLARROW(Open; PARTIAL; (); 
*                                (PROJ(MU((vdt_bar_1290=SUM(0,1)(vdt_foo_1291), vdt_foo_1291=SUM(0,1)(vdt_bar_1290))),1),
*                                 PROJ(MU((vdt_bar_1292=SUM(0,1)(vdt_foo_1293), vdt_foo_1293=SUM(0,1)(vdt_bar_1292))),1)); 0; 
*                                LET  type_1148 = MU_NR((_1038=SUM(2,2)(CREC{})))
*                                     type_1149 = type_1148.1
*                                IN   type_1149
*                                END)
*                 type_1163 = ALLARROW(Open; PARTIAL; (); 
*                                (PROJ(MU((vdt_bar_1298=SUM(0,1)(vdt_foo_1299), vdt_foo_1299=SUM(0,1)(vdt_bar_1298))),2),
*                                 PROJ(MU((vdt_bar_1300=SUM(0,1)(vdt_foo_1301), vdt_foo_1301=SUM(0,1)(vdt_bar_1300))),2)); 0; 
*                                LET  type_1161 = MU_NR((_1033=SUM(2,2)(CREC{})))
*                                     type_1162 = type_1161.1
*                                IN   type_1162
*                                END)
*                 type_1164 = RECORD[1, 2](type_1150, type_1163)
*            IN   type_1164
*            END)
mpoly_var_r_995:DEP_RECORD[ ]
vars_eq_0_1004:ALLARROW(Open; TOTAL; (); (type_1091.1, type_1091.1); 0; type_1088)
vars_eq_1_1005:ALLARROW(Open; TOTAL; (); (type_1091.2, type_1091.2); 0; type_1088)
arg_pair_1006:RECORD[1, 2](type_1091.1, type_1091.1)
eqarg1_1013:SUM_0(0,1)(type_1099)
eqarg2_1014:SUM_0(0,1)(type_1099)
_1097:SUM_0(2,2)(type_1095)
false_1098:type_1094
arg_pair_1_1102:type_1091.1
eqargpair_1_1103:          LET  mu_bnd_1387 = MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001)))
*              vdt_bar_1001 = mu_bnd_1387.1
*              vdt_foo_1002 = mu_bnd_1387.2
*         IN   SUM(0,1)(vdt_foo_1002)
*         END
arg_pair_2_1105:type_1091.1
eqargpair_2_1106:          LET  mu_bnd_1388 = MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001)))
*              vdt_bar_1001 = mu_bnd_1388.1
*              vdt_foo_1002 = mu_bnd_1388.2
*         IN   SUM(0,1)(vdt_foo_1002)
*         END
_1112:type_1110
_1113:type_1110
_1114:RECORD[1, 2](type_1110, type_1110)
v1_1304:type_1091.1
v2_1305:type_1091.1
funarg_1309:RECORD[1, 2](type_1110, type_1110)
funarg_1_1310:type_1110
funarg_2_1311:type_1110

XXXX exp_analyze 19 exp = funarg_1_1310
XXXX exp_analyze 19 con = type_1091.2
exp_valid called with expression =
funarg_1_1310

exp_valid returned
XXXX exp_analyze 19 con' = type_1110
XXXX exp_analyze 19 -----------------------------
XXXX finding path1
XXXX finding path2
XXXX finding path1
XXXX finding path2
XXXX exp_analyze 20 -----------------------------
XXXX exp_analyze 20 context = 
 Constructor variables, kinds, and equations are :
type_1111 = SUM_0(0,1)(type_1110)::SINGLE_TYPE(SUM_0(0,1)(type_1110))
type_1110 = PROJ(MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001))),2)::SINGLE_TYPE(type_1091.2)
type_1104 = PROJ(MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001))),1)::SINGLE_TYPE(type_1091.1)
type_1101 = PROJ(MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001))),1)::SINGLE_TYPE(type_1091.1)
type_1100 = SUM(0,1)(type_1099)::SINGLE_TYPE(SUM(0,1)(type_1099))
type_1099 = PROJ(MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001))),2)::SINGLE_TYPE(type_1091.2)
type_1096 = SUM(2,2)(type_1095)::SINGLE_TYPE(SUM(2,2)(type_1095))
type_1095 = CREC{}::REC_K{}
type_1094 = PROJ(MU_NR((_999=SUM(2,2)(CREC{}))),1)::SINGLE_TYPE(type_1093.1)
type_1093 = MU_NR((_999=SUM(2,2)(CREC{})))::REC_K{1 > _1385 :  SINGLE_TYPE(PROJ(MU_NR((_999=SUM(2,2)(CREC{}))),1))}
type_1091 = MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001)))::          REC_K{1 > vdt_bar_1383 : 
*               SINGLE_TYPE(PROJ(MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001))),1)),
*               2 > vdt_foo_1384 : 
*               SINGLE_TYPE(PROJ(MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001))),2))}
type_1088 = PROJ(MU_NR((_997=SUM(2,2)(CREC{}))),1)::SINGLE_TYPE(type_1087.1)
type_1087 = MU_NR((_997=SUM(2,2)(CREC{})))::REC_K{1 > _1382 :  SINGLE_TYPE(PROJ(MU_NR((_997=SUM(2,2)(CREC{}))),1))}
mpoly_var_c_994::REC_K{'a > 'a_996 :  TYPE}
_1058 =           LET  _1058 =  FUN('a_1057 ::  TYPE) = SUM(0,1)(APP(_1050,('a_1057)))
*         IN   _1058
*         END::Arrow_k(Open; 'a_1057 : TYPE; SINGLE_TYPE(SUM(0,1)(APP(_1050,('a_1057)))))
_1055 =           LET  _1055 =  FUN('a_1052 ::  TYPE) = SUM(0,1)(APP(_1047,('a_1052)))
*         IN   _1055
*         END::Arrow_k(Open; 'a_1052 : TYPE; SINGLE_TYPE(SUM(0,1)(APP(_1047,('a_1052)))))
_1050 =           LET  _1050 =  FUN('a_1049 ::  TYPE) = APP(_1041,('a_1049))
*         IN   _1050
*         END::Arrow_k(Open; 'a_1049 : TYPE; SINGLE_TYPE(APP(_1041,('a_1049))))
_1047 =           LET  _1047 =  FUN('a_1046 ::  TYPE) = APP(_1044,('a_1046))
*         IN   _1047
*         END::Arrow_k(Open; 'a_1046 : TYPE; SINGLE_TYPE(APP(_1044,('a_1046))))
_1044 =           LET  _1044 =  FUN('a_1043 ::  TYPE) = PROJ(APP(_990,('a_1043)),2)
*         IN   _1044
*         END::Arrow_k(Open; 'a_1043 : TYPE; SINGLE_TYPE(PROJ(APP(_990,('a_1043)),2)))
_1041 =           LET  _1041 =  FUN('a_1040 ::  TYPE) = PROJ(APP(_990,('a_1040)),1)
*         IN   _1041
*         END::Arrow_k(Open; 'a_1040 : TYPE; SINGLE_TYPE(PROJ(APP(_990,('a_1040)),1)))
_990 =           LET  _990 =  FUN('a_987 ::  TYPE) = MU((vdt_bar_988=SUM(0,1)(vdt_foo_989), vdt_foo_989=SUM(0,1)(vdt_bar_988)))
*         IN   _990
*         END::          Arrow_k(Open; 'a_987 : TYPE; REC_K{1 > vdt_bar_1370 : 
*                                            SINGLE_TYPE(PROJ(MU((vdt_bar_988=SUM(0,1)(vdt_foo_989),
*                                                                 vdt_foo_989=SUM(0,1)(vdt_bar_988))),1)),
*                                            2 > vdt_foo_1371 : 
*                                            SINGLE_TYPE(PROJ(MU((vdt_bar_988=SUM(0,1)(vdt_foo_989),
*                                                                 vdt_foo_989=SUM(0,1)(vdt_bar_988))),2))})

 Expression variables and constructors are :
_bar_foo_eq_r_993:          ALLARROW(Open; TOTAL; (mpoly_var_c_994 :: REC_K{'a > 'a_996 :  TYPE}); 
*            (DEP_RECORD[ ]); 0; 
*            LET  type_1150 = ALLARROW(Open; PARTIAL; (); 
*                                (PROJ(MU((vdt_bar_1290=SUM(0,1)(vdt_foo_1291), vdt_foo_1291=SUM(0,1)(vdt_bar_1290))),1),
*                                 PROJ(MU((vdt_bar_1292=SUM(0,1)(vdt_foo_1293), vdt_foo_1293=SUM(0,1)(vdt_bar_1292))),1)); 0; 
*                                LET  type_1148 = MU_NR((_1038=SUM(2,2)(CREC{})))
*                                     type_1149 = type_1148.1
*                                IN   type_1149
*                                END)
*                 type_1163 = ALLARROW(Open; PARTIAL; (); 
*                                (PROJ(MU((vdt_bar_1298=SUM(0,1)(vdt_foo_1299), vdt_foo_1299=SUM(0,1)(vdt_bar_1298))),2),
*                                 PROJ(MU((vdt_bar_1300=SUM(0,1)(vdt_foo_1301), vdt_foo_1301=SUM(0,1)(vdt_bar_1300))),2)); 0; 
*                                LET  type_1161 = MU_NR((_1033=SUM(2,2)(CREC{})))
*                                     type_1162 = type_1161.1
*                                IN   type_1162
*                                END)
*                 type_1164 = RECORD[1, 2](type_1150, type_1163)
*            IN   type_1164
*            END)
mpoly_var_r_995:DEP_RECORD[ ]
vars_eq_0_1004:ALLARROW(Open; TOTAL; (); (type_1091.1, type_1091.1); 0; type_1088)
vars_eq_1_1005:ALLARROW(Open; TOTAL; (); (type_1091.2, type_1091.2); 0; type_1088)
arg_pair_1006:RECORD[1, 2](type_1091.1, type_1091.1)
eqarg1_1013:SUM_0(0,1)(type_1099)
eqarg2_1014:SUM_0(0,1)(type_1099)
_1097:SUM_0(2,2)(type_1095)
false_1098:type_1094
arg_pair_1_1102:type_1091.1
eqargpair_1_1103:          LET  mu_bnd_1387 = MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001)))
*              vdt_bar_1001 = mu_bnd_1387.1
*              vdt_foo_1002 = mu_bnd_1387.2
*         IN   SUM(0,1)(vdt_foo_1002)
*         END
arg_pair_2_1105:type_1091.1
eqargpair_2_1106:          LET  mu_bnd_1388 = MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001)))
*              vdt_bar_1001 = mu_bnd_1388.1
*              vdt_foo_1002 = mu_bnd_1388.2
*         IN   SUM(0,1)(vdt_foo_1002)
*         END
_1112:type_1110
_1113:type_1110
_1114:RECORD[1, 2](type_1110, type_1110)
v1_1304:type_1091.1
v2_1305:type_1091.1
funarg_1309:RECORD[1, 2](type_1110, type_1110)
funarg_1_1310:type_1110
funarg_2_1311:type_1110

XXXX exp_analyze 20 exp = funarg_2_1311
XXXX exp_analyze 20 con = type_1091.2
exp_valid called with expression =
funarg_2_1311

exp_valid returned
XXXX exp_analyze 20 con' = type_1110
XXXX exp_analyze 20 -----------------------------
XXXX finding path1
XXXX finding path2
XXXX finding path1
XXXX finding path2
exp_valid returned
bnd_valid returned
exp_valid called with expression =
_1312

exp_valid returned
exp_valid returned
bnd_valid returned
exp_valid called with expression =
_1115

exp_valid returned
exp_valid returned
XXXX finding path1
XXXX finding path2
XXXX finding path1
XXXX exp_analyze 21 -----------------------------
XXXX exp_analyze 21 context = 
 Constructor variables, kinds, and equations are :
type_1104 = PROJ(MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001))),1)::SINGLE_TYPE(type_1091.1)
type_1101 = PROJ(MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001))),1)::SINGLE_TYPE(type_1091.1)
type_1100 = SUM(0,1)(type_1099)::SINGLE_TYPE(SUM(0,1)(type_1099))
type_1099 = PROJ(MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001))),2)::SINGLE_TYPE(type_1091.2)
type_1096 = SUM(2,2)(type_1095)::SINGLE_TYPE(SUM(2,2)(type_1095))
type_1095 = CREC{}::REC_K{}
type_1094 = PROJ(MU_NR((_999=SUM(2,2)(CREC{}))),1)::SINGLE_TYPE(type_1093.1)
type_1093 = MU_NR((_999=SUM(2,2)(CREC{})))::REC_K{1 > _1385 :  SINGLE_TYPE(PROJ(MU_NR((_999=SUM(2,2)(CREC{}))),1))}
type_1091 = MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001)))::          REC_K{1 > vdt_bar_1383 : 
*               SINGLE_TYPE(PROJ(MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001))),1)),
*               2 > vdt_foo_1384 : 
*               SINGLE_TYPE(PROJ(MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001))),2))}
type_1088 = PROJ(MU_NR((_997=SUM(2,2)(CREC{}))),1)::SINGLE_TYPE(type_1087.1)
type_1087 = MU_NR((_997=SUM(2,2)(CREC{})))::REC_K{1 > _1382 :  SINGLE_TYPE(PROJ(MU_NR((_997=SUM(2,2)(CREC{}))),1))}
mpoly_var_c_994::REC_K{'a > 'a_996 :  TYPE}
_1058 =           LET  _1058 =  FUN('a_1057 ::  TYPE) = SUM(0,1)(APP(_1050,('a_1057)))
*         IN   _1058
*         END::Arrow_k(Open; 'a_1057 : TYPE; SINGLE_TYPE(SUM(0,1)(APP(_1050,('a_1057)))))
_1055 =           LET  _1055 =  FUN('a_1052 ::  TYPE) = SUM(0,1)(APP(_1047,('a_1052)))
*         IN   _1055
*         END::Arrow_k(Open; 'a_1052 : TYPE; SINGLE_TYPE(SUM(0,1)(APP(_1047,('a_1052)))))
_1050 =           LET  _1050 =  FUN('a_1049 ::  TYPE) = APP(_1041,('a_1049))
*         IN   _1050
*         END::Arrow_k(Open; 'a_1049 : TYPE; SINGLE_TYPE(APP(_1041,('a_1049))))
_1047 =           LET  _1047 =  FUN('a_1046 ::  TYPE) = APP(_1044,('a_1046))
*         IN   _1047
*         END::Arrow_k(Open; 'a_1046 : TYPE; SINGLE_TYPE(APP(_1044,('a_1046))))
_1044 =           LET  _1044 =  FUN('a_1043 ::  TYPE) = PROJ(APP(_990,('a_1043)),2)
*         IN   _1044
*         END::Arrow_k(Open; 'a_1043 : TYPE; SINGLE_TYPE(PROJ(APP(_990,('a_1043)),2)))
_1041 =           LET  _1041 =  FUN('a_1040 ::  TYPE) = PROJ(APP(_990,('a_1040)),1)
*         IN   _1041
*         END::Arrow_k(Open; 'a_1040 : TYPE; SINGLE_TYPE(PROJ(APP(_990,('a_1040)),1)))
_990 =           LET  _990 =  FUN('a_987 ::  TYPE) = MU((vdt_bar_988=SUM(0,1)(vdt_foo_989), vdt_foo_989=SUM(0,1)(vdt_bar_988)))
*         IN   _990
*         END::          Arrow_k(Open; 'a_987 : TYPE; REC_K{1 > vdt_bar_1370 : 
*                                            SINGLE_TYPE(PROJ(MU((vdt_bar_988=SUM(0,1)(vdt_foo_989),
*                                                                 vdt_foo_989=SUM(0,1)(vdt_bar_988))),1)),
*                                            2 > vdt_foo_1371 : 
*                                            SINGLE_TYPE(PROJ(MU((vdt_bar_988=SUM(0,1)(vdt_foo_989),
*                                                                 vdt_foo_989=SUM(0,1)(vdt_bar_988))),2))})

 Expression variables and constructors are :
_bar_foo_eq_r_993:          ALLARROW(Open; TOTAL; (mpoly_var_c_994 :: REC_K{'a > 'a_996 :  TYPE}); 
*            (DEP_RECORD[ ]); 0; 
*            LET  type_1150 = ALLARROW(Open; PARTIAL; (); 
*                                (PROJ(MU((vdt_bar_1290=SUM(0,1)(vdt_foo_1291), vdt_foo_1291=SUM(0,1)(vdt_bar_1290))),1),
*                                 PROJ(MU((vdt_bar_1292=SUM(0,1)(vdt_foo_1293), vdt_foo_1293=SUM(0,1)(vdt_bar_1292))),1)); 0; 
*                                LET  type_1148 = MU_NR((_1038=SUM(2,2)(CREC{})))
*                                     type_1149 = type_1148.1
*                                IN   type_1149
*                                END)
*                 type_1163 = ALLARROW(Open; PARTIAL; (); 
*                                (PROJ(MU((vdt_bar_1298=SUM(0,1)(vdt_foo_1299), vdt_foo_1299=SUM(0,1)(vdt_bar_1298))),2),
*                                 PROJ(MU((vdt_bar_1300=SUM(0,1)(vdt_foo_1301), vdt_foo_1301=SUM(0,1)(vdt_bar_1300))),2)); 0; 
*                                LET  type_1161 = MU_NR((_1033=SUM(2,2)(CREC{})))
*                                     type_1162 = type_1161.1
*                                IN   type_1162
*                                END)
*                 type_1164 = RECORD[1, 2](type_1150, type_1163)
*            IN   type_1164
*            END)
mpoly_var_r_995:DEP_RECORD[ ]
vars_eq_0_1004:ALLARROW(Open; TOTAL; (); (type_1091.1, type_1091.1); 0; type_1088)
vars_eq_1_1005:ALLARROW(Open; TOTAL; (); (type_1091.2, type_1091.2); 0; type_1088)
arg_pair_1006:RECORD[1, 2](type_1091.1, type_1091.1)
eqarg1_1013:SUM_0(0,1)(type_1099)
_1097:SUM_0(2,2)(type_1095)
false_1098:type_1094
arg_pair_1_1102:type_1091.1
eqargpair_1_1103:          LET  mu_bnd_1387 = MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001)))
*              vdt_bar_1001 = mu_bnd_1387.1
*              vdt_foo_1002 = mu_bnd_1387.2
*         IN   SUM(0,1)(vdt_foo_1002)
*         END
arg_pair_2_1105:type_1091.1
eqargpair_2_1106:          LET  mu_bnd_1388 = MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001)))
*              vdt_bar_1001 = mu_bnd_1388.1
*              vdt_foo_1002 = mu_bnd_1388.2
*         IN   SUM(0,1)(vdt_foo_1002)
*         END
v1_1304:type_1091.1
v2_1305:type_1091.1

XXXX exp_analyze 21 exp = false_1098
XXXX exp_analyze 21 con = PROJ(MU_NR((_997=SUM(2,2)(CREC{}))),1)
exp_valid called with expression =
false_1098

exp_valid returned
XXXX exp_analyze 21 con' = type_1094
XXXX exp_analyze 21 -----------------------------
XXXX finding path1
XXXX finding path2
XXXX finding path1
exp_valid returned
bnd_valid returned
exp_valid called with expression =
_1116

exp_valid returned
exp_valid returned
XXXX finding path1
XXXX finding path2
XXXX finding path1
exp_valid returned
bnd_valid returned
exp_valid called with expression =
_1117

exp_valid returned
exp_valid returned
XXXX exp_analyze 16 con' =           LET  type_1099 = type_1091.2
*              type_1100 = SUM(0,1)(type_1099)
*              type_1101 = type_1091.1
*              type_1104 = type_1091.1
*         IN   type_1088
*         END
XXXX exp_analyze 16 -----------------------------
XXXX finding path1
XXXX finding path2
XXXX exp_analyze 22 -----------------------------
XXXX exp_analyze 22 context = 
 Constructor variables, kinds, and equations are :
type_1096 = SUM(2,2)(type_1095)::SINGLE_TYPE(SUM(2,2)(type_1095))
type_1095 = CREC{}::REC_K{}
type_1094 = PROJ(MU_NR((_999=SUM(2,2)(CREC{}))),1)::SINGLE_TYPE(type_1093.1)
type_1093 = MU_NR((_999=SUM(2,2)(CREC{})))::REC_K{1 > _1385 :  SINGLE_TYPE(PROJ(MU_NR((_999=SUM(2,2)(CREC{}))),1))}
type_1091 = MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001)))::          REC_K{1 > vdt_bar_1383 : 
*               SINGLE_TYPE(PROJ(MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001))),1)),
*               2 > vdt_foo_1384 : 
*               SINGLE_TYPE(PROJ(MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001))),2))}
type_1088 = PROJ(MU_NR((_997=SUM(2,2)(CREC{}))),1)::SINGLE_TYPE(type_1087.1)
type_1087 = MU_NR((_997=SUM(2,2)(CREC{})))::REC_K{1 > _1382 :  SINGLE_TYPE(PROJ(MU_NR((_997=SUM(2,2)(CREC{}))),1))}
mpoly_var_c_994::REC_K{'a > 'a_996 :  TYPE}
_1058 =           LET  _1058 =  FUN('a_1057 ::  TYPE) = SUM(0,1)(APP(_1050,('a_1057)))
*         IN   _1058
*         END::Arrow_k(Open; 'a_1057 : TYPE; SINGLE_TYPE(SUM(0,1)(APP(_1050,('a_1057)))))
_1055 =           LET  _1055 =  FUN('a_1052 ::  TYPE) = SUM(0,1)(APP(_1047,('a_1052)))
*         IN   _1055
*         END::Arrow_k(Open; 'a_1052 : TYPE; SINGLE_TYPE(SUM(0,1)(APP(_1047,('a_1052)))))
_1050 =           LET  _1050 =  FUN('a_1049 ::  TYPE) = APP(_1041,('a_1049))
*         IN   _1050
*         END::Arrow_k(Open; 'a_1049 : TYPE; SINGLE_TYPE(APP(_1041,('a_1049))))
_1047 =           LET  _1047 =  FUN('a_1046 ::  TYPE) = APP(_1044,('a_1046))
*         IN   _1047
*         END::Arrow_k(Open; 'a_1046 : TYPE; SINGLE_TYPE(APP(_1044,('a_1046))))
_1044 =           LET  _1044 =  FUN('a_1043 ::  TYPE) = PROJ(APP(_990,('a_1043)),2)
*         IN   _1044
*         END::Arrow_k(Open; 'a_1043 : TYPE; SINGLE_TYPE(PROJ(APP(_990,('a_1043)),2)))
_1041 =           LET  _1041 =  FUN('a_1040 ::  TYPE) = PROJ(APP(_990,('a_1040)),1)
*         IN   _1041
*         END::Arrow_k(Open; 'a_1040 : TYPE; SINGLE_TYPE(PROJ(APP(_990,('a_1040)),1)))
_990 =           LET  _990 =  FUN('a_987 ::  TYPE) = MU((vdt_bar_988=SUM(0,1)(vdt_foo_989), vdt_foo_989=SUM(0,1)(vdt_bar_988)))
*         IN   _990
*         END::          Arrow_k(Open; 'a_987 : TYPE; REC_K{1 > vdt_bar_1370 : 
*                                            SINGLE_TYPE(PROJ(MU((vdt_bar_988=SUM(0,1)(vdt_foo_989),
*                                                                 vdt_foo_989=SUM(0,1)(vdt_bar_988))),1)),
*                                            2 > vdt_foo_1371 : 
*                                            SINGLE_TYPE(PROJ(MU((vdt_bar_988=SUM(0,1)(vdt_foo_989),
*                                                                 vdt_foo_989=SUM(0,1)(vdt_bar_988))),2))})

 Expression variables and constructors are :
_bar_foo_eq_r_993:          ALLARROW(Open; TOTAL; (mpoly_var_c_994 :: REC_K{'a > 'a_996 :  TYPE}); 
*            (DEP_RECORD[ ]); 0; 
*            LET  type_1150 = ALLARROW(Open; PARTIAL; (); 
*                                (PROJ(MU((vdt_bar_1290=SUM(0,1)(vdt_foo_1291), vdt_foo_1291=SUM(0,1)(vdt_bar_1290))),1),
*                                 PROJ(MU((vdt_bar_1292=SUM(0,1)(vdt_foo_1293), vdt_foo_1293=SUM(0,1)(vdt_bar_1292))),1)); 0; 
*                                LET  type_1148 = MU_NR((_1038=SUM(2,2)(CREC{})))
*                                     type_1149 = type_1148.1
*                                IN   type_1149
*                                END)
*                 type_1163 = ALLARROW(Open; PARTIAL; (); 
*                                (PROJ(MU((vdt_bar_1298=SUM(0,1)(vdt_foo_1299), vdt_foo_1299=SUM(0,1)(vdt_bar_1298))),2),
*                                 PROJ(MU((vdt_bar_1300=SUM(0,1)(vdt_foo_1301), vdt_foo_1301=SUM(0,1)(vdt_bar_1300))),2)); 0; 
*                                LET  type_1161 = MU_NR((_1033=SUM(2,2)(CREC{})))
*                                     type_1162 = type_1161.1
*                                IN   type_1162
*                                END)
*                 type_1164 = RECORD[1, 2](type_1150, type_1163)
*            IN   type_1164
*            END)
mpoly_var_r_995:DEP_RECORD[ ]
vars_eq_0_1004:ALLARROW(Open; TOTAL; (); (type_1091.1, type_1091.1); 0; type_1088)
vars_eq_1_1005:ALLARROW(Open; TOTAL; (); (type_1091.2, type_1091.2); 0; type_1088)
_1097:SUM_0(2,2)(type_1095)
false_1098:type_1094
v1_1313:type_1091.2
v2_1314:type_1091.2

XXXX exp_analyze 22 exp =           Let  arg_pair_1016 : Unknown = record(1>v1_1313, 2>v2_1314)
*              type_1118 = type_1091.1
*              type_1119 = SUM(0,1)(type_1118)
*              type_1120 = type_1091.2
*              arg_pair_1_1121 : Unknown = select[1][](arg_pair_1016)
*              eqargpair_1_1122 : Unknown = unroll[type_1120](arg_pair_1_1121)
*              type_1123 = type_1091.2
*              arg_pair_2_1124 : Unknown = select[2][](arg_pair_1016)
*              eqargpair_2_1125 : Unknown = unroll[type_1123](arg_pair_2_1124)
*              _1136 : Unknown = 
*                SUM_SWITCH(eqargpair_1_1122: type_1119, 
*                     eqarg1_1021, 
*                     0: Unknown:: 
*                       Let  _1135 : Unknown = 
*                              SUM_SWITCH(eqargpair_2_1125: type_1119, 
*                                   eqarg2_1022, 
*                                   0: Unknown:: 
*                                     Let  type_1129 = type_1091.1
*                                          type_1130 = SUM_0(0,1)(type_1129)
*                                          _1131 : Unknown = project_known0[type_1130](eqarg1_1021)
*                                          _1132 : Unknown = project_known0[type_1130](eqarg2_1022)
*                                          _1133 : Unknown = record(1>_1131, 2>_1132)
*                                          _1134 : Unknown = 
*                                            Let  funarg_1318 : Unknown = _1133
*                                                 funarg_1_1319 : Unknown = select[1][](funarg_1318)
*                                                 funarg_2_1320 : Unknown = select[2][](funarg_1318)
*                                                 _1321 : Unknown = App_Open(vars_eq_0_1004;  ; funarg_1_1319, funarg_2_1320;  )
*                                            In   _1321
*                                            End
*                                     In   _1134
*                                     End
*                                   DEFAULT = false_1098) : type_1088
*                       In   _1135
*                       End
*                     NODEFAULT) : type_1088
*         In   _1136
*         End
XXXX exp_analyze 22 con = type_1088
exp_valid called with expression =
          Let  arg_pair_1016 : Unknown = record(1>v1_1313, 2>v2_1314)
*              type_1118 = type_1091.1
*              type_1119 = SUM(0,1)(type_1118)
*              type_1120 = type_1091.2
*              arg_pair_1_1121 : Unknown = select[1][](arg_pair_1016)
*              eqargpair_1_1122 : Unknown = unroll[type_1120](arg_pair_1_1121)
*              type_1123 = type_1091.2
*              arg_pair_2_1124 : Unknown = select[2][](arg_pair_1016)
*              eqargpair_2_1125 : Unknown = unroll[type_1123](arg_pair_2_1124)
*              _1136 : Unknown = 
*                SUM_SWITCH(eqargpair_1_1122: type_1119, 
*                     eqarg1_1021, 
*                     0: Unknown:: 
*                       Let  _1135 : Unknown = 
*                              SUM_SWITCH(eqargpair_2_1125: type_1119, 
*                                   eqarg2_1022, 
*                                   0: Unknown:: 
*                                     Let  type_1129 = type_1091.1
*                                          type_1130 = SUM_0(0,1)(type_1129)
*                                          _1131 : Unknown = project_known0[type_1130](eqarg1_1021)
*                                          _1132 : Unknown = project_known0[type_1130](eqarg2_1022)
*                                          _1133 : Unknown = record(1>_1131, 2>_1132)
*                                          _1134 : Unknown = 
*                                            Let  funarg_1318 : Unknown = _1133
*                                                 funarg_1_1319 : Unknown = select[1][](funarg_1318)
*                                                 funarg_2_1320 : Unknown = select[2][](funarg_1318)
*                                                 _1321 : Unknown = App_Open(vars_eq_0_1004;  ; funarg_1_1319, funarg_2_1320;  )
*                                            In   _1321
*                                            End
*                                     In   _1134
*                                     End
*                                   DEFAULT = false_1098) : type_1088
*                       In   _1135
*                       End
*                     NODEFAULT) : type_1088
*         In   _1136
*         End

bnd_valid called with bnd =
arg_pair_1016 : Unknown = record(1>v1_1313, 2>v2_1314)

exp_valid called with expression =
record(1>v1_1313, 2>v2_1314)

exp_valid called with expression =
v1_1313

exp_valid returned
exp_valid called with expression =
v2_1314

exp_valid returned
exp_valid returned
bnd_valid returned
bnd_valid called with bnd =
type_1118 = type_1091.1

con_valid called with constructor =
type_1091.1

con_valid called with constructor =
type_1091

con_valid returned
con_valid returned
bnd_valid returned
bnd_valid called with bnd =
type_1119 = SUM(0,1)(type_1118)

con_valid called with constructor =
SUM(0,1)(type_1118)

con_valid returned
bnd_valid returned
bnd_valid called with bnd =
type_1120 = type_1091.2

con_valid called with constructor =
type_1091.2

con_valid called with constructor =
type_1091

con_valid returned
con_valid returned
bnd_valid returned
bnd_valid called with bnd =
arg_pair_1_1121 : Unknown = select[1][](arg_pair_1016)

exp_valid called with expression =
select[1][](arg_pair_1016)

exp_valid called with expression =
arg_pair_1016

exp_valid returned
exp_valid returned
bnd_valid returned
bnd_valid called with bnd =
eqargpair_1_1122 : Unknown = unroll[type_1120](arg_pair_1_1121)

exp_valid called with expression =
unroll[type_1120](arg_pair_1_1121)

exp_valid called with expression =
arg_pair_1_1121

exp_valid returned
XXXX finding path1
XXXX finding path2
XXXX finding path1
XXXX finding path2
exp_valid returned
bnd_valid returned
bnd_valid called with bnd =
type_1123 = type_1091.2

con_valid called with constructor =
type_1091.2

con_valid called with constructor =
type_1091

con_valid returned
con_valid returned
bnd_valid returned
bnd_valid called with bnd =
arg_pair_2_1124 : Unknown = select[2][](arg_pair_1016)

exp_valid called with expression =
select[2][](arg_pair_1016)

exp_valid called with expression =
arg_pair_1016

exp_valid returned
exp_valid returned
bnd_valid returned
bnd_valid called with bnd =
eqargpair_2_1125 : Unknown = unroll[type_1123](arg_pair_2_1124)

exp_valid called with expression =
unroll[type_1123](arg_pair_2_1124)

exp_valid called with expression =
arg_pair_2_1124

exp_valid returned
XXXX finding path1
XXXX finding path2
XXXX finding path1
XXXX finding path2
exp_valid returned
bnd_valid returned
bnd_valid called with bnd =
          _1136 : Unknown = 
*           SUM_SWITCH(eqargpair_1_1122: type_1119, 
*                eqarg1_1021, 
*                0: Unknown:: 
*                  Let  _1135 : Unknown = 
*                         SUM_SWITCH(eqargpair_2_1125: type_1119, 
*                              eqarg2_1022, 
*                              0: Unknown:: 
*                                Let  type_1129 = type_1091.1
*                                     type_1130 = SUM_0(0,1)(type_1129)
*                                     _1131 : Unknown = project_known0[type_1130](eqarg1_1021)
*                                     _1132 : Unknown = project_known0[type_1130](eqarg2_1022)
*                                     _1133 : Unknown = record(1>_1131, 2>_1132)
*                                     _1134 : Unknown = 
*                                       Let  funarg_1318 : Unknown = _1133
*                                            funarg_1_1319 : Unknown = select[1][](funarg_1318)
*                                            funarg_2_1320 : Unknown = select[2][](funarg_1318)
*                                            _1321 : Unknown = App_Open(vars_eq_0_1004;  ; funarg_1_1319, funarg_2_1320;  )
*                                       In   _1321
*                                       End
*                                In   _1134
*                                End
*                              DEFAULT = false_1098) : type_1088
*                  In   _1135
*                  End
*                NODEFAULT) : type_1088

exp_valid called with expression =
          SUM_SWITCH(eqargpair_1_1122: type_1119, 
*              eqarg1_1021, 
*              0: Unknown:: 
*                Let  _1135 : Unknown = 
*                       SUM_SWITCH(eqargpair_2_1125: type_1119, 
*                            eqarg2_1022, 
*                            0: Unknown:: 
*                              Let  type_1129 = type_1091.1
*                                   type_1130 = SUM_0(0,1)(type_1129)
*                                   _1131 : Unknown = project_known0[type_1130](eqarg1_1021)
*                                   _1132 : Unknown = project_known0[type_1130](eqarg2_1022)
*                                   _1133 : Unknown = record(1>_1131, 2>_1132)
*                                   _1134 : Unknown = 
*                                     Let  funarg_1318 : Unknown = _1133
*                                          funarg_1_1319 : Unknown = select[1][](funarg_1318)
*                                          funarg_2_1320 : Unknown = select[2][](funarg_1318)
*                                          _1321 : Unknown = App_Open(vars_eq_0_1004;  ; funarg_1_1319, funarg_2_1320;  )
*                                     In   _1321
*                                     End
*                              In   _1134
*                              End
*                            DEFAULT = false_1098) : type_1088
*                In   _1135
*                End
*              NODEFAULT) : type_1088

exp_valid called with expression =
eqargpair_1_1122

exp_valid returned
XXXX finding path1
XXXX finding path2
XXXX finding path1
XXXX finding path2
XXXX finding path1
XXXX finding path2
exp_valid called with expression =
          Let  _1135 : Unknown = 
*                SUM_SWITCH(eqargpair_2_1125: type_1119, 
*                     eqarg2_1022, 
*                     0: Unknown:: 
*                       Let  type_1129 = type_1091.1
*                            type_1130 = SUM_0(0,1)(type_1129)
*                            _1131 : Unknown = project_known0[type_1130](eqarg1_1021)
*                            _1132 : Unknown = project_known0[type_1130](eqarg2_1022)
*                            _1133 : Unknown = record(1>_1131, 2>_1132)
*                            _1134 : Unknown = Let  funarg_1318 : Unknown = _1133
*                                                   funarg_1_1319 : Unknown = select[1][](funarg_1318)
*                                                   funarg_2_1320 : Unknown = select[2][](funarg_1318)
*                                                   _1321 : Unknown = App_Open(vars_eq_0_1004;  ; funarg_1_1319, funarg_2_1320;  )
*                                              In   _1321
*                                              End
*                       In   _1134
*                       End
*                     DEFAULT = false_1098) : type_1088
*         In   _1135
*         End

bnd_valid called with bnd =
          _1135 : Unknown = 
*           SUM_SWITCH(eqargpair_2_1125: type_1119, 
*                eqarg2_1022, 
*                0: Unknown:: 
*                  Let  type_1129 = type_1091.1
*                       type_1130 = SUM_0(0,1)(type_1129)
*                       _1131 : Unknown = project_known0[type_1130](eqarg1_1021)
*                       _1132 : Unknown = project_known0[type_1130](eqarg2_1022)
*                       _1133 : Unknown = record(1>_1131, 2>_1132)
*                       _1134 : Unknown = Let  funarg_1318 : Unknown = _1133
*                                              funarg_1_1319 : Unknown = select[1][](funarg_1318)
*                                              funarg_2_1320 : Unknown = select[2][](funarg_1318)
*                                              _1321 : Unknown = App_Open(vars_eq_0_1004;  ; funarg_1_1319, funarg_2_1320;  )
*                                         In   _1321
*                                         End
*                  In   _1134
*                  End
*                DEFAULT = false_1098) : type_1088

exp_valid called with expression =
          SUM_SWITCH(eqargpair_2_1125: type_1119, 
*              eqarg2_1022, 
*              0: Unknown:: 
*                Let  type_1129 = type_1091.1
*                     type_1130 = SUM_0(0,1)(type_1129)
*                     _1131 : Unknown = project_known0[type_1130](eqarg1_1021)
*                     _1132 : Unknown = project_known0[type_1130](eqarg2_1022)
*                     _1133 : Unknown = record(1>_1131, 2>_1132)
*                     _1134 : Unknown = Let  funarg_1318 : Unknown = _1133
*                                            funarg_1_1319 : Unknown = select[1][](funarg_1318)
*                                            funarg_2_1320 : Unknown = select[2][](funarg_1318)
*                                            _1321 : Unknown = App_Open(vars_eq_0_1004;  ; funarg_1_1319, funarg_2_1320;  )
*                                       In   _1321
*                                       End
*                In   _1134
*                End
*              DEFAULT = false_1098) : type_1088

exp_valid called with expression =
eqargpair_2_1125

exp_valid returned
XXXX finding path1
XXXX finding path2
XXXX finding path1
XXXX finding path2
XXXX finding path1
XXXX finding path2
exp_valid called with expression =
          Let  type_1129 = type_1091.1
*              type_1130 = SUM_0(0,1)(type_1129)
*              _1131 : Unknown = project_known0[type_1130](eqarg1_1021)
*              _1132 : Unknown = project_known0[type_1130](eqarg2_1022)
*              _1133 : Unknown = record(1>_1131, 2>_1132)
*              _1134 : Unknown = Let  funarg_1318 : Unknown = _1133
*                                     funarg_1_1319 : Unknown = select[1][](funarg_1318)
*                                     funarg_2_1320 : Unknown = select[2][](funarg_1318)
*                                     _1321 : Unknown = App_Open(vars_eq_0_1004;  ; funarg_1_1319, funarg_2_1320;  )
*                                In   _1321
*                                End
*         In   _1134
*         End

bnd_valid called with bnd =
type_1129 = type_1091.1

con_valid called with constructor =
type_1091.1

con_valid called with constructor =
type_1091

con_valid returned
con_valid returned
bnd_valid returned
bnd_valid called with bnd =
type_1130 = SUM_0(0,1)(type_1129)

con_valid called with constructor =
SUM_0(0,1)(type_1129)

con_valid returned
bnd_valid returned
bnd_valid called with bnd =
_1131 : Unknown = project_known0[type_1130](eqarg1_1021)

exp_valid called with expression =
project_known0[type_1130](eqarg1_1021)

XXXX exp_analyze 23 -----------------------------
XXXX exp_analyze 23 context = 
 Constructor variables, kinds, and equations are :
type_1130 = SUM_0(0,1)(type_1129)::SINGLE_TYPE(SUM_0(0,1)(type_1129))
type_1129 = type_1091.1::SINGLE_TYPE(type_1091.1)
type_1123 = PROJ(MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001))),2)::SINGLE_TYPE(type_1091.2)
type_1120 = PROJ(MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001))),2)::SINGLE_TYPE(type_1091.2)
type_1119 = SUM(0,1)(type_1118)::SINGLE_TYPE(SUM(0,1)(type_1118))
type_1118 = PROJ(MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001))),1)::SINGLE_TYPE(type_1091.1)
type_1096 = SUM(2,2)(type_1095)::SINGLE_TYPE(SUM(2,2)(type_1095))
type_1095 = CREC{}::REC_K{}
type_1094 = PROJ(MU_NR((_999=SUM(2,2)(CREC{}))),1)::SINGLE_TYPE(type_1093.1)
type_1093 = MU_NR((_999=SUM(2,2)(CREC{})))::REC_K{1 > _1385 :  SINGLE_TYPE(PROJ(MU_NR((_999=SUM(2,2)(CREC{}))),1))}
type_1091 = MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001)))::          REC_K{1 > vdt_bar_1383 : 
*               SINGLE_TYPE(PROJ(MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001))),1)),
*               2 > vdt_foo_1384 : 
*               SINGLE_TYPE(PROJ(MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001))),2))}
type_1088 = PROJ(MU_NR((_997=SUM(2,2)(CREC{}))),1)::SINGLE_TYPE(type_1087.1)
type_1087 = MU_NR((_997=SUM(2,2)(CREC{})))::REC_K{1 > _1382 :  SINGLE_TYPE(PROJ(MU_NR((_997=SUM(2,2)(CREC{}))),1))}
mpoly_var_c_994::REC_K{'a > 'a_996 :  TYPE}
_1058 =           LET  _1058 =  FUN('a_1057 ::  TYPE) = SUM(0,1)(APP(_1050,('a_1057)))
*         IN   _1058
*         END::Arrow_k(Open; 'a_1057 : TYPE; SINGLE_TYPE(SUM(0,1)(APP(_1050,('a_1057)))))
_1055 =           LET  _1055 =  FUN('a_1052 ::  TYPE) = SUM(0,1)(APP(_1047,('a_1052)))
*         IN   _1055
*         END::Arrow_k(Open; 'a_1052 : TYPE; SINGLE_TYPE(SUM(0,1)(APP(_1047,('a_1052)))))
_1050 =           LET  _1050 =  FUN('a_1049 ::  TYPE) = APP(_1041,('a_1049))
*         IN   _1050
*         END::Arrow_k(Open; 'a_1049 : TYPE; SINGLE_TYPE(APP(_1041,('a_1049))))
_1047 =           LET  _1047 =  FUN('a_1046 ::  TYPE) = APP(_1044,('a_1046))
*         IN   _1047
*         END::Arrow_k(Open; 'a_1046 : TYPE; SINGLE_TYPE(APP(_1044,('a_1046))))
_1044 =           LET  _1044 =  FUN('a_1043 ::  TYPE) = PROJ(APP(_990,('a_1043)),2)
*         IN   _1044
*         END::Arrow_k(Open; 'a_1043 : TYPE; SINGLE_TYPE(PROJ(APP(_990,('a_1043)),2)))
_1041 =           LET  _1041 =  FUN('a_1040 ::  TYPE) = PROJ(APP(_990,('a_1040)),1)
*         IN   _1041
*         END::Arrow_k(Open; 'a_1040 : TYPE; SINGLE_TYPE(PROJ(APP(_990,('a_1040)),1)))
_990 =           LET  _990 =  FUN('a_987 ::  TYPE) = MU((vdt_bar_988=SUM(0,1)(vdt_foo_989), vdt_foo_989=SUM(0,1)(vdt_bar_988)))
*         IN   _990
*         END::          Arrow_k(Open; 'a_987 : TYPE; REC_K{1 > vdt_bar_1370 : 
*                                            SINGLE_TYPE(PROJ(MU((vdt_bar_988=SUM(0,1)(vdt_foo_989),
*                                                                 vdt_foo_989=SUM(0,1)(vdt_bar_988))),1)),
*                                            2 > vdt_foo_1371 : 
*                                            SINGLE_TYPE(PROJ(MU((vdt_bar_988=SUM(0,1)(vdt_foo_989),
*                                                                 vdt_foo_989=SUM(0,1)(vdt_bar_988))),2))})

 Expression variables and constructors are :
_bar_foo_eq_r_993:          ALLARROW(Open; TOTAL; (mpoly_var_c_994 :: REC_K{'a > 'a_996 :  TYPE}); 
*            (DEP_RECORD[ ]); 0; 
*            LET  type_1150 = ALLARROW(Open; PARTIAL; (); 
*                                (PROJ(MU((vdt_bar_1290=SUM(0,1)(vdt_foo_1291), vdt_foo_1291=SUM(0,1)(vdt_bar_1290))),1),
*                                 PROJ(MU((vdt_bar_1292=SUM(0,1)(vdt_foo_1293), vdt_foo_1293=SUM(0,1)(vdt_bar_1292))),1)); 0; 
*                                LET  type_1148 = MU_NR((_1038=SUM(2,2)(CREC{})))
*                                     type_1149 = type_1148.1
*                                IN   type_1149
*                                END)
*                 type_1163 = ALLARROW(Open; PARTIAL; (); 
*                                (PROJ(MU((vdt_bar_1298=SUM(0,1)(vdt_foo_1299), vdt_foo_1299=SUM(0,1)(vdt_bar_1298))),2),
*                                 PROJ(MU((vdt_bar_1300=SUM(0,1)(vdt_foo_1301), vdt_foo_1301=SUM(0,1)(vdt_bar_1300))),2)); 0; 
*                                LET  type_1161 = MU_NR((_1033=SUM(2,2)(CREC{})))
*                                     type_1162 = type_1161.1
*                                IN   type_1162
*                                END)
*                 type_1164 = RECORD[1, 2](type_1150, type_1163)
*            IN   type_1164
*            END)
mpoly_var_r_995:DEP_RECORD[ ]
vars_eq_0_1004:ALLARROW(Open; TOTAL; (); (type_1091.1, type_1091.1); 0; type_1088)
vars_eq_1_1005:ALLARROW(Open; TOTAL; (); (type_1091.2, type_1091.2); 0; type_1088)
arg_pair_1016:RECORD[1, 2](type_1091.2, type_1091.2)
eqarg1_1021:SUM_0(0,1)(type_1118)
eqarg2_1022:SUM_0(0,1)(type_1118)
_1097:SUM_0(2,2)(type_1095)
false_1098:type_1094
arg_pair_1_1121:type_1091.2
eqargpair_1_1122:          LET  mu_bnd_1389 = MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001)))
*              vdt_bar_1001 = mu_bnd_1389.1
*              vdt_foo_1002 = mu_bnd_1389.2
*         IN   SUM(0,1)(vdt_bar_1001)
*         END
arg_pair_2_1124:type_1091.2
eqargpair_2_1125:          LET  mu_bnd_1390 = MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001)))
*              vdt_bar_1001 = mu_bnd_1390.1
*              vdt_foo_1002 = mu_bnd_1390.2
*         IN   SUM(0,1)(vdt_bar_1001)
*         END
v1_1313:type_1091.2
v2_1314:type_1091.2

XXXX exp_analyze 23 exp = eqarg1_1021
XXXX exp_analyze 23 con = SUM_0(0,1)(type_1129)
exp_valid called with expression =
eqarg1_1021

exp_valid returned
XXXX exp_analyze 23 con' = SUM_0(0,1)(type_1118)
XXXX exp_analyze 23 -----------------------------
XXXX finding path1
XXXX finding path2
XXXX finding path1
XXXX finding path2
XXXX finding path1
XXXX finding path2
exp_valid returned
bnd_valid returned
bnd_valid called with bnd =
_1132 : Unknown = project_known0[type_1130](eqarg2_1022)

exp_valid called with expression =
project_known0[type_1130](eqarg2_1022)

XXXX exp_analyze 24 -----------------------------
XXXX exp_analyze 24 context = 
 Constructor variables, kinds, and equations are :
type_1130 = SUM_0(0,1)(type_1129)::SINGLE_TYPE(SUM_0(0,1)(type_1129))
type_1129 = PROJ(MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001))),1)::SINGLE_TYPE(type_1091.1)
type_1123 = PROJ(MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001))),2)::SINGLE_TYPE(type_1091.2)
type_1120 = PROJ(MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001))),2)::SINGLE_TYPE(type_1091.2)
type_1119 = SUM(0,1)(type_1118)::SINGLE_TYPE(SUM(0,1)(type_1118))
type_1118 = PROJ(MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001))),1)::SINGLE_TYPE(type_1091.1)
type_1096 = SUM(2,2)(type_1095)::SINGLE_TYPE(SUM(2,2)(type_1095))
type_1095 = CREC{}::REC_K{}
type_1094 = PROJ(MU_NR((_999=SUM(2,2)(CREC{}))),1)::SINGLE_TYPE(type_1093.1)
type_1093 = MU_NR((_999=SUM(2,2)(CREC{})))::REC_K{1 > _1385 :  SINGLE_TYPE(PROJ(MU_NR((_999=SUM(2,2)(CREC{}))),1))}
type_1091 = MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001)))::          REC_K{1 > vdt_bar_1383 : 
*               SINGLE_TYPE(PROJ(MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001))),1)),
*               2 > vdt_foo_1384 : 
*               SINGLE_TYPE(PROJ(MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001))),2))}
type_1088 = PROJ(MU_NR((_997=SUM(2,2)(CREC{}))),1)::SINGLE_TYPE(type_1087.1)
type_1087 = MU_NR((_997=SUM(2,2)(CREC{})))::REC_K{1 > _1382 :  SINGLE_TYPE(PROJ(MU_NR((_997=SUM(2,2)(CREC{}))),1))}
mpoly_var_c_994::REC_K{'a > 'a_996 :  TYPE}
_1058 =           LET  _1058 =  FUN('a_1057 ::  TYPE) = SUM(0,1)(APP(_1050,('a_1057)))
*         IN   _1058
*         END::Arrow_k(Open; 'a_1057 : TYPE; SINGLE_TYPE(SUM(0,1)(APP(_1050,('a_1057)))))
_1055 =           LET  _1055 =  FUN('a_1052 ::  TYPE) = SUM(0,1)(APP(_1047,('a_1052)))
*         IN   _1055
*         END::Arrow_k(Open; 'a_1052 : TYPE; SINGLE_TYPE(SUM(0,1)(APP(_1047,('a_1052)))))
_1050 =           LET  _1050 =  FUN('a_1049 ::  TYPE) = APP(_1041,('a_1049))
*         IN   _1050
*         END::Arrow_k(Open; 'a_1049 : TYPE; SINGLE_TYPE(APP(_1041,('a_1049))))
_1047 =           LET  _1047 =  FUN('a_1046 ::  TYPE) = APP(_1044,('a_1046))
*         IN   _1047
*         END::Arrow_k(Open; 'a_1046 : TYPE; SINGLE_TYPE(APP(_1044,('a_1046))))
_1044 =           LET  _1044 =  FUN('a_1043 ::  TYPE) = PROJ(APP(_990,('a_1043)),2)
*         IN   _1044
*         END::Arrow_k(Open; 'a_1043 : TYPE; SINGLE_TYPE(PROJ(APP(_990,('a_1043)),2)))
_1041 =           LET  _1041 =  FUN('a_1040 ::  TYPE) = PROJ(APP(_990,('a_1040)),1)
*         IN   _1041
*         END::Arrow_k(Open; 'a_1040 : TYPE; SINGLE_TYPE(PROJ(APP(_990,('a_1040)),1)))
_990 =           LET  _990 =  FUN('a_987 ::  TYPE) = MU((vdt_bar_988=SUM(0,1)(vdt_foo_989), vdt_foo_989=SUM(0,1)(vdt_bar_988)))
*         IN   _990
*         END::          Arrow_k(Open; 'a_987 : TYPE; REC_K{1 > vdt_bar_1370 : 
*                                            SINGLE_TYPE(PROJ(MU((vdt_bar_988=SUM(0,1)(vdt_foo_989),
*                                                                 vdt_foo_989=SUM(0,1)(vdt_bar_988))),1)),
*                                            2 > vdt_foo_1371 : 
*                                            SINGLE_TYPE(PROJ(MU((vdt_bar_988=SUM(0,1)(vdt_foo_989),
*                                                                 vdt_foo_989=SUM(0,1)(vdt_bar_988))),2))})

 Expression variables and constructors are :
_bar_foo_eq_r_993:          ALLARROW(Open; TOTAL; (mpoly_var_c_994 :: REC_K{'a > 'a_996 :  TYPE}); 
*            (DEP_RECORD[ ]); 0; 
*            LET  type_1150 = ALLARROW(Open; PARTIAL; (); 
*                                (PROJ(MU((vdt_bar_1290=SUM(0,1)(vdt_foo_1291), vdt_foo_1291=SUM(0,1)(vdt_bar_1290))),1),
*                                 PROJ(MU((vdt_bar_1292=SUM(0,1)(vdt_foo_1293), vdt_foo_1293=SUM(0,1)(vdt_bar_1292))),1)); 0; 
*                                LET  type_1148 = MU_NR((_1038=SUM(2,2)(CREC{})))
*                                     type_1149 = type_1148.1
*                                IN   type_1149
*                                END)
*                 type_1163 = ALLARROW(Open; PARTIAL; (); 
*                                (PROJ(MU((vdt_bar_1298=SUM(0,1)(vdt_foo_1299), vdt_foo_1299=SUM(0,1)(vdt_bar_1298))),2),
*                                 PROJ(MU((vdt_bar_1300=SUM(0,1)(vdt_foo_1301), vdt_foo_1301=SUM(0,1)(vdt_bar_1300))),2)); 0; 
*                                LET  type_1161 = MU_NR((_1033=SUM(2,2)(CREC{})))
*                                     type_1162 = type_1161.1
*                                IN   type_1162
*                                END)
*                 type_1164 = RECORD[1, 2](type_1150, type_1163)
*            IN   type_1164
*            END)
mpoly_var_r_995:DEP_RECORD[ ]
vars_eq_0_1004:ALLARROW(Open; TOTAL; (); (type_1091.1, type_1091.1); 0; type_1088)
vars_eq_1_1005:ALLARROW(Open; TOTAL; (); (type_1091.2, type_1091.2); 0; type_1088)
arg_pair_1016:RECORD[1, 2](type_1091.2, type_1091.2)
eqarg1_1021:SUM_0(0,1)(type_1118)
eqarg2_1022:SUM_0(0,1)(type_1118)
_1097:SUM_0(2,2)(type_1095)
false_1098:type_1094
arg_pair_1_1121:type_1091.2
eqargpair_1_1122:          LET  mu_bnd_1389 = MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001)))
*              vdt_bar_1001 = mu_bnd_1389.1
*              vdt_foo_1002 = mu_bnd_1389.2
*         IN   SUM(0,1)(vdt_bar_1001)
*         END
arg_pair_2_1124:type_1091.2
eqargpair_2_1125:          LET  mu_bnd_1390 = MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001)))
*              vdt_bar_1001 = mu_bnd_1390.1
*              vdt_foo_1002 = mu_bnd_1390.2
*         IN   SUM(0,1)(vdt_bar_1001)
*         END
_1131:type_1129
v1_1313:type_1091.2
v2_1314:type_1091.2

XXXX exp_analyze 24 exp = eqarg2_1022
XXXX exp_analyze 24 con = SUM_0(0,1)(type_1129)
exp_valid called with expression =
eqarg2_1022

exp_valid returned
XXXX exp_analyze 24 con' = SUM_0(0,1)(type_1118)
XXXX exp_analyze 24 -----------------------------
XXXX finding path1
XXXX finding path2
XXXX finding path1
XXXX finding path2
XXXX finding path1
XXXX finding path2
exp_valid returned
bnd_valid returned
bnd_valid called with bnd =
_1133 : Unknown = record(1>_1131, 2>_1132)

exp_valid called with expression =
record(1>_1131, 2>_1132)

exp_valid called with expression =
_1131

exp_valid returned
exp_valid called with expression =
_1132

exp_valid returned
exp_valid returned
bnd_valid returned
bnd_valid called with bnd =
          _1134 : Unknown = Let  funarg_1318 : Unknown = _1133
*                                funarg_1_1319 : Unknown = select[1][](funarg_1318)
*                                funarg_2_1320 : Unknown = select[2][](funarg_1318)
*                                _1321 : Unknown = App_Open(vars_eq_0_1004;  ; funarg_1_1319, funarg_2_1320;  )
*                           In   _1321
*                           End

exp_valid called with expression =
          Let  funarg_1318 : Unknown = _1133
*              funarg_1_1319 : Unknown = select[1][](funarg_1318)
*              funarg_2_1320 : Unknown = select[2][](funarg_1318)
*              _1321 : Unknown = App_Open(vars_eq_0_1004;  ; funarg_1_1319, funarg_2_1320;  )
*         In   _1321
*         End

bnd_valid called with bnd =
funarg_1318 : Unknown = _1133

exp_valid called with expression =
_1133

exp_valid returned
bnd_valid returned
bnd_valid called with bnd =
funarg_1_1319 : Unknown = select[1][](funarg_1318)

exp_valid called with expression =
select[1][](funarg_1318)

exp_valid called with expression =
funarg_1318

exp_valid returned
exp_valid returned
bnd_valid returned
bnd_valid called with bnd =
funarg_2_1320 : Unknown = select[2][](funarg_1318)

exp_valid called with expression =
select[2][](funarg_1318)

exp_valid called with expression =
funarg_1318

exp_valid returned
exp_valid returned
bnd_valid returned
bnd_valid called with bnd =
_1321 : Unknown = App_Open(vars_eq_0_1004;  ; funarg_1_1319, funarg_2_1320;  )

exp_valid called with expression =
App_Open(vars_eq_0_1004;  ; funarg_1_1319, funarg_2_1320;  )

exp_valid called with expression =
vars_eq_0_1004

exp_valid returned
XXXX exp_analyze 25 -----------------------------
XXXX exp_analyze 25 context = 
 Constructor variables, kinds, and equations are :
type_1130 = SUM_0(0,1)(type_1129)::SINGLE_TYPE(SUM_0(0,1)(type_1129))
type_1129 = PROJ(MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001))),1)::SINGLE_TYPE(type_1091.1)
type_1123 = PROJ(MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001))),2)::SINGLE_TYPE(type_1091.2)
type_1120 = PROJ(MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001))),2)::SINGLE_TYPE(type_1091.2)
type_1119 = SUM(0,1)(type_1118)::SINGLE_TYPE(SUM(0,1)(type_1118))
type_1118 = PROJ(MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001))),1)::SINGLE_TYPE(type_1091.1)
type_1096 = SUM(2,2)(type_1095)::SINGLE_TYPE(SUM(2,2)(type_1095))
type_1095 = CREC{}::REC_K{}
type_1094 = PROJ(MU_NR((_999=SUM(2,2)(CREC{}))),1)::SINGLE_TYPE(type_1093.1)
type_1093 = MU_NR((_999=SUM(2,2)(CREC{})))::REC_K{1 > _1385 :  SINGLE_TYPE(PROJ(MU_NR((_999=SUM(2,2)(CREC{}))),1))}
type_1091 = MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001)))::          REC_K{1 > vdt_bar_1383 : 
*               SINGLE_TYPE(PROJ(MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001))),1)),
*               2 > vdt_foo_1384 : 
*               SINGLE_TYPE(PROJ(MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001))),2))}
type_1088 = PROJ(MU_NR((_997=SUM(2,2)(CREC{}))),1)::SINGLE_TYPE(type_1087.1)
type_1087 = MU_NR((_997=SUM(2,2)(CREC{})))::REC_K{1 > _1382 :  SINGLE_TYPE(PROJ(MU_NR((_997=SUM(2,2)(CREC{}))),1))}
mpoly_var_c_994::REC_K{'a > 'a_996 :  TYPE}
_1058 =           LET  _1058 =  FUN('a_1057 ::  TYPE) = SUM(0,1)(APP(_1050,('a_1057)))
*         IN   _1058
*         END::Arrow_k(Open; 'a_1057 : TYPE; SINGLE_TYPE(SUM(0,1)(APP(_1050,('a_1057)))))
_1055 =           LET  _1055 =  FUN('a_1052 ::  TYPE) = SUM(0,1)(APP(_1047,('a_1052)))
*         IN   _1055
*         END::Arrow_k(Open; 'a_1052 : TYPE; SINGLE_TYPE(SUM(0,1)(APP(_1047,('a_1052)))))
_1050 =           LET  _1050 =  FUN('a_1049 ::  TYPE) = APP(_1041,('a_1049))
*         IN   _1050
*         END::Arrow_k(Open; 'a_1049 : TYPE; SINGLE_TYPE(APP(_1041,('a_1049))))
_1047 =           LET  _1047 =  FUN('a_1046 ::  TYPE) = APP(_1044,('a_1046))
*         IN   _1047
*         END::Arrow_k(Open; 'a_1046 : TYPE; SINGLE_TYPE(APP(_1044,('a_1046))))
_1044 =           LET  _1044 =  FUN('a_1043 ::  TYPE) = PROJ(APP(_990,('a_1043)),2)
*         IN   _1044
*         END::Arrow_k(Open; 'a_1043 : TYPE; SINGLE_TYPE(PROJ(APP(_990,('a_1043)),2)))
_1041 =           LET  _1041 =  FUN('a_1040 ::  TYPE) = PROJ(APP(_990,('a_1040)),1)
*         IN   _1041
*         END::Arrow_k(Open; 'a_1040 : TYPE; SINGLE_TYPE(PROJ(APP(_990,('a_1040)),1)))
_990 =           LET  _990 =  FUN('a_987 ::  TYPE) = MU((vdt_bar_988=SUM(0,1)(vdt_foo_989), vdt_foo_989=SUM(0,1)(vdt_bar_988)))
*         IN   _990
*         END::          Arrow_k(Open; 'a_987 : TYPE; REC_K{1 > vdt_bar_1370 : 
*                                            SINGLE_TYPE(PROJ(MU((vdt_bar_988=SUM(0,1)(vdt_foo_989),
*                                                                 vdt_foo_989=SUM(0,1)(vdt_bar_988))),1)),
*                                            2 > vdt_foo_1371 : 
*                                            SINGLE_TYPE(PROJ(MU((vdt_bar_988=SUM(0,1)(vdt_foo_989),
*                                                                 vdt_foo_989=SUM(0,1)(vdt_bar_988))),2))})

 Expression variables and constructors are :
_bar_foo_eq_r_993:          ALLARROW(Open; TOTAL; (mpoly_var_c_994 :: REC_K{'a > 'a_996 :  TYPE}); 
*            (DEP_RECORD[ ]); 0; 
*            LET  type_1150 = ALLARROW(Open; PARTIAL; (); 
*                                (PROJ(MU((vdt_bar_1290=SUM(0,1)(vdt_foo_1291), vdt_foo_1291=SUM(0,1)(vdt_bar_1290))),1),
*                                 PROJ(MU((vdt_bar_1292=SUM(0,1)(vdt_foo_1293), vdt_foo_1293=SUM(0,1)(vdt_bar_1292))),1)); 0; 
*                                LET  type_1148 = MU_NR((_1038=SUM(2,2)(CREC{})))
*                                     type_1149 = type_1148.1
*                                IN   type_1149
*                                END)
*                 type_1163 = ALLARROW(Open; PARTIAL; (); 
*                                (PROJ(MU((vdt_bar_1298=SUM(0,1)(vdt_foo_1299), vdt_foo_1299=SUM(0,1)(vdt_bar_1298))),2),
*                                 PROJ(MU((vdt_bar_1300=SUM(0,1)(vdt_foo_1301), vdt_foo_1301=SUM(0,1)(vdt_bar_1300))),2)); 0; 
*                                LET  type_1161 = MU_NR((_1033=SUM(2,2)(CREC{})))
*                                     type_1162 = type_1161.1
*                                IN   type_1162
*                                END)
*                 type_1164 = RECORD[1, 2](type_1150, type_1163)
*            IN   type_1164
*            END)
mpoly_var_r_995:DEP_RECORD[ ]
vars_eq_0_1004:ALLARROW(Open; TOTAL; (); (type_1091.1, type_1091.1); 0; type_1088)
vars_eq_1_1005:ALLARROW(Open; TOTAL; (); (type_1091.2, type_1091.2); 0; type_1088)
arg_pair_1016:RECORD[1, 2](type_1091.2, type_1091.2)
eqarg1_1021:SUM_0(0,1)(type_1118)
eqarg2_1022:SUM_0(0,1)(type_1118)
_1097:SUM_0(2,2)(type_1095)
false_1098:type_1094
arg_pair_1_1121:type_1091.2
eqargpair_1_1122:          LET  mu_bnd_1389 = MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001)))
*              vdt_bar_1001 = mu_bnd_1389.1
*              vdt_foo_1002 = mu_bnd_1389.2
*         IN   SUM(0,1)(vdt_bar_1001)
*         END
arg_pair_2_1124:type_1091.2
eqargpair_2_1125:          LET  mu_bnd_1390 = MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001)))
*              vdt_bar_1001 = mu_bnd_1390.1
*              vdt_foo_1002 = mu_bnd_1390.2
*         IN   SUM(0,1)(vdt_bar_1001)
*         END
_1131:type_1129
_1132:type_1129
_1133:RECORD[1, 2](type_1129, type_1129)
v1_1313:type_1091.2
v2_1314:type_1091.2
funarg_1318:RECORD[1, 2](type_1129, type_1129)
funarg_1_1319:type_1129
funarg_2_1320:type_1129

XXXX exp_analyze 25 exp = funarg_1_1319
XXXX exp_analyze 25 con = type_1091.1
exp_valid called with expression =
funarg_1_1319

exp_valid returned
XXXX exp_analyze 25 con' = type_1129
XXXX exp_analyze 25 -----------------------------
XXXX finding path1
XXXX finding path2
XXXX finding path1
XXXX finding path2
XXXX exp_analyze 26 -----------------------------
XXXX exp_analyze 26 context = 
 Constructor variables, kinds, and equations are :
type_1130 = SUM_0(0,1)(type_1129)::SINGLE_TYPE(SUM_0(0,1)(type_1129))
type_1129 = PROJ(MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001))),1)::SINGLE_TYPE(type_1091.1)
type_1123 = PROJ(MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001))),2)::SINGLE_TYPE(type_1091.2)
type_1120 = PROJ(MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001))),2)::SINGLE_TYPE(type_1091.2)
type_1119 = SUM(0,1)(type_1118)::SINGLE_TYPE(SUM(0,1)(type_1118))
type_1118 = PROJ(MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001))),1)::SINGLE_TYPE(type_1091.1)
type_1096 = SUM(2,2)(type_1095)::SINGLE_TYPE(SUM(2,2)(type_1095))
type_1095 = CREC{}::REC_K{}
type_1094 = PROJ(MU_NR((_999=SUM(2,2)(CREC{}))),1)::SINGLE_TYPE(type_1093.1)
type_1093 = MU_NR((_999=SUM(2,2)(CREC{})))::REC_K{1 > _1385 :  SINGLE_TYPE(PROJ(MU_NR((_999=SUM(2,2)(CREC{}))),1))}
type_1091 = MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001)))::          REC_K{1 > vdt_bar_1383 : 
*               SINGLE_TYPE(PROJ(MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001))),1)),
*               2 > vdt_foo_1384 : 
*               SINGLE_TYPE(PROJ(MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001))),2))}
type_1088 = PROJ(MU_NR((_997=SUM(2,2)(CREC{}))),1)::SINGLE_TYPE(type_1087.1)
type_1087 = MU_NR((_997=SUM(2,2)(CREC{})))::REC_K{1 > _1382 :  SINGLE_TYPE(PROJ(MU_NR((_997=SUM(2,2)(CREC{}))),1))}
mpoly_var_c_994::REC_K{'a > 'a_996 :  TYPE}
_1058 =           LET  _1058 =  FUN('a_1057 ::  TYPE) = SUM(0,1)(APP(_1050,('a_1057)))
*         IN   _1058
*         END::Arrow_k(Open; 'a_1057 : TYPE; SINGLE_TYPE(SUM(0,1)(APP(_1050,('a_1057)))))
_1055 =           LET  _1055 =  FUN('a_1052 ::  TYPE) = SUM(0,1)(APP(_1047,('a_1052)))
*         IN   _1055
*         END::Arrow_k(Open; 'a_1052 : TYPE; SINGLE_TYPE(SUM(0,1)(APP(_1047,('a_1052)))))
_1050 =           LET  _1050 =  FUN('a_1049 ::  TYPE) = APP(_1041,('a_1049))
*         IN   _1050
*         END::Arrow_k(Open; 'a_1049 : TYPE; SINGLE_TYPE(APP(_1041,('a_1049))))
_1047 =           LET  _1047 =  FUN('a_1046 ::  TYPE) = APP(_1044,('a_1046))
*         IN   _1047
*         END::Arrow_k(Open; 'a_1046 : TYPE; SINGLE_TYPE(APP(_1044,('a_1046))))
_1044 =           LET  _1044 =  FUN('a_1043 ::  TYPE) = PROJ(APP(_990,('a_1043)),2)
*         IN   _1044
*         END::Arrow_k(Open; 'a_1043 : TYPE; SINGLE_TYPE(PROJ(APP(_990,('a_1043)),2)))
_1041 =           LET  _1041 =  FUN('a_1040 ::  TYPE) = PROJ(APP(_990,('a_1040)),1)
*         IN   _1041
*         END::Arrow_k(Open; 'a_1040 : TYPE; SINGLE_TYPE(PROJ(APP(_990,('a_1040)),1)))
_990 =           LET  _990 =  FUN('a_987 ::  TYPE) = MU((vdt_bar_988=SUM(0,1)(vdt_foo_989), vdt_foo_989=SUM(0,1)(vdt_bar_988)))
*         IN   _990
*         END::          Arrow_k(Open; 'a_987 : TYPE; REC_K{1 > vdt_bar_1370 : 
*                                            SINGLE_TYPE(PROJ(MU((vdt_bar_988=SUM(0,1)(vdt_foo_989),
*                                                                 vdt_foo_989=SUM(0,1)(vdt_bar_988))),1)),
*                                            2 > vdt_foo_1371 : 
*                                            SINGLE_TYPE(PROJ(MU((vdt_bar_988=SUM(0,1)(vdt_foo_989),
*                                                                 vdt_foo_989=SUM(0,1)(vdt_bar_988))),2))})

 Expression variables and constructors are :
_bar_foo_eq_r_993:          ALLARROW(Open; TOTAL; (mpoly_var_c_994 :: REC_K{'a > 'a_996 :  TYPE}); 
*            (DEP_RECORD[ ]); 0; 
*            LET  type_1150 = ALLARROW(Open; PARTIAL; (); 
*                                (PROJ(MU((vdt_bar_1290=SUM(0,1)(vdt_foo_1291), vdt_foo_1291=SUM(0,1)(vdt_bar_1290))),1),
*                                 PROJ(MU((vdt_bar_1292=SUM(0,1)(vdt_foo_1293), vdt_foo_1293=SUM(0,1)(vdt_bar_1292))),1)); 0; 
*                                LET  type_1148 = MU_NR((_1038=SUM(2,2)(CREC{})))
*                                     type_1149 = type_1148.1
*                                IN   type_1149
*                                END)
*                 type_1163 = ALLARROW(Open; PARTIAL; (); 
*                                (PROJ(MU((vdt_bar_1298=SUM(0,1)(vdt_foo_1299), vdt_foo_1299=SUM(0,1)(vdt_bar_1298))),2),
*                                 PROJ(MU((vdt_bar_1300=SUM(0,1)(vdt_foo_1301), vdt_foo_1301=SUM(0,1)(vdt_bar_1300))),2)); 0; 
*                                LET  type_1161 = MU_NR((_1033=SUM(2,2)(CREC{})))
*                                     type_1162 = type_1161.1
*                                IN   type_1162
*                                END)
*                 type_1164 = RECORD[1, 2](type_1150, type_1163)
*            IN   type_1164
*            END)
mpoly_var_r_995:DEP_RECORD[ ]
vars_eq_0_1004:ALLARROW(Open; TOTAL; (); (type_1091.1, type_1091.1); 0; type_1088)
vars_eq_1_1005:ALLARROW(Open; TOTAL; (); (type_1091.2, type_1091.2); 0; type_1088)
arg_pair_1016:RECORD[1, 2](type_1091.2, type_1091.2)
eqarg1_1021:SUM_0(0,1)(type_1118)
eqarg2_1022:SUM_0(0,1)(type_1118)
_1097:SUM_0(2,2)(type_1095)
false_1098:type_1094
arg_pair_1_1121:type_1091.2
eqargpair_1_1122:          LET  mu_bnd_1389 = MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001)))
*              vdt_bar_1001 = mu_bnd_1389.1
*              vdt_foo_1002 = mu_bnd_1389.2
*         IN   SUM(0,1)(vdt_bar_1001)
*         END
arg_pair_2_1124:type_1091.2
eqargpair_2_1125:          LET  mu_bnd_1390 = MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001)))
*              vdt_bar_1001 = mu_bnd_1390.1
*              vdt_foo_1002 = mu_bnd_1390.2
*         IN   SUM(0,1)(vdt_bar_1001)
*         END
_1131:type_1129
_1132:type_1129
_1133:RECORD[1, 2](type_1129, type_1129)
v1_1313:type_1091.2
v2_1314:type_1091.2
funarg_1318:RECORD[1, 2](type_1129, type_1129)
funarg_1_1319:type_1129
funarg_2_1320:type_1129

XXXX exp_analyze 26 exp = funarg_2_1320
XXXX exp_analyze 26 con = type_1091.1
exp_valid called with expression =
funarg_2_1320

exp_valid returned
XXXX exp_analyze 26 con' = type_1129
XXXX exp_analyze 26 -----------------------------
XXXX finding path1
XXXX finding path2
XXXX finding path1
XXXX finding path2
exp_valid returned
bnd_valid returned
exp_valid called with expression =
_1321

exp_valid returned
exp_valid returned
bnd_valid returned
exp_valid called with expression =
_1134

exp_valid returned
exp_valid returned
XXXX finding path1
XXXX finding path2
XXXX finding path1
XXXX exp_analyze 27 -----------------------------
XXXX exp_analyze 27 context = 
 Constructor variables, kinds, and equations are :
type_1123 = PROJ(MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001))),2)::SINGLE_TYPE(type_1091.2)
type_1120 = PROJ(MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001))),2)::SINGLE_TYPE(type_1091.2)
type_1119 = SUM(0,1)(type_1118)::SINGLE_TYPE(SUM(0,1)(type_1118))
type_1118 = PROJ(MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001))),1)::SINGLE_TYPE(type_1091.1)
type_1096 = SUM(2,2)(type_1095)::SINGLE_TYPE(SUM(2,2)(type_1095))
type_1095 = CREC{}::REC_K{}
type_1094 = PROJ(MU_NR((_999=SUM(2,2)(CREC{}))),1)::SINGLE_TYPE(type_1093.1)
type_1093 = MU_NR((_999=SUM(2,2)(CREC{})))::REC_K{1 > _1385 :  SINGLE_TYPE(PROJ(MU_NR((_999=SUM(2,2)(CREC{}))),1))}
type_1091 = MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001)))::          REC_K{1 > vdt_bar_1383 : 
*               SINGLE_TYPE(PROJ(MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001))),1)),
*               2 > vdt_foo_1384 : 
*               SINGLE_TYPE(PROJ(MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001))),2))}
type_1088 = PROJ(MU_NR((_997=SUM(2,2)(CREC{}))),1)::SINGLE_TYPE(type_1087.1)
type_1087 = MU_NR((_997=SUM(2,2)(CREC{})))::REC_K{1 > _1382 :  SINGLE_TYPE(PROJ(MU_NR((_997=SUM(2,2)(CREC{}))),1))}
mpoly_var_c_994::REC_K{'a > 'a_996 :  TYPE}
_1058 =           LET  _1058 =  FUN('a_1057 ::  TYPE) = SUM(0,1)(APP(_1050,('a_1057)))
*         IN   _1058
*         END::Arrow_k(Open; 'a_1057 : TYPE; SINGLE_TYPE(SUM(0,1)(APP(_1050,('a_1057)))))
_1055 =           LET  _1055 =  FUN('a_1052 ::  TYPE) = SUM(0,1)(APP(_1047,('a_1052)))
*         IN   _1055
*         END::Arrow_k(Open; 'a_1052 : TYPE; SINGLE_TYPE(SUM(0,1)(APP(_1047,('a_1052)))))
_1050 =           LET  _1050 =  FUN('a_1049 ::  TYPE) = APP(_1041,('a_1049))
*         IN   _1050
*         END::Arrow_k(Open; 'a_1049 : TYPE; SINGLE_TYPE(APP(_1041,('a_1049))))
_1047 =           LET  _1047 =  FUN('a_1046 ::  TYPE) = APP(_1044,('a_1046))
*         IN   _1047
*         END::Arrow_k(Open; 'a_1046 : TYPE; SINGLE_TYPE(APP(_1044,('a_1046))))
_1044 =           LET  _1044 =  FUN('a_1043 ::  TYPE) = PROJ(APP(_990,('a_1043)),2)
*         IN   _1044
*         END::Arrow_k(Open; 'a_1043 : TYPE; SINGLE_TYPE(PROJ(APP(_990,('a_1043)),2)))
_1041 =           LET  _1041 =  FUN('a_1040 ::  TYPE) = PROJ(APP(_990,('a_1040)),1)
*         IN   _1041
*         END::Arrow_k(Open; 'a_1040 : TYPE; SINGLE_TYPE(PROJ(APP(_990,('a_1040)),1)))
_990 =           LET  _990 =  FUN('a_987 ::  TYPE) = MU((vdt_bar_988=SUM(0,1)(vdt_foo_989), vdt_foo_989=SUM(0,1)(vdt_bar_988)))
*         IN   _990
*         END::          Arrow_k(Open; 'a_987 : TYPE; REC_K{1 > vdt_bar_1370 : 
*                                            SINGLE_TYPE(PROJ(MU((vdt_bar_988=SUM(0,1)(vdt_foo_989),
*                                                                 vdt_foo_989=SUM(0,1)(vdt_bar_988))),1)),
*                                            2 > vdt_foo_1371 : 
*                                            SINGLE_TYPE(PROJ(MU((vdt_bar_988=SUM(0,1)(vdt_foo_989),
*                                                                 vdt_foo_989=SUM(0,1)(vdt_bar_988))),2))})

 Expression variables and constructors are :
_bar_foo_eq_r_993:          ALLARROW(Open; TOTAL; (mpoly_var_c_994 :: REC_K{'a > 'a_996 :  TYPE}); 
*            (DEP_RECORD[ ]); 0; 
*            LET  type_1150 = ALLARROW(Open; PARTIAL; (); 
*                                (PROJ(MU((vdt_bar_1290=SUM(0,1)(vdt_foo_1291), vdt_foo_1291=SUM(0,1)(vdt_bar_1290))),1),
*                                 PROJ(MU((vdt_bar_1292=SUM(0,1)(vdt_foo_1293), vdt_foo_1293=SUM(0,1)(vdt_bar_1292))),1)); 0; 
*                                LET  type_1148 = MU_NR((_1038=SUM(2,2)(CREC{})))
*                                     type_1149 = type_1148.1
*                                IN   type_1149
*                                END)
*                 type_1163 = ALLARROW(Open; PARTIAL; (); 
*                                (PROJ(MU((vdt_bar_1298=SUM(0,1)(vdt_foo_1299), vdt_foo_1299=SUM(0,1)(vdt_bar_1298))),2),
*                                 PROJ(MU((vdt_bar_1300=SUM(0,1)(vdt_foo_1301), vdt_foo_1301=SUM(0,1)(vdt_bar_1300))),2)); 0; 
*                                LET  type_1161 = MU_NR((_1033=SUM(2,2)(CREC{})))
*                                     type_1162 = type_1161.1
*                                IN   type_1162
*                                END)
*                 type_1164 = RECORD[1, 2](type_1150, type_1163)
*            IN   type_1164
*            END)
mpoly_var_r_995:DEP_RECORD[ ]
vars_eq_0_1004:ALLARROW(Open; TOTAL; (); (type_1091.1, type_1091.1); 0; type_1088)
vars_eq_1_1005:ALLARROW(Open; TOTAL; (); (type_1091.2, type_1091.2); 0; type_1088)
arg_pair_1016:RECORD[1, 2](type_1091.2, type_1091.2)
eqarg1_1021:SUM_0(0,1)(type_1118)
_1097:SUM_0(2,2)(type_1095)
false_1098:type_1094
arg_pair_1_1121:type_1091.2
eqargpair_1_1122:          LET  mu_bnd_1389 = MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001)))
*              vdt_bar_1001 = mu_bnd_1389.1
*              vdt_foo_1002 = mu_bnd_1389.2
*         IN   SUM(0,1)(vdt_bar_1001)
*         END
arg_pair_2_1124:type_1091.2
eqargpair_2_1125:          LET  mu_bnd_1390 = MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001)))
*              vdt_bar_1001 = mu_bnd_1390.1
*              vdt_foo_1002 = mu_bnd_1390.2
*         IN   SUM(0,1)(vdt_bar_1001)
*         END
v1_1313:type_1091.2
v2_1314:type_1091.2

XXXX exp_analyze 27 exp = false_1098
XXXX exp_analyze 27 con = PROJ(MU_NR((_997=SUM(2,2)(CREC{}))),1)
exp_valid called with expression =
false_1098

exp_valid returned
XXXX exp_analyze 27 con' = type_1094
XXXX exp_analyze 27 -----------------------------
XXXX finding path1
XXXX finding path2
XXXX finding path1
exp_valid returned
bnd_valid returned
exp_valid called with expression =
_1135

exp_valid returned
exp_valid returned
XXXX finding path1
XXXX finding path2
XXXX finding path1
exp_valid returned
bnd_valid returned
exp_valid called with expression =
_1136

exp_valid returned
exp_valid returned
XXXX exp_analyze 22 con' =           LET  type_1118 = type_1091.1
*              type_1119 = SUM(0,1)(type_1118)
*              type_1120 = type_1091.2
*              type_1123 = type_1091.2
*         IN   type_1088
*         END
XXXX exp_analyze 22 -----------------------------
XXXX finding path1
XXXX finding path2
XXXX done
bnd_valid returned
bnd_valid called with bnd =
top_eq_1137 : Unknown = record(1>vars_eq_0_1004, 2>vars_eq_1_1005)

exp_valid called with expression =
record(1>vars_eq_0_1004, 2>vars_eq_1_1005)

exp_valid called with expression =
vars_eq_0_1004

exp_valid returned
exp_valid called with expression =
vars_eq_1_1005

exp_valid returned
exp_valid returned
bnd_valid returned
exp_valid called with expression =
top_eq_1137

exp_valid returned
exp_valid returned
XXXX exp_analyze 15 con' =           LET  type_1087 = MU_NR((_997=SUM(2,2)(CREC{})))
*              type_1088 = type_1087.1
*              type_1091 = MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001)))
*              type_1093 = MU_NR((_999=SUM(2,2)(CREC{})))
*              type_1094 = type_1093.1
*              type_1095 = CREC{}
*              type_1096 = SUM(2,2)(type_1095)
*         IN   RECORD[1, 2]
*                (ALLARROW(Open; TOTAL; (); (type_1091.1, type_1091.1); 0; type_1088),
*                 ALLARROW(Open; TOTAL; (); (type_1091.2, type_1091.2); 0; type_1088))
*         END
XXXX exp_analyze 15 -----------------------------
XXXX finding path1
XXXX finding path2
XXXX finding path2
XXXX done
bnd_valid returned
bnd_valid called with bnd =
          /LEAF\poly+Ebar_INT_r_1061
*           (mpoly_var_c_1062 :: REC_K{'a > 'a_1064 :  TYPE} ;; mpoly_var_r_1063 : Unknown : DEP_RECORD[ ] ;; )
*         =>LET  type_1175 = ALLARROW(Open; PARTIAL; (); 
*                               (APP(_1041,(mpoly_var_c_1062.'a)), APP(_1041,(mpoly_var_c_1062.'a))); 0; 
*                               LET  type_1173 = MU_NR((_1070=SUM(2,2)(CREC{})))
*                                    type_1174 = type_1173.1
*                               IN   type_1174
*                               END)
*           IN   type_1175
*           END =
*         Let  _1165 : Unknown = App_Open(_bar_foo_eq_r_993;  mpoly_var_c_1062; mpoly_var_r_1063;  )
*              v1_1166 : Unknown = select[1][](_1165)
*         In   v1_1166
*         End

XXXX getting function types
XXXX analyzing bnd_types
kind_valid called with kind =
REC_K{'a > 'a_1064 :  TYPE}

kind_valid called with kind =
TYPE

kind_valid returned
kind_valid returned
con_valid called with constructor =
          ALLARROW(Open; PARTIAL; (); 
*            (APP(_1041,(mpoly_var_c_1062.'a)), APP(_1041,(mpoly_var_c_1062.'a))); 0; 
*            LET  type_1173 = MU_NR((_1070=SUM(2,2)(CREC{})))
*                 type_1174 = type_1173.1
*            IN   type_1174
*            END)

con_valid called with constructor =
_1041

con_valid returned
con_valid called with constructor =
mpoly_var_c_1062

con_valid returned
con_valid called with constructor =
_1041

con_valid returned
con_valid called with constructor =
mpoly_var_c_1062

con_valid returned
con_valid called with constructor =
MU_NR((_1070=SUM(2,2)(CREC{})))

con_valid returned
con_valid called with constructor =
type_1173.1

con_valid called with constructor =
type_1173

con_valid returned
con_valid returned
con_valid returned
XXXX building up context
XXXX checking defs
XXXX exp_analyze 28 -----------------------------
XXXX exp_analyze 28 context = 
 Constructor variables, kinds, and equations are :
mpoly_var_c_1062::REC_K{'a > 'a_1064 :  TYPE}
_1058 =           LET  _1058 =  FUN('a_1057 ::  TYPE) = SUM(0,1)(APP(_1050,('a_1057)))
*         IN   _1058
*         END::Arrow_k(Open; 'a_1057 : TYPE; SINGLE_TYPE(SUM(0,1)(APP(_1050,('a_1057)))))
_1055 =           LET  _1055 =  FUN('a_1052 ::  TYPE) = SUM(0,1)(APP(_1047,('a_1052)))
*         IN   _1055
*         END::Arrow_k(Open; 'a_1052 : TYPE; SINGLE_TYPE(SUM(0,1)(APP(_1047,('a_1052)))))
_1050 =           LET  _1050 =  FUN('a_1049 ::  TYPE) = APP(_1041,('a_1049))
*         IN   _1050
*         END::Arrow_k(Open; 'a_1049 : TYPE; SINGLE_TYPE(APP(_1041,('a_1049))))
_1047 =           LET  _1047 =  FUN('a_1046 ::  TYPE) = APP(_1044,('a_1046))
*         IN   _1047
*         END::Arrow_k(Open; 'a_1046 : TYPE; SINGLE_TYPE(APP(_1044,('a_1046))))
_1044 =           LET  _1044 =  FUN('a_1043 ::  TYPE) = PROJ(APP(_990,('a_1043)),2)
*         IN   _1044
*         END::Arrow_k(Open; 'a_1043 : TYPE; SINGLE_TYPE(PROJ(APP(_990,('a_1043)),2)))
_1041 =           LET  _1041 =  FUN('a_1040 ::  TYPE) = PROJ(APP(_990,('a_1040)),1)
*         IN   _1041
*         END::Arrow_k(Open; 'a_1040 : TYPE; SINGLE_TYPE(PROJ(APP(_990,('a_1040)),1)))
_990 =           LET  _990 =  FUN('a_987 ::  TYPE) = MU((vdt_bar_988=SUM(0,1)(vdt_foo_989), vdt_foo_989=SUM(0,1)(vdt_bar_988)))
*         IN   _990
*         END::          Arrow_k(Open; 'a_987 : TYPE; REC_K{1 > vdt_bar_1370 : 
*                                            SINGLE_TYPE(PROJ(MU((vdt_bar_988=SUM(0,1)(vdt_foo_989),
*                                                                 vdt_foo_989=SUM(0,1)(vdt_bar_988))),1)),
*                                            2 > vdt_foo_1371 : 
*                                            SINGLE_TYPE(PROJ(MU((vdt_bar_988=SUM(0,1)(vdt_foo_989),
*                                                                 vdt_foo_989=SUM(0,1)(vdt_bar_988))),2))})

 Expression variables and constructors are :
_bar_foo_eq_r_993:          ALLARROW(Open; TOTAL; (mpoly_var_c_994 :: REC_K{'a > 'a_996 :  TYPE}); 
*            (DEP_RECORD[ ]); 0; 
*            LET  type_1150 = ALLARROW(Open; PARTIAL; (); 
*                                (PROJ(MU((vdt_bar_1290=SUM(0,1)(vdt_foo_1291), vdt_foo_1291=SUM(0,1)(vdt_bar_1290))),1),
*                                 PROJ(MU((vdt_bar_1292=SUM(0,1)(vdt_foo_1293), vdt_foo_1293=SUM(0,1)(vdt_bar_1292))),1)); 0; 
*                                LET  type_1148 = MU_NR((_1038=SUM(2,2)(CREC{})))
*                                     type_1149 = type_1148.1
*                                IN   type_1149
*                                END)
*                 type_1163 = ALLARROW(Open; PARTIAL; (); 
*                                (PROJ(MU((vdt_bar_1298=SUM(0,1)(vdt_foo_1299), vdt_foo_1299=SUM(0,1)(vdt_bar_1298))),2),
*                                 PROJ(MU((vdt_bar_1300=SUM(0,1)(vdt_foo_1301), vdt_foo_1301=SUM(0,1)(vdt_bar_1300))),2)); 0; 
*                                LET  type_1161 = MU_NR((_1033=SUM(2,2)(CREC{})))
*                                     type_1162 = type_1161.1
*                                IN   type_1162
*                                END)
*                 type_1164 = RECORD[1, 2](type_1150, type_1163)
*            IN   type_1164
*            END)
poly+Ebar_INT_r_1061:          ALLARROW(Open; TOTAL; (mpoly_var_c_1062 :: REC_K{'a > 'a_1064 :  TYPE}); 
*            (DEP_RECORD[ ]); 0; 
*            LET  type_1175 = ALLARROW(Open; PARTIAL; (); 
*                                (APP(_1041,(mpoly_var_c_1062.'a)), APP(_1041,(mpoly_var_c_1062.'a))); 0; 
*                                LET  type_1173 = MU_NR((_1070=SUM(2,2)(CREC{})))
*                                     type_1174 = type_1173.1
*                                IN   type_1174
*                                END)
*            IN   type_1175
*            END)
mpoly_var_r_1063:DEP_RECORD[ ]

XXXX exp_analyze 28 exp =           Let  _1165 : Unknown = App_Open(_bar_foo_eq_r_993;  mpoly_var_c_1062; mpoly_var_r_1063;  )
*              v1_1166 : Unknown = select[1][](_1165)
*         In   v1_1166
*         End
XXXX exp_analyze 28 con =           LET  type_1175 = ALLARROW(Open; PARTIAL; (); 
*                             (APP(_1041,(mpoly_var_c_1062.'a)), APP(_1041,(mpoly_var_c_1062.'a))); 0; 
*                             LET  type_1173 = MU_NR((_1070=SUM(2,2)(CREC{})))
*                                  type_1174 = type_1173.1
*                             IN   type_1174
*                             END)
*         IN   type_1175
*         END
exp_valid called with expression =
          Let  _1165 : Unknown = App_Open(_bar_foo_eq_r_993;  mpoly_var_c_1062; mpoly_var_r_1063;  )
*              v1_1166 : Unknown = select[1][](_1165)
*         In   v1_1166
*         End

bnd_valid called with bnd =
_1165 : Unknown = App_Open(_bar_foo_eq_r_993;  mpoly_var_c_1062; mpoly_var_r_1063;  )

exp_valid called with expression =
App_Open(_bar_foo_eq_r_993;  mpoly_var_c_1062; mpoly_var_r_1063;  )

exp_valid called with expression =
_bar_foo_eq_r_993

exp_valid returned
XXXX exp_analyze 29 -----------------------------
XXXX exp_analyze 29 context = 
 Constructor variables, kinds, and equations are :
mpoly_var_c_994 = mpoly_var_c_1062::REC_K{'a > 'a_996 :  TYPE}
mpoly_var_c_1062::REC_K{'a > 'a_1064 :  TYPE}
_1058 =           LET  _1058 =  FUN('a_1057 ::  TYPE) = SUM(0,1)(APP(_1050,('a_1057)))
*         IN   _1058
*         END::Arrow_k(Open; 'a_1057 : TYPE; SINGLE_TYPE(SUM(0,1)(APP(_1050,('a_1057)))))
_1055 =           LET  _1055 =  FUN('a_1052 ::  TYPE) = SUM(0,1)(APP(_1047,('a_1052)))
*         IN   _1055
*         END::Arrow_k(Open; 'a_1052 : TYPE; SINGLE_TYPE(SUM(0,1)(APP(_1047,('a_1052)))))
_1050 =           LET  _1050 =  FUN('a_1049 ::  TYPE) = APP(_1041,('a_1049))
*         IN   _1050
*         END::Arrow_k(Open; 'a_1049 : TYPE; SINGLE_TYPE(APP(_1041,('a_1049))))
_1047 =           LET  _1047 =  FUN('a_1046 ::  TYPE) = APP(_1044,('a_1046))
*         IN   _1047
*         END::Arrow_k(Open; 'a_1046 : TYPE; SINGLE_TYPE(APP(_1044,('a_1046))))
_1044 =           LET  _1044 =  FUN('a_1043 ::  TYPE) = PROJ(APP(_990,('a_1043)),2)
*         IN   _1044
*         END::Arrow_k(Open; 'a_1043 : TYPE; SINGLE_TYPE(PROJ(APP(_990,('a_1043)),2)))
_1041 =           LET  _1041 =  FUN('a_1040 ::  TYPE) = PROJ(APP(_990,('a_1040)),1)
*         IN   _1041
*         END::Arrow_k(Open; 'a_1040 : TYPE; SINGLE_TYPE(PROJ(APP(_990,('a_1040)),1)))
_990 =           LET  _990 =  FUN('a_987 ::  TYPE) = MU((vdt_bar_988=SUM(0,1)(vdt_foo_989), vdt_foo_989=SUM(0,1)(vdt_bar_988)))
*         IN   _990
*         END::          Arrow_k(Open; 'a_987 : TYPE; REC_K{1 > vdt_bar_1370 : 
*                                            SINGLE_TYPE(PROJ(MU((vdt_bar_988=SUM(0,1)(vdt_foo_989),
*                                                                 vdt_foo_989=SUM(0,1)(vdt_bar_988))),1)),
*                                            2 > vdt_foo_1371 : 
*                                            SINGLE_TYPE(PROJ(MU((vdt_bar_988=SUM(0,1)(vdt_foo_989),
*                                                                 vdt_foo_989=SUM(0,1)(vdt_bar_988))),2))})

 Expression variables and constructors are :
_bar_foo_eq_r_993:          ALLARROW(Open; TOTAL; (mpoly_var_c_994 :: REC_K{'a > 'a_996 :  TYPE}); 
*            (DEP_RECORD[ ]); 0; 
*            LET  type_1150 = ALLARROW(Open; PARTIAL; (); 
*                                (PROJ(MU((vdt_bar_1290=SUM(0,1)(vdt_foo_1291), vdt_foo_1291=SUM(0,1)(vdt_bar_1290))),1),
*                                 PROJ(MU((vdt_bar_1292=SUM(0,1)(vdt_foo_1293), vdt_foo_1293=SUM(0,1)(vdt_bar_1292))),1)); 0; 
*                                LET  type_1148 = MU_NR((_1038=SUM(2,2)(CREC{})))
*                                     type_1149 = type_1148.1
*                                IN   type_1149
*                                END)
*                 type_1163 = ALLARROW(Open; PARTIAL; (); 
*                                (PROJ(MU((vdt_bar_1298=SUM(0,1)(vdt_foo_1299), vdt_foo_1299=SUM(0,1)(vdt_bar_1298))),2),
*                                 PROJ(MU((vdt_bar_1300=SUM(0,1)(vdt_foo_1301), vdt_foo_1301=SUM(0,1)(vdt_bar_1300))),2)); 0; 
*                                LET  type_1161 = MU_NR((_1033=SUM(2,2)(CREC{})))
*                                     type_1162 = type_1161.1
*                                IN   type_1162
*                                END)
*                 type_1164 = RECORD[1, 2](type_1150, type_1163)
*            IN   type_1164
*            END)
poly+Ebar_INT_r_1061:          ALLARROW(Open; TOTAL; (mpoly_var_c_1062 :: REC_K{'a > 'a_1064 :  TYPE}); 
*            (DEP_RECORD[ ]); 0; 
*            LET  type_1175 = ALLARROW(Open; PARTIAL; (); 
*                                (APP(_1041,(mpoly_var_c_1062.'a)), APP(_1041,(mpoly_var_c_1062.'a))); 0; 
*                                LET  type_1173 = MU_NR((_1070=SUM(2,2)(CREC{})))
*                                     type_1174 = type_1173.1
*                                IN   type_1174
*                                END)
*            IN   type_1175
*            END)
mpoly_var_r_1063:DEP_RECORD[ ]

XXXX exp_analyze 29 exp = mpoly_var_r_1063
XXXX exp_analyze 29 con = DEP_RECORD[ ]
exp_valid called with expression =
mpoly_var_r_1063

exp_valid returned
XXXX exp_analyze 29 con' = DEP_RECORD[ ]
XXXX exp_analyze 29 -----------------------------
exp_valid returned
bnd_valid returned
bnd_valid called with bnd =
v1_1166 : Unknown = select[1][](_1165)

exp_valid called with expression =
select[1][](_1165)

exp_valid called with expression =
_1165

exp_valid returned
exp_valid returned
bnd_valid returned
exp_valid called with expression =
v1_1166

exp_valid returned
exp_valid returned
XXXX exp_analyze 28 con' =           ALLARROW(Open; PARTIAL; (); 
*            (PROJ(MU((vdt_bar_1392=SUM(0,1)(vdt_foo_1393), vdt_foo_1393=SUM(0,1)(vdt_bar_1392))),1),
*             PROJ(MU((vdt_bar_1394=SUM(0,1)(vdt_foo_1395), vdt_foo_1395=SUM(0,1)(vdt_bar_1394))),1)); 0; 
*            LET  type_1396 = MU_NR((_1038=SUM(2,2)(CREC{})))
*                 type_1397 = type_1396.1
*            IN   type_1397
*            END)
XXXX exp_analyze 28 -----------------------------
XXXX finding path1
XXXX finding path2
XXXX finding path2
XXXX finding path1
XXXX finding path2
XXXX finding path1
XXXX finding path1

XXXX constructor = MU((vdt_bar_988=SUM(0,1)(vdt_foo_989), vdt_foo_989=SUM(0,1)(vdt_bar_988)))
    c =           APP(LET  _990 =  FUN('a_987 ::  TYPE) = MU((vdt_bar_988=SUM(0,1)(vdt_foo_989), vdt_foo_989=SUM(0,1)(vdt_bar_988)))
*             IN   _990
*             END,
*           ('a_1040))

 ------ ERROR in context_beta_reduce ---------
NORMALIZE STACK
END NORMALIZE STACK

 Constructor variables, kinds, and equations are :
mpoly_var_c_1062::REC_K{'a > 'a_1064 :  TYPE}
_1041 =           LET  _1041 =  FUN('a_1040 ::  TYPE) = PROJ(APP(_990,('a_1040)),1)
*         IN   _1041
*         END::Arrow_k(Open; 'a_1040 : TYPE; SINGLE_TYPE(PROJ(APP(_990,('a_1040)),1)))
_990 =           LET  _990 =  FUN('a_987 ::  TYPE) = MU((vdt_bar_988=SUM(0,1)(vdt_foo_989), vdt_foo_989=SUM(0,1)(vdt_bar_988)))
*         IN   _990
*         END::          Arrow_k(Open; 'a_987 : TYPE; REC_K{1 > vdt_bar_1370 : 
*                                            SINGLE_TYPE(PROJ(MU((vdt_bar_988=SUM(0,1)(vdt_foo_989),
*                                                                 vdt_foo_989=SUM(0,1)(vdt_bar_988))),1)),
*                                            2 > vdt_foo_1371 : 
*                                            SINGLE_TYPE(PROJ(MU((vdt_bar_988=SUM(0,1)(vdt_foo_989),
*                                                                 vdt_foo_989=SUM(0,1)(vdt_bar_988))),2))})

 Expression variables and constructors are :

 Constructor variables, kinds, and equations are :

 Expression variables and constructors are :
APP(_1041,(mpoly_var_c_1062.'a))
PROJ(MU((vdt_bar_1392=SUM(0,1)(vdt_foo_1393), vdt_foo_1393=SUM(0,1)(vdt_bar_1392))),1)

 Constructor variables, kinds, and equations are :

 Expression variables and constructors are :

 Constructor variables, kinds, and equations are :
mpoly_var_c_1062::REC_K{'a > 'a_1064 :  TYPE}
_1041 =           LET  _1041 =  FUN('a_1040 ::  TYPE) = PROJ(APP(_990,('a_1040)),1)
*         IN   _1041
*         END::Arrow_k(Open; 'a_1040 : TYPE; SINGLE_TYPE(PROJ(APP(_990,('a_1040)),1)))
_990 =           LET  _990 =  FUN('a_987 ::  TYPE) = MU((vdt_bar_988=SUM(0,1)(vdt_foo_989), vdt_foo_989=SUM(0,1)(vdt_bar_988)))
*         IN   _990
*         END::          Arrow_k(Open; 'a_987 : TYPE; REC_K{1 > vdt_bar_1370 : 
*                                            SINGLE_TYPE(PROJ(MU((vdt_bar_988=SUM(0,1)(vdt_foo_989),
*                                                                 vdt_foo_989=SUM(0,1)(vdt_bar_988))),1)),
*                                            2 > vdt_foo_1371 : 
*                                            SINGLE_TYPE(PROJ(MU((vdt_bar_988=SUM(0,1)(vdt_foo_989),
*                                                                 vdt_foo_989=SUM(0,1)(vdt_bar_988))),2))})

 Expression variables and constructors are :
          ALLARROW(Open; PARTIAL; (); 
*            (PROJ(MU((vdt_bar_1392=SUM(0,1)(vdt_foo_1393), vdt_foo_1393=SUM(0,1)(vdt_bar_1392))),1),
*             PROJ(MU((vdt_bar_1394=SUM(0,1)(vdt_foo_1395), vdt_foo_1395=SUM(0,1)(vdt_bar_1394))),1)); 0; 
*            LET  type_1396 = MU_NR((_1038=SUM(2,2)(CREC{})))
*                 type_1397 = type_1396.1
*            IN   type_1397
*            END)
          LET  type_1175 = ALLARROW(Open; PARTIAL; (); 
*                             (APP(_1041,(mpoly_var_c_1062.'a)), APP(_1041,(mpoly_var_c_1062.'a))); 0; 
*                             LET  type_1173 = MU_NR((_1070=SUM(2,2)(CREC{})))
*                                  type_1174 = type_1173.1
*                             IN   type_1174
*                             END)
*         IN   type_1175
*         END
ILSTATIC STACK
module_valid called with module =
PASS: 


          [_990 =  FUN('a_987 ::  TYPE) = MU((vdt_bar_988=SUM(0,1)(vdt_foo_989), vdt_foo_989=SUM(0,1)(vdt_bar_988))),
*          _1041 =  FUN('a_1040 ::  TYPE) = PROJ(APP(_990,('a_1040)),1),
*          _1044 =  FUN('a_1043 ::  TYPE) = PROJ(APP(_990,('a_1043)),2),
*          _1047 =  FUN('a_1046 ::  TYPE) = APP(_1044,('a_1046)),
*          _1050 =  FUN('a_1049 ::  TYPE) = APP(_1041,('a_1049)),
*          _1055 =  FUN('a_1052 ::  TYPE) = SUM(0,1)(APP(_1047,('a_1052))),
*          _1058 =  FUN('a_1057 ::  TYPE) = SUM(0,1)(APP(_1050,('a_1057))),
*          /LEAF\_bar_foo_eq_r_993
*            (mpoly_var_c_994 :: REC_K{'a > 'a_996 :  TYPE} ;; mpoly_var_r_995 : Unknown : DEP_RECORD[ ] ;; )
*          =>LET  type_1150 = ALLARROW(Open; PARTIAL; (); 
*                                (PROJ(MU((vdt_bar_1290=SUM(0,1)(vdt_foo_1291), vdt_foo_1291=SUM(0,1)(vdt_bar_1290))),1),
*                                 PROJ(MU((vdt_bar_1292=SUM(0,1)(vdt_foo_1293), vdt_foo_1293=SUM(0,1)(vdt_bar_1292))),1)); 0; 
*                                LET  type_1148 = MU_NR((_1038=SUM(2,2)(CREC{})))
*                                     type_1149 = type_1148.1
*                                IN   type_1149
*                                END)
*                 type_1163 = ALLARROW(Open; PARTIAL; (); 
*                                (PROJ(MU((vdt_bar_1298=SUM(0,1)(vdt_foo_1299), vdt_foo_1299=SUM(0,1)(vdt_bar_1298))),2),
*                                 PROJ(MU((vdt_bar_1300=SUM(0,1)(vdt_foo_1301), vdt_foo_1301=SUM(0,1)(vdt_bar_1300))),2)); 0; 
*                                LET  type_1161 = MU_NR((_1033=SUM(2,2)(CREC{})))
*                                     type_1162 = type_1161.1
*                                IN   type_1162
*                                END)
*                 type_1164 = RECORD[1, 2](type_1150, type_1163)
*            IN   type_1164
*            END =
*          Let  type_1087 = MU_NR((_997=SUM(2,2)(CREC{})))
*               type_1088 = type_1087.1
*               type_1091 = MU((vdt_bar_1001=SUM(0,1)(vdt_foo_1002), vdt_foo_1002=SUM(0,1)(vdt_bar_1001)))
*               type_1093 = MU_NR((_999=SUM(2,2)(CREC{})))
*               type_1094 = type_1093.1
*               type_1095 = CREC{}
*               type_1096 = SUM(2,2)(type_1095)
*               _1097 : Unknown = inject_known_0[type_1096]()
*               false_1098 : Unknown = roll[type_1094](_1097)
*               /\ vars_eq_0_1004
*                 ( ;; v1_1304 : Unknown : type_1091.1, v2_1305 : Unknown : type_1091.1 ;; )
*               =>type_1088 =
*               Let  arg_pair_1006 : Unknown = record(1>v1_1304, 2>v2_1305)
*                    type_1099 = type_1091.2
*                    type_1100 = SUM(0,1)(type_1099)
*                    type_1101 = type_1091.1
*                    arg_pair_1_1102 : Unknown = select[1][](arg_pair_1006)
*                    eqargpair_1_1103 : Unknown = unroll[type_1101](arg_pair_1_1102)
*                    type_1104 = type_1091.1
*                    arg_pair_2_1105 : Unknown = select[2][](arg_pair_1006)
*                    eqargpair_2_1106 : Unknown = unroll[type_1104](arg_pair_2_1105)
*                    _1117 : Unknown = 
*                      SUM_SWITCH(eqargpair_1_1103: type_1100, 
*                           eqarg1_1013, 
*                           0: Unknown:: 
*                             Let  _1116 : Unknown = 
*                                    SUM_SWITCH(eqargpair_2_1106: type_1100, 
*                                         eqarg2_1014, 
*                                         0: Unknown:: 
*                                           Let  type_1110 = type_1091.2
*                                                type_1111 = SUM_0(0,1)(type_1110)
*                                                _1112 : Unknown = project_known0[type_1111](eqarg1_1013)
*                                                _1113 : Unknown = project_known0[type_1111](eqarg2_1014)
*                                                _1114 : Unknown = record(1>_1112, 2>_1113)
*                                                _1115 : Unknown = 
*                                                  Let  funarg_1309 : Unknown = _1114
*                                                       funarg_1_1310 : Unknown = select[1][](funarg_1309)
*                                                       funarg_2_1311 : Unknown = select[2][](funarg_1309)
*                                                       _1312 : Unknown = 
*                                                         App_Open(vars_eq_1_1005;  ; funarg_1_1310, funarg_2_1311;  )
*                                                  In   _1312
*                                                  End
*                                           In   _1115
*                                           End
*                                         DEFAULT = false_1098) : type_1088
*                             In   _1116
*                             End
*                           NODEFAULT) : type_1088
*               In   _1117
*               End
*               /\ vars_eq_1_1005
*                 ( ;; v1_1313 : Unknown : type_1091.2, v2_1314 : Unknown : type_1091.2 ;; )
*               =>type_1088 =
*               Let  arg_pair_1016 : Unknown = record(1>v1_1313, 2>v2_1314)
*                    type_1118 = type_1091.1
*                    type_1119 = SUM(0,1)(type_1118)
*                    type_1120 = type_1091.2
*                    arg_pair_1_1121 : Unknown = select[1][](arg_pair_1016)
*                    eqargpair_1_1122 : Unknown = unroll[type_1120](arg_pair_1_1121)
*                    type_1123 = type_1091.2
*                    arg_pair_2_1124 : Unknown = select[2][](arg_pair_1016)
*                    eqargpair_2_1125 : Unknown = unroll[type_1123](arg_pair_2_1124)
*                    _1136 : Unknown = 
*                      SUM_SWITCH(eqargpair_1_1122: type_1119, 
*                           eqarg1_1021, 
*                           0: Unknown:: 
*                             Let  _1135 : Unknown = 
*                                    SUM_SWITCH(eqargpair_2_1125: type_1119, 
*                                         eqarg2_1022, 
*                                         0: Unknown:: 
*                                           Let  type_1129 = type_1091.1
*                                                type_1130 = SUM_0(0,1)(type_1129)
*                                                _1131 : Unknown = project_known0[type_1130](eqarg1_1021)
*                                                _1132 : Unknown = project_known0[type_1130](eqarg2_1022)
*                                                _1133 : Unknown = record(1>_1131, 2>_1132)
*                                                _1134 : Unknown = 
*                                                  Let  funarg_1318 : Unknown = _1133
*                                                       funarg_1_1319 : Unknown = select[1][](funarg_1318)
*                                                       funarg_2_1320 : Unknown = select[2][](funarg_1318)
*                                                       _1321 : Unknown = 
*                                                         App_Open(vars_eq_0_1004;  ; funarg_1_1319, funarg_2_1320;  )
*                                                  In   _1321
*                                                  End
*                                           In   _1134
*                                           End
*                                         DEFAULT = false_1098) : type_1088
*                             In   _1135
*                             End
*                           NODEFAULT) : type_1088
*               In   _1136
*               End
*               top_eq_1137 : Unknown = record(1>vars_eq_0_1004, 2>vars_eq_1_1005)
*          In   top_eq_1137
*          End,
*          /LEAF\poly+Ebar_INT_r_1061
*            (mpoly_var_c_1062 :: REC_K{'a > 'a_1064 :  TYPE} ;; mpoly_var_r_1063 : Unknown : DEP_RECORD[ ] ;; )
*          =>LET  type_1175 = ALLARROW(Open; PARTIAL; (); 
*                                (APP(_1041,(mpoly_var_c_1062.'a)), APP(_1041,(mpoly_var_c_1062.'a))); 0; 
*                                LET  type_1173 = MU_NR((_1070=SUM(2,2)(CREC{})))
*                                     type_1174 = type_1173.1
*                                IN   type_1174
*                                END)
*            IN   type_1175
*            END =
*          Let  _1165 : Unknown = App_Open(_bar_foo_eq_r_993;  mpoly_var_c_1062; mpoly_var_r_1063;  )
*               v1_1166 : Unknown = select[1][](_1165)
*          In   v1_1166
*          End,
*          /LEAF\poly+Efoo_INT_r_1073
*            (mpoly_var_c_1074 :: REC_K{'a > 'a_1076 :  TYPE} ;; mpoly_var_r_1075 : Unknown : DEP_RECORD[ ] ;; )
*          =>LET  type_1186 = ALLARROW(Open; PARTIAL; (); 
*                                (APP(_1044,(mpoly_var_c_1074.'a)), APP(_1044,(mpoly_var_c_1074.'a))); 0; 
*                                LET  type_1184 = MU_NR((_1082=SUM(2,2)(CREC{})))
*                                     type_1185 = type_1184.1
*                                IN   type_1185
*                                END)
*            IN   type_1186
*            END =
*          Let  _1176 : Unknown = App_Open(_bar_foo_eq_r_993;  mpoly_var_c_1074; mpoly_var_r_1075;  )
*               v2_1177 : Unknown = select[2][](_1176)
*          In   v2_1177
*          End]
*         IMPORTS:
*         
*         EXPORTS:
*         +Efoo_INT_r = poly+Efoo_INT_r_1073
*         +Ebar_INT_r = poly+Ebar_INT_r_1061
*         foo_sum = _1058
*         bar_sum = _1055
*         foo_sumarg = _1050
*         bar_sumarg = _1047
*         foo = _1044
*         bar = _1041
*         _bar_foo_eq_TYC_r = _bar_foo_eq_r_993
*         +Q_bar_foo = _990
*         
and context
 Constructor variables, kinds, and equations are :

 Expression variables and constructors are :


bnd_valid called with bound =
          /LEAF\poly+Ebar_INT_r_1061
*           (mpoly_var_c_1062 :: REC_K{'a > 'a_1064 :  TYPE} ;; mpoly_var_r_1063 : Unknown : DEP_RECORD[ ] ;; )
*         =>LET  type_1175 = ALLARROW(Open; PARTIAL; (); 
*                               (APP(_1041,(mpoly_var_c_1062.'a)), APP(_1041,(mpoly_var_c_1062.'a))); 0; 
*                               LET  type_1173 = MU_NR((_1070=SUM(2,2)(CREC{})))
*                                    type_1174 = type_1173.1
*                               IN   type_1174
*                               END)
*           IN   type_1175
*           END =
*         Let  _1165 : Unknown = App_Open(_bar_foo_eq_r_993;  mpoly_var_c_1062; mpoly_var_r_1063;  )
*              v1_1166 : Unknown = select[1][](_1165)
*         In   v1_1166
*         End
and context
 Constructor variables, kinds, and equations are :
_1058 =           LET  _1058 =  FUN('a_1057 ::  TYPE) = SUM(0,1)(APP(_1050,('a_1057)))
*         IN   _1058
*         END::Arrow_k(Open; 'a_1057 : TYPE; SINGLE_TYPE(SUM(0,1)(APP(_1050,('a_1057)))))
_1055 =           LET  _1055 =  FUN('a_1052 ::  TYPE) = SUM(0,1)(APP(_1047,('a_1052)))
*         IN   _1055
*         END::Arrow_k(Open; 'a_1052 : TYPE; SINGLE_TYPE(SUM(0,1)(APP(_1047,('a_1052)))))
_1050 =           LET  _1050 =  FUN('a_1049 ::  TYPE) = APP(_1041,('a_1049))
*         IN   _1050
*         END::Arrow_k(Open; 'a_1049 : TYPE; SINGLE_TYPE(APP(_1041,('a_1049))))
_1047 =           LET  _1047 =  FUN('a_1046 ::  TYPE) = APP(_1044,('a_1046))
*         IN   _1047
*         END::Arrow_k(Open; 'a_1046 : TYPE; SINGLE_TYPE(APP(_1044,('a_1046))))
_1044 =           LET  _1044 =  FUN('a_1043 ::  TYPE) = PROJ(APP(_990,('a_1043)),2)
*         IN   _1044
*         END::Arrow_k(Open; 'a_1043 : TYPE; SINGLE_TYPE(PROJ(APP(_990,('a_1043)),2)))
_1041 =           LET  _1041 =  FUN('a_1040 ::  TYPE) = PROJ(APP(_990,('a_1040)),1)
*         IN   _1041
*         END::Arrow_k(Open; 'a_1040 : TYPE; SINGLE_TYPE(PROJ(APP(_990,('a_1040)),1)))
_990 =           LET  _990 =  FUN('a_987 ::  TYPE) = MU((vdt_bar_988=SUM(0,1)(vdt_foo_989), vdt_foo_989=SUM(0,1)(vdt_bar_988)))
*         IN   _990
*         END::          Arrow_k(Open; 'a_987 : TYPE; REC_K{1 > vdt_bar_1370 : 
*                                            SINGLE_TYPE(PROJ(MU((vdt_bar_988=SUM(0,1)(vdt_foo_989),
*                                                                 vdt_foo_989=SUM(0,1)(vdt_bar_988))),1)),
*                                            2 > vdt_foo_1371 : 
*                                            SINGLE_TYPE(PROJ(MU((vdt_bar_988=SUM(0,1)(vdt_foo_989),
*                                                                 vdt_foo_989=SUM(0,1)(vdt_bar_988))),2))})

 Expression variables and constructors are :
_bar_foo_eq_r_993:          ALLARROW(Open; TOTAL; (mpoly_var_c_994 :: REC_K{'a > 'a_996 :  TYPE}); 
*            (DEP_RECORD[ ]); 0; 
*            LET  type_1150 = ALLARROW(Open; PARTIAL; (); 
*                                (PROJ(MU((vdt_bar_1290=SUM(0,1)(vdt_foo_1291), vdt_foo_1291=SUM(0,1)(vdt_bar_1290))),1),
*                                 PROJ(MU((vdt_bar_1292=SUM(0,1)(vdt_foo_1293), vdt_foo_1293=SUM(0,1)(vdt_bar_1292))),1)); 0; 
*                                LET  type_1148 = MU_NR((_1038=SUM(2,2)(CREC{})))
*                                     type_1149 = type_1148.1
*                                IN   type_1149
*                                END)
*                 type_1163 = ALLARROW(Open; PARTIAL; (); 
*                                (PROJ(MU((vdt_bar_1298=SUM(0,1)(vdt_foo_1299), vdt_foo_1299=SUM(0,1)(vdt_bar_1298))),2),
*                                 PROJ(MU((vdt_bar_1300=SUM(0,1)(vdt_foo_1301), vdt_foo_1301=SUM(0,1)(vdt_bar_1300))),2)); 0; 
*                                LET  type_1161 = MU_NR((_1033=SUM(2,2)(CREC{})))
*                                     type_1162 = type_1161.1
*                                IN   type_1162
*                                END)
*                 type_1164 = RECORD[1, 2](type_1150, type_1163)
*            IN   type_1164
*            END)


con_equiv called with constructor =
          ALLARROW(Open; PARTIAL; (); 
*            (PROJ(MU((vdt_bar_1392=SUM(0,1)(vdt_foo_1393), vdt_foo_1393=SUM(0,1)(vdt_bar_1392))),1),
*             PROJ(MU((vdt_bar_1394=SUM(0,1)(vdt_foo_1395), vdt_foo_1395=SUM(0,1)(vdt_bar_1394))),1)); 0; 
*            LET  type_1396 = MU_NR((_1038=SUM(2,2)(CREC{})))
*                 type_1397 = type_1396.1
*            IN   type_1397
*            END)
and
          LET  type_1175 = ALLARROW(Open; PARTIAL; (); 
*                             (APP(_1041,(mpoly_var_c_1062.'a)), APP(_1041,(mpoly_var_c_1062.'a))); 0; 
*                             LET  type_1173 = MU_NR((_1070=SUM(2,2)(CREC{})))
*                                  type_1174 = type_1173.1
*                             IN   type_1174
*                             END)
*         IN   type_1175
*         END
and minimal context
 Constructor variables, kinds, and equations are :
mpoly_var_c_1062::REC_K{'a > 'a_1064 :  TYPE}
_1041 =           LET  _1041 =  FUN('a_1040 ::  TYPE) = PROJ(APP(_990,('a_1040)),1)
*         IN   _1041
*         END::Arrow_k(Open; 'a_1040 : TYPE; SINGLE_TYPE(PROJ(APP(_990,('a_1040)),1)))
_990 =           LET  _990 =  FUN('a_987 ::  TYPE) = MU((vdt_bar_988=SUM(0,1)(vdt_foo_989), vdt_foo_989=SUM(0,1)(vdt_bar_988)))
*         IN   _990
*         END::          Arrow_k(Open; 'a_987 : TYPE; REC_K{1 > vdt_bar_1370 : 
*                                            SINGLE_TYPE(PROJ(MU((vdt_bar_988=SUM(0,1)(vdt_foo_989),
*                                                                 vdt_foo_989=SUM(0,1)(vdt_bar_988))),1)),
*                                            2 > vdt_foo_1371 : 
*                                            SINGLE_TYPE(PROJ(MU((vdt_bar_988=SUM(0,1)(vdt_foo_989),
*                                                                 vdt_foo_989=SUM(0,1)(vdt_bar_988))),2))})

 Expression variables and constructors are :


con_equiv called with constructor =
APP(_1041,(mpoly_var_c_1062.'a))
and
PROJ(MU((vdt_bar_1392=SUM(0,1)(vdt_foo_1393), vdt_foo_1393=SUM(0,1)(vdt_bar_1392))),1)
and minimal context
 Constructor variables, kinds, and equations are :
mpoly_var_c_1062::REC_K{'a > 'a_1064 :  TYPE}
_1041 =           LET  _1041 =  FUN('a_1040 ::  TYPE) = PROJ(APP(_990,('a_1040)),1)
*         IN   _1041
*         END::Arrow_k(Open; 'a_1040 : TYPE; SINGLE_TYPE(PROJ(APP(_990,('a_1040)),1)))
_990 =           LET  _990 =  FUN('a_987 ::  TYPE) = MU((vdt_bar_988=SUM(0,1)(vdt_foo_989), vdt_foo_989=SUM(0,1)(vdt_bar_988)))
*         IN   _990
*         END::          Arrow_k(Open; 'a_987 : TYPE; REC_K{1 > vdt_bar_1370 : 
*                                            SINGLE_TYPE(PROJ(MU((vdt_bar_988=SUM(0,1)(vdt_foo_989),
*                                                                 vdt_foo_989=SUM(0,1)(vdt_bar_988))),1)),
*                                            2 > vdt_foo_1371 : 
*                                            SINGLE_TYPE(PROJ(MU((vdt_bar_988=SUM(0,1)(vdt_foo_989),
*                                                                 vdt_foo_989=SUM(0,1)(vdt_bar_988))),2))})

 Expression variables and constructors are :


END ILSTATIC STACK
Error while calling module_valid
ILSTATIC STACK
END ILSTATIC STACK
tilt: Normalize::context_beta_reduce: Proj from non-record
