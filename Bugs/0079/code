Source


(*$import Firstlude TiltPrim Prelude *)

val f	: int * int option -> unit
	= fn (_, x) => (case x
			  of NONE => ()
			   | _ => raise Subscript)

val g	: ('a -> unit) -> 'a -> unit
	= fn x => fn y => x y

val _	: unit
	= g f (0, NONE)	(* raises Subscript *)

HIL
          CONTEXT_SDEC: f > f_1105 : ({INT32 * CON_APP(CON_PATH(_944.option_TYC); INT32)} -> UNIT)

          [f > f_1105 = 
**            /NONRECUR\anonfun_1100
**                  (mvar_1083 : {INT32 *
**                                CON_APP(CON_PATH(_944.option_TYC); INT32)})
**                  : UNIT =
**            LET shortResultType_1086 = UNIT
**                _1087 = (mvar_1083)#1_~48
**                _1088 = (mvar_1083)#2_~48
**            IN  LET shortResultType_1092 = UNIT
**                IN  CASE(arg = COERCE(_944.+Noption_out_INT, [CON_MPROJ(STR['a_TYV > _951 = INT32], 'a_TYV)], _1088):
**                         CON_APP(CON_PATH(_944.option_sum_INT); INT32),
**                         resultType = shortResultType_1092,
**                         boundVar = sumswitch_arg_1095,
**                         0: unit,
**                         1: ---,
**                         Default: RAISE(UNIT, _1051.mk_INT))
**                END
**            END, 

HIL

          CONTEXT_SDEC: -X!valbindg_INT > valbindg_1126 : 
**                          $POLY$ SIGF(varpoly_1109, ['a_TYV > 'a_TYV_1107 : TYPE] =>
**                                         [g > g_1125 : 
***                                            ((CON_PATH(varpoly_1109.'a_TYV) -> UNIT) ->
***                                            (CON_PATH(varpoly_1109.'a_TYV) -> UNIT))])

*          -X!valbindg_INT > valbindg_1126 = 
**             $POLY$ FUNC(varpoly_1109: ['a_TYV > 'a_TYV_1107 : TYPE] =>
**                    STR[g > g_1125 = 
***                          /NONRECUR\anonfun_1121
***                                (x_1111 : (CON_PATH(varpoly_1109.'a_TYV) -> UNIT))
***                                : (CON_PATH(varpoly_1109.'a_TYV) -> UNIT) =
***                          LET shortResultType_1114 = (CON_PATH(varpoly_1109.'a_TYV) -> UNIT)
***                          IN  /NONRECUR\anonfun_1120
***                                    (y_1115 : CON_PATH(varpoly_1109.'a_TYV))
***                                    : UNIT =
***                              LET shortResultType_1118 = UNIT
***                              IN  APP(x_1111, y_1115)
***                              END
***                          END]
**                    : 
**                    [g > g_1125 : ((CON_PATH(varpoly_1109.'a_TYV) -> UNIT) -> (CON_PATH(varpoly_1109.'a_TYV) -> UNIT))]), 

HIL

          CONTEXT_SDEC: g > outer_valbind_1128 : 
**                          $POLY$ SIGF(varpoly_1109, ['a_TYV > 'a_TYV_1107 : TYPE] =>
**                                         [it_INT > inner_valbind_1127 : 
***                                            ((CON_PATH(varpoly_1109.'a_TYV) -> UNIT) ->
***                                            (CON_PATH(varpoly_1109.'a_TYV) -> UNIT))])

*          g > outer_valbind_1128 = 
**             $POLY$ FUNC(varpoly_1109: ['a_TYV > 'a_TYV_1107 : TYPE] =>
**                    STR[it_INT > inner_valbind_1127 = MAPP(valbindg_1126,  varpoly_1109).g]
**                    : 
**                    [it_INT > inner_valbind_1127 : 
***                       ((CON_PATH(varpoly_1109.'a_TYV) -> UNIT) -> (CON_PATH(varpoly_1109.'a_TYV) -> UNIT))]),

HIL

CONTEXT_SDEC: !bindarg_INT > bindarg_1130 : UNIT

*          !bindarg_INT > bindarg_1130 = 
**            APP(APP(MAPP(outer_valbind_1128,  STR['a_TYV > 'a_TYV_1107 = {INT32 *
***                                                                         CON_APP(CON_PATH(_944.option_TYC); INT32)}]).it_INT,
**                    f_1105),
**                (0, COERCE(_944.+Noption_in_INT, [INT32], INJ(0, CON_APP(CON_PATH(_944.option_sum_INT); INT32))))), 

HIL

CONTEXT_SDEC: bindTuple_INT > bindTuple_1139 : UNIT

*          bindTuple_INT > bindTuple_1139 = LET shortResultType_1138 = UNIT
**                                          IN  unit
**                                          END]

Phasesplit

          [f_1195 : Unknown = 
*            Let  /NORECUR\anonfun_1183
*                   ( ;; mvar_1184 : Unknown : RECORD[1, 2](INT32, APP(_c_1158.option,(INT32))) ;; )
*                 ->UNIT =
*                 Let  shortResultType_1185 = UNIT
*                      _1186 : Unknown = select[1]{}[](mvar_1184)
*                      _1187 : Unknown = select[2]{}[](mvar_1184)
*                      shortResultType_1188 = UNIT
*                 In   SUM_SWITCH(COERCE( select[+Noption_out]{}[](_r_1159)[LET  _1189 = INT32
*                                                                                _c_1191 = CREC{'a = _1189}
*                                                                           IN   _c_1191.'a
*                                                                           END],_1187 ): 
*         +1   APP(_c_1158.option_sum,
*         +1     (INT32)), 
*                           sumswitch_arg_1194, 
*                           0: Unknown:: record()
*                           DEFAULT = Raise(select[mk]{}[](_r_1180),UNIT)) : shortResultType_1188
*                 End
*            In   anonfun_1183
*            End,

Phasesplit

*          /LEAF\valbindg_r_1197
*            (varpoly_c_1198 :: REC_K{'a > 'a_TYV_1200 :  TYPE} ;; varpoly_r_1199 : Unknown : DEP_RECORD[ ] ;; )
*          =>DEP_RECORD[ g > g_1213]
*              (ALLARROW(Open; PARTIAL; (); 
*                  (ALLARROW(Open; PARTIAL; (); (varpoly_c_1198.'a); 0; UNIT)); 0; 
*                  ALLARROW(Open; PARTIAL; (); (varpoly_c_1198.'a); 0; UNIT))) =
*          Let  g_1207 : Unknown = Let  /NORECUR\anonfun_1201
*                                         ( ;; x_1202 : Unknown : ALLARROW(Open; PARTIAL; (); (varpoly_c_1198.'a); 0; UNIT) ;; )
*                                       ->ALLARROW(Open; PARTIAL; (); (varpoly_c_1198.'a); 0; UNIT) =
*                                       Let  shortResultType_1203 = ALLARROW(Open; PARTIAL; (); (varpoly_c_1198.'a); 0; UNIT)
*                                            /NORECUR\anonfun_1204
*                                              ( ;; y_1205 : Unknown : varpoly_c_1198.'a ;; )
*                                            ->UNIT =
*                                            Let  shortResultType_1206 = UNIT
*                                            In   App_Open(x_1202;  ; y_1205;  )
*                                            End
*                                       In   anonfun_1204
*                                       End
*                                  In   anonfun_1201
*                                  End
*               struct_gctag_1211 : Unknown = mk_record_gctag{Unknown}[RECORD[g](TYPEOF(g_1207))]()
*               _r_1210 : Unknown = record(struct_gctag_1211)(g>g_1207)
*          In   _r_1210
*          End,

Phasesplit

*          /LEAF\outer_valbind_r_1215
*            (varpoly_c_1216 :: REC_K{'a > 'a_TYV_1218 :  TYPE} ;; varpoly_r_1217 : Unknown : DEP_RECORD[ ] ;; )
*          =>ALLARROW(Open; PARTIAL; (); 
*               (ALLARROW(Open; PARTIAL; (); (varpoly_c_1216.'a); 0; UNIT)); 0; 
*               ALLARROW(Open; PARTIAL; (); (varpoly_c_1216.'a); 0; UNIT)) =
*          Let  inner_valbind_1219 : Unknown = select[g]{}[](App_Open(valbindg_r_1197;  varpoly_c_1216; varpoly_r_1217;  ))
*               _r_1222 : Unknown = inner_valbind_1219
*          In   _r_1222
*          End,

Phasesplit

*          bindarg_1233 : Unknown = 
*            App_Open(App_Open(Let  'a_TYV_1225 = RECORD[1, 2](INT32, APP(_c_1158.option,(INT32)))
*                                   _c_1227 = CREC{'a = 'a_TYV_1225}
*                                   struct_gctag_1229 : Unknown = mk_record_gctag{}[UNIT]()
*                                   _r_1228 : Unknown = record(struct_gctag_1229)()
*                              In   App_Open(outer_valbind_r_1215;  _c_1227; _r_1228;  )
*                              End;  ; f_1195;  ); 
*            ; Let  record_temp_1230 : Unknown = 0
*                   record_temp_1231 : Unknown = 
*                     COERCE( select[+Noption_in]{}[](_r_1159)[INT32],inject_dyn0{}[APP(_c_1158.option_sum,(INT32))]() )
*                   gctag_1232 : Unknown = 
*                     mk_record_gctag{Unknown, Unknown}[RECORD[1, 2](TYPEOF(record_temp_1230), TYPEOF(record_temp_1231))]()
*              In   record(gctag_1232)(1>record_temp_1230, 2>record_temp_1231)
*              End;  ),

Phasesplit

*          bindTuple_1235 : Unknown = Let  shortResultType_1234 = UNIT
*                                     In   record()
*                                     End]

Phasesplit

*         IMPORTS:
*         +O_bool_INT_c = _c_1150 : REC_K{bool > _1152 :  TYPE,
*                                         bool_sumarg > _1153 :  SINGLE(CREC{}),
*                                         bool_sum > _1154 :  SINGLE(SUM(2,2)(_1153))}
*         +O_bool_INT_r > _r_1151 : Unknown : DEP_RECORD[ +Nbool_in > _1155, +Nbool_out > _1156, +Ebool > _1157]
*                                               (COERCION[  ](_c_1150.bool_sum,_c_1150.bool),
*                                                COERCION[  ](_c_1150.bool,_c_1150.bool_sum),
*                                                ALLARROW(Open; PARTIAL; (); 
*                                                   (RECORD[1, 2](_c_1150.bool, _c_1150.bool)); 0; 
*                                                   _c_1150.bool))
*         +O_option_INT_c = _c_1158 : REC_K{option > _1161 :  Arrow_k(Open; _1160 : TYPE; TYPE),
*                                           option_sumarg > _1164 :  SINGLE(LET  _1163 =  FUN(_1162 ::  TYPE) = _1162
*                                                                           IN   _1163
*                                                                           END),
*                                           option_sum > _1167 : 
*                                           SINGLE(LET  _1166 =  FUN(_1165 ::  TYPE) = SUM(1,2)(APP(_1164,(_1165)))
*                                                  IN   _1166
*                                                  END)}
*         +O_option_INT_r > _r_1159 : Unknown : DEP_RECORD[ +Noption_in > _1169, +Noption_out > _1171, +Eoption > _r_1173]
*                                                 (COERCION[ _1168 ](APP(_c_1158.option_sum,(_1168)),APP(_c_1158.option,(_1168))),
*                                                  COERCION[ _1170 ](APP(_c_1158.option,(_1170)),APP(_c_1158.option_sum,(_1170))),
*                                                  ALLARROW(Open; TOTAL; (_c_1174 :: REC_K{'a > _1176 :  TYPE}); 
*                                                     (_r_1175 :: DEP_RECORD[ +E'a > _1177]
*                                                                   (ALLARROW(Open; PARTIAL; (); 
*                                                                       (RECORD[1, 2](_c_1174.'a, _c_1174.'a)); 0; 
*                                                                       _c_1150.bool))); 0; 
*                                                     ALLARROW(Open; PARTIAL; (); 
*                                                        (RECORD[1, 2]
*                                                           (APP(_c_1158.option,(_c_1174.'a)), APP(_c_1158.option,(_c_1174.'a)))); 0; 
*                                                        _c_1150.bool)))
*         Subscript_c = _c_1179 : REC_K{}
*         Subscript_r > _r_1180 : Unknown : DEP_RECORD[ stamp > _1181, mk > _1182](EXNTAG(UNIT), EXN)
*         EXPORTS:
*         bindTuple = bindTuple_1235
*         !bindarg = bindarg_1233
*         g_r = outer_valbind_r_1215
*         f = f_1195

ClosureConv

          [reify_1409 = APP(_c_1158.option,(INT32)),
*          STATIC shortResultType_1188 = UNIT,
*          +Noption_out_1277 : Int = select[+Noption_out]{}[](_r_1159),
*          STATIC _1189 = INT32,
*          bindTuple_1281 : Trace = record(),
*          mk_1282 : Trace = select[mk]{}[](_r_1180),
*          STATIC anonfun_type_1492 = ALLARROW(Closure; PARTIAL; (); (INT32, APP(_c_1158.option,(INT32))); 0; UNIT),
*          STATIC venvtype_1518 = UNIT,
*          /NORECUR-CODE\anonfun_code_1493
*            (anonfun_cEnv_1495 :: SINGLE(CREC{}) ;; 
*             anonfun_eEnv_1496 : Trace : venvtype_1518,
*             v1_1346 : Int : INT32,
*             v2_1347 : Compute(reify_1409) : APP(_c_1158.option,(INT32)) ;; 
*             )
*          ->UNIT =
*          Let  _1280 : Trace = COERCE( +Noption_out_1277[_1189],v2_1347 )
*               _1284 : Trace = 
*                 SUM_SWITCH(_1280: APP(_c_1158.option_sum,(INT32)), 
*                      sumswitch_arg_1194, 
*                      0: Trace:: bindTuple_1281
*                      DEFAULT = Let  _1283 : Trace = Raise(mk_1282,UNIT)
*                                In   _1283
*                                End) : shortResultType_1188
*          In   _1284
*          End,
*          anonfun_1183 : anonfun_type_1492 = (anonfun_code_1493,CREC{},record()),

ClosureConv

*          STATIC 
*            outer_valbind_r_type_1497 = ALLARROW(Closure; TOTAL; (varpoly_c_1216 :: REC_K{'a > 'a_TYV_1218 :  TYPE}); 
*                                           (DEP_RECORD[ ]); 0; 
*                                           LET  type_1376 = varpoly_c_1216.'a
*                                                type_1377 = VARARG[Closure->](type_1376, UNIT)
*                                                type_1310 = ALLARROW(Closure; PARTIAL; (); (type_1377); 0; type_1377)
*                                           IN   type_1310
*                                           END),
*          STATIC venvtype_1521 = UNIT,
*          /LEAF-CODE\outer_valbind_r_code_1498
*            (outer_valbind_r_cEnv_1500 :: SINGLE(CREC{}),
*             varpoly_c_1216 :: REC_K{'a > 'a_TYV_1218 :  TYPE} ;; 
*             outer_valbind_r_eEnv_1501 : Trace : venvtype_1521,
*             varpoly_r_1217 : Trace : DEP_RECORD[ ] ;; 
*             )
*          =>LET  type_1376 = varpoly_c_1216.'a
*                 type_1377 = VARARG[Closure->](type_1376, UNIT)
*                 type_1310 = ALLARROW(Closure; PARTIAL; (); (type_1377); 0; type_1377)
*            IN   type_1310
*            END =
*          Let  type_1358 = varpoly_c_1216.'a
*               STATIC type_1290 = VARARG[Closure->](type_1358, UNIT)
*               STATIC anonfun_type_1502 = ALLARROW(Closure; TOTAL; (); (VARARG[Closure->](type_1358, UNIT)); 0; type_1290)
*               STATIC venvtype_1520 = UNIT
*               /NORECUR-CODE\anonfun_code_1503
*                 (anonfun_cEnv_1505 :: SINGLE(CREC{type_1358 = type_1358}) ;; 
*                  anonfun_eEnv_1506 : Trace : venvtype_1520,
*                  x_1202 : Trace : VARARG[Closure->](anonfun_cEnv_1505.type_1358, UNIT) ;; 
*                  )
*               =>type_1290 =
*               Let  type_1517 = anonfun_cEnv_1505.type_1358
*                    _1366 : Trace = make_onearg[Closure]{}[type_1517, UNIT](x_1202)
*                    STATIC anonfun_type_1508 = ALLARROW(Closure; PARTIAL; (); (type_1517); 0; UNIT)
*                    STATIC singlevenvtype_1519 = TYPEOF(_1366)
*                    /NORECUR-CODE\anonfun_code_1509
*                      (anonfun_cEnv_1511 :: SINGLE(CREC{type_1358 = type_1517}) ;; 
*                       anonfun_eEnv_1512 : Trace : singlevenvtype_1519,
*                       y_1205 : Compute(anonfun_cEnv_1511.type_1358) : anonfun_cEnv_1511.type_1358 ;; 
*                       )
*                    ->UNIT =
*                    Let  type_1516 = anonfun_cEnv_1511.type_1358
*                         _1515 : Trace = anonfun_eEnv_1512
*                         _1367 : Trace = App_Closure(_1515;  ; y_1205;  )
*                    In   _1367
*                    End
*                    anonfun_1360 : anonfun_type_1508 = (anonfun_code_1509,CREC{type_1358 = type_1517},_1366)
*                    anonfun_1204 : Trace = make_vararg[Closure]{}[type_1517, UNIT](anonfun_1360)
*               In   anonfun_1204
*               End
*               anonfun_1201 : anonfun_type_1502 = (anonfun_code_1503,CREC{type_1358 = type_1358},record())
*          In   anonfun_1201
*          End,
*          outer_valbind_r_1215 : outer_valbind_r_type_1497 = (outer_valbind_r_code_1498,CREC{},record()),

ClosureConv

*          type_1311 = _c_1158.option,
*          type_1312 = APP(type_1311,(INT32)),
*          type_1313 = RECORD[1, 2](INT32, type_1312),
*          type_1314 = CREC{'a = type_1313},
*          struct_gctag_1315 : Int = mk_record_gctag{}[UNIT](),
*          _r_1316 : Trace = record(struct_gctag_1315)(),
*          _1317 : Trace = App_Closure(outer_valbind_r_1215;  type_1314; _r_1316;  ),
*          _1318 : Trace = App_Closure(_1317;  ; anonfun_1183;  ),
*          +Noption_in_1319 : Int = select[+Noption_in]{}[](_r_1159),
*          STATIC type_1320 = _c_1158.option_sum,
*          STATIC type_1321 = APP(type_1320,(INT32)),
*          _1322 : Trace = inject_known_0{}[type_1321](),
*          record_temp_1323 : Compute(type_1312) = COERCE( +Noption_in_1319[INT32],_1322 ),
*          bindarg_1403 : Trace = App_Closure(_1318;  ; 0, record_temp_1323;  )]

ClosureConv

*         IMPORTS:
*         +O_bool_INT_c = _c_1150 : REC_K{bool > _1152 :  TYPE,
*                                         bool_sumarg > _1153 :  SINGLE(CREC{}),
*                                         bool_sum > _1154 :  SINGLE(SUM(2,2)(_1153))}
*         +O_bool_INT_r > _r_1151 : Trace : DEP_RECORD[ +Nbool_in > _1155, +Nbool_out > _1156, +Ebool > _1157]
*                                             (COERCION[  ](_c_1150.bool_sum,_c_1150.bool),
*                                              COERCION[  ](_c_1150.bool,_c_1150.bool_sum),
*                                              ALLARROW(Closure; PARTIAL; (); (_c_1150.bool, _c_1150.bool); 0; _c_1150.bool))
*         +O_option_INT_c = _c_1158 : REC_K{option > _1161 :  Arrow_k(Closure; _1160 : TYPE; TYPE),
*                                           option_sumarg > _1164 : 
*                                           SINGLE(LET  _code_1483 = CODE(_cEnv_1485 ::  REC_K{}, _1162 ::  TYPE) = LET  
*                                                                                                                   IN   _1162
*                                                                                                                   END
*                                                       _1163 = CLOSURE(_code_1483,CREC{})
*                                                  IN   _1163
*                                                  END),
*                                           option_sum > _1167 : 
*                                           SINGLE(LET  _code_1488 = 
*                                                            CODE(_cEnv_1490 ::  REC_K{}, _1165 ::  TYPE)
*                                                           = LET  
*                                                             IN   SUM(1,2)(APP(_1164,(_1165)))
*                                                             END
*                                                       _1166 = CLOSURE(_code_1488,CREC{})
*                                                  IN   _1166
*                                                  END)}
*         +O_option_INT_r > _r_1159 : Trace : DEP_RECORD[ +Noption_in > _1169, +Noption_out > _1171, +Eoption > _r_1173]
*                                               (COERCION[ _1168 ](LET  type_1253 = _c_1158.option_sum
*                                                                       type_1254 = APP(type_1253,(_1168))
*                                                                  IN   type_1254
*                                                                  END,
*         +1   LET  type_1255 = _c_1158.option
*         +1        type_1256 = APP(type_1255,(_1168))
*         +1   IN   type_1256
*         +1   END),
*                                                COERCION[ _1170 ](LET  type_1257 = _c_1158.option
*                                                                       type_1258 = APP(type_1257,(_1170))
*                                                                  IN   type_1258
*                                                                  END,
*         +1   LET  type_1259 = _c_1158.option_sum
*         +1        type_1260 = APP(type_1259,(_1170))
*         +1   IN   type_1260
*         +1   END),
*                                                ALLARROW(Closure; TOTAL; (_c_1174 :: REC_K{'a > _1176 :  TYPE}); 
*                                                   (_r_1175 :: DEP_RECORD[ +E'a > _1177]
*                                                                 (ALLARROW(Closure; PARTIAL; (); 
*                                                                     (_c_1174.'a, _c_1174.'a); 0; 
*                                                                     _c_1150.bool))); 0; 
*                                                   ALLARROW(Closure; PARTIAL; (); 
*                                                      (APP(_c_1158.option,(_c_1174.'a)), APP(_c_1158.option,(_c_1174.'a))); 0; 
*                                                      _c_1150.bool)))
*         Subscript_c = _c_1179 : REC_K{}
*         Subscript_r > _r_1180 : Trace : DEP_RECORD[ stamp > _1181, mk > _1182](EXNTAG(UNIT), EXN)
*         EXPORTS:
*         bindTuple = bindTuple_1281
*         !bindarg = bindarg_1403
*         g_r = outer_valbind_r_1215
*         f = anonfun_1183
*         

RTL code

main = ML Bug_unit

ML Bug_main
     args = []
     ret = _1535(NOTRACE_CODE)
     results = [_1636(TRACE)]

{
LCfuntop_1533:
     li         0, _1534(NOTRACE_INT)
     call_C_NORMALML AssertMirrorPtrArray arguments = ([_1534(NOTRACE_INT)] results = ([] }
     needalloc  0
     ### start making constructor call
     laddr      0(ML +O_option_INT_c_INT), _1543(NOTRACE_LABEL)
     mirror_global_offset_1544(NOTRACE_INT)
     ldw        _1542(TRACE), (_1543(NOTRACE_LABEL)+_1544(NOTRACE_INT))
     ### Proj_c at label option_TYC
     ldw        _1541(TRACE), 0(_1542(TRACE))
     li         2, _1546(TRACE)
     ldw        _1547(NOTRACE_CODE), 0(_1541(TRACE))
     ldw        _1548(TRACE), 4(_1541(TRACE))
     call_ML_NORMAL_1547(NOTRACE_CODE) arguments = ([_1548(TRACE), _1546(TRACE)] results = ([_1549(TRACE)] }
     needalloc  0
     ### done making constructor call
     li         111, _1550(NOTRACE_INT)
     stw        _1550(NOTRACE_INT), ~4(LDreify_1409)
     needmutate 2
     laddr      0(LDreify_1409), _1551(NOTRACE_LABEL)
     mirror_global_offset_1552(NOTRACE_INT)
     storemutate(_1551(NOTRACE_LABEL)+_1552(NOTRACE_INT)),ptrMutate
     stw        _1549(TRACE), (_1551(NOTRACE_LABEL)+_1552(NOTRACE_INT))
     laddr      0(ML +O_option_INT_r_INT), _1555(NOTRACE_LABEL)
     mirror_global_offset_1556(NOTRACE_INT)
     ldw        _1554(TRACE), (_1555(NOTRACE_LABEL)+_1556(NOTRACE_INT))
     ldw        _1557(NOTRACE_INT), 4(_1554(TRACE))
     stw        _1557(NOTRACE_INT), 0(LD+Noption_out_1277)
     laddr      0(ML Subscript_r_INT), _1561(NOTRACE_LABEL)
     mirror_global_offset_1562(NOTRACE_INT)
     ldw        _1560(TRACE), (_1561(NOTRACE_LABEL)+_1562(NOTRACE_INT))
     ldw        _1563(TRACE), 4(_1560(TRACE))
     li         111, _1564(NOTRACE_INT)
     stw        _1564(NOTRACE_INT), ~4(LDmk_1282)
     laddr      0(LDmk_1282), _1565(NOTRACE_LABEL)
     mirror_global_offset_1566(NOTRACE_INT)
     storemutate(_1565(NOTRACE_LABEL)+_1566(NOTRACE_INT)),ptrMutate
     stw        _1563(TRACE), (_1565(NOTRACE_LABEL)+_1566(NOTRACE_INT))
     ### allocating 1 closures
     ### allocating 3-record
     ### done allocating 3 record
     laddr      0(LDanonfun_1183), _1571(NOTRACE_LABEL)
     ### done allocating 1 closures
     ### allocating 1 closures
     ### allocating 3-record
     ### done allocating 3 record
     laddr      0(LDouter_valbind_r_1215), _1576(NOTRACE_LABEL)
     ### done allocating 1 closures
     laddr      0(ML +O_option_INT_c_INT), _1580(NOTRACE_LABEL)
     mirror_global_offset_1581(NOTRACE_INT)
     ldw        _1579(TRACE), (_1580(NOTRACE_LABEL)+_1581(NOTRACE_INT))
     ### Proj_c at label option_TYC
     ldw        _1578(TRACE), 0(_1579(TRACE))
     ### start making constructor call
     li         2, _1584(TRACE)
     ldw        _1585(NOTRACE_CODE), 0(_1578(TRACE))
     ldw        _1586(TRACE), 4(_1578(TRACE))
     call_ML_NORMAL_1585(NOTRACE_CODE) arguments = ([_1586(TRACE), _1584(TRACE)] results = ([_1587(TRACE)] }
     needalloc  5
     ### done making constructor call
     ### allocating 4-record
     li         3105, _1592(NOTRACE_INT)
     stw        _1592(NOTRACE_INT), 0(HEAPALLOC)
     li         5, _1593(NOTRACE_INT)
     stw        _1593(NOTRACE_INT), 4(HEAPALLOC)
     li         2, _1594(NOTRACE_INT)
     stw        _1594(NOTRACE_INT), 8(HEAPALLOC)
     li         2, _1595(TRACE)
     stw        _1595(TRACE), 12(HEAPALLOC)
     stw        _1587(TRACE), 16(HEAPALLOC)
     addl       HEAPALLOC, 4, _1590(TRACE)
     addl       HEAPALLOC, 20, HEAPALLOC
     ### done allocating 4 record
     li         256, _1599(TRACE)
     ### making closure call
     laddr      0(LDouter_valbind_r_1215), _1601(NOTRACE_LABEL)
     ldw        funreg_1602(NOTRACE_CODE), 0(_1601(NOTRACE_LABEL))
     ldw        creg_1603(TRACE), 4(_1601(NOTRACE_LABEL))
     ldw        ereg_1604(TRACE), 8(_1601(NOTRACE_LABEL))
     call_ML_NORMALfunreg_1602(NOTRACE_CODE)
                    arguments = ([creg_1603(TRACE), _1590(TRACE), ereg_1604(TRACE), _1599(TRACE)]
                    results = ([_1605(TRACE)]
                    }
     ### done making normal call
     needalloc  0
     laddr      0(LDanonfun_1183), _1607(NOTRACE_LABEL)
     ### making closure call
     ldw        funreg_1609(NOTRACE_CODE), 0(_1605(TRACE))
     ldw        creg_1610(TRACE), 4(_1605(TRACE))
     ldw        ereg_1611(TRACE), 8(_1605(TRACE))
     call_ML_NORMALfunreg_1609(NOTRACE_CODE)
                    arguments = ([creg_1610(TRACE), ereg_1611(TRACE), _1607(NOTRACE_LABEL)]
                    results = ([_1612(TRACE)]
                    }
     ### done making normal call
     needalloc  0
     laddr      0(ML +O_option_INT_r_INT), _1615(NOTRACE_LABEL)
     mirror_global_offset_1616(NOTRACE_INT)
     ldw        _1614(TRACE), (_1615(NOTRACE_LABEL)+_1616(NOTRACE_INT))
     ldw        _1617(NOTRACE_INT), 0(_1614(TRACE))
     li         0, _1624(NOTRACE_INT)
     li         0, _1626(TRACE)
     ### making closure call
     ldw        funreg_1628(NOTRACE_CODE), 0(_1612(TRACE))
     ldw        creg_1629(TRACE), 4(_1612(TRACE))
     ldw        ereg_1630(TRACE), 8(_1612(TRACE))
     call_ML_NORMALfunreg_1628(NOTRACE_CODE)
                    arguments = ([creg_1629(TRACE), ereg_1630(TRACE), _1624(NOTRACE_INT), _1626(TRACE)]
                    results = ([_1631(TRACE)]
                    }
     ### done making normal call
     needalloc  0
     li         111, _1632(NOTRACE_INT)
     stw        _1632(NOTRACE_INT), ~4(ML !bindarg_INT)
     needmutate 1
     laddr      0(ML !bindarg_INT), _1633(NOTRACE_LABEL)
     mirror_global_offset_1634(NOTRACE_INT)
     storemutate(_1633(NOTRACE_LABEL)+_1634(NOTRACE_INT)),ptrMutate
     stw        _1631(TRACE), (_1633(NOTRACE_LABEL)+_1634(NOTRACE_INT))
     li         256, _1636(TRACE)
     mv         _1636(TRACE), _1636(TRACE)
     return     _1535(NOTRACE_CODE)
}

RTL code

LCBug_outer_valbind_r_code_1498
     args = [outer_valbind_r_cEnv_1500(TRACE),
            varpoly_c_1216(TRACE),
            outer_valbind_r_eEnv_1501(TRACE),
            varpoly_r_1217(TRACE)]
     ret = _1638(NOTRACE_CODE)
     results = [_1645(TRACE)]

{
LCfuntop_1637:
     needalloc  4
     ### allocating 1 closures
     ### allocating 3-record
     li         1561, _1647(NOTRACE_INT)
     stw        _1647(NOTRACE_INT), 0(HEAPALLOC)
     laddr      0(LCBug_anonfun_code_1503), _1648(NOTRACE_CODE)
     stw        _1648(NOTRACE_CODE), 4(HEAPALLOC)
     stw        varpoly_c_1216(TRACE), 8(HEAPALLOC)
     li         256, _1649(TRACE)
     stw        _1649(TRACE), 12(HEAPALLOC)
     addl       HEAPALLOC, 4, _1645(TRACE)
     addl       HEAPALLOC, 16, HEAPALLOC
     ### done allocating 3 record
     ### done allocating 1 closures
     mv         _1645(TRACE), _1645(TRACE)
     return     _1638(NOTRACE_CODE)
}

RTL code

LCBug_anonfun_code_1503
     args = [anonfun_cEnv_1505(TRACE), anonfun_eEnv_1506(TRACE), x_1202(TRACE)]
     ret = _1652(NOTRACE_CODE)
     results = [_1693(TRACE)]

{
LCfuntop_1651:
     needalloc  0
     ### allocating 2-record
     ### done allocating 2 record
     laddr      0(LDrecord_1660), _1661(NOTRACE_LABEL)
     ### making closure call
     laddr      0(ML onearg_INT), _1665(NOTRACE_LABEL)
     mirror_global_offset_1666(NOTRACE_INT)
     ldw        _1664(TRACE), (_1665(NOTRACE_LABEL)+_1666(NOTRACE_INT))
     ldw        funreg_1667(NOTRACE_CODE), 0(_1664(TRACE))
     ldw        creg_1668(TRACE), 4(_1664(TRACE))
     ldw        ereg_1669(TRACE), 8(_1664(TRACE))
     call_ML_NORMALfunreg_1667(NOTRACE_CODE)
                    arguments = ([creg_1668(TRACE),
                                 anonfun_cEnv_1505(TRACE),
                                 _1661(NOTRACE_LABEL),
                                 ereg_1669(TRACE),
                                 x_1202(TRACE)]
                    results = ([_1670(TRACE)]
                    }
     ### done making normal call
     needalloc  4
     ### allocating 1 closures
     ### allocating 3-record
     li         1561, _1677(NOTRACE_INT)
     stw        _1677(NOTRACE_INT), 0(HEAPALLOC)
     laddr      0(LCBug_anonfun_code_1509), _1678(NOTRACE_CODE)
     stw        _1678(NOTRACE_CODE), 4(HEAPALLOC)
     stw        anonfun_cEnv_1505(TRACE), 8(HEAPALLOC)
     stw        _1670(TRACE), 12(HEAPALLOC)
     addl       HEAPALLOC, 4, _1675(TRACE)
     addl       HEAPALLOC, 16, HEAPALLOC
     ### done allocating 3 record
     ### done allocating 1 closures
     ### allocating 2-record
     ### done allocating 2 record
     laddr      0(LDrecord_1683), _1684(NOTRACE_LABEL)
     ### making closure call
     laddr      0(ML vararg_INT), _1688(NOTRACE_LABEL)
     mirror_global_offset_1689(NOTRACE_INT)
     ldw        _1687(TRACE), (_1688(NOTRACE_LABEL)+_1689(NOTRACE_INT))
     ldw        funreg_1690(NOTRACE_CODE), 0(_1687(TRACE))
     ldw        creg_1691(TRACE), 4(_1687(TRACE))
     ldw        ereg_1692(TRACE), 8(_1687(TRACE))
     call_ML_NORMALfunreg_1690(NOTRACE_CODE)
                    arguments = ([creg_1691(TRACE),
                                 anonfun_cEnv_1505(TRACE),
                                 _1684(NOTRACE_LABEL),
                                 ereg_1692(TRACE),
                                 _1675(TRACE)]
                    results = ([_1693(TRACE)]
                    }
     ### done making normal call
     needalloc  0
     mv         _1693(TRACE), _1693(TRACE)
     return     _1652(NOTRACE_CODE)
}

RTL code

LCBug_anonfun_code_1509
     args = [anonfun_cEnv_1511(TRACE), anonfun_eEnv_1512(TRACE), y_1205(COMPUTE anonfun_cEnv_1511(TRACE))]
     ret = _1696(NOTRACE_CODE)
     results = [_1704(TRACE)]

{
LCfuntop_1694:
     needalloc  0
     ### making closure call
     ldw        funreg_1701(NOTRACE_CODE), 0(anonfun_eEnv_1512(TRACE))
     ldw        creg_1702(TRACE), 4(anonfun_eEnv_1512(TRACE))
     ldw        ereg_1703(TRACE), 8(anonfun_eEnv_1512(TRACE))
     call_ML_TAIL(_1696(NOTRACE_CODE))funreg_1701(NOTRACE_CODE)
                    arguments = ([creg_1702(TRACE), ereg_1703(TRACE), y_1205(COMPUTE anonfun_cEnv_1511(TRACE))]
                    results = ([_1704(TRACE)]
                    }
     ### done making tail call
     needalloc  0
     mv         _1704(TRACE), _1704(TRACE)
     return     _1696(NOTRACE_CODE)
}

RTL code

LCBug_anonfun_code_1493
     args = [anonfun_cEnv_1495(TRACE), anonfun_eEnv_1496(TRACE), v1_1346(NOTRACE_INT), v2_1347(COMPUTE (*LDreify_1409))]
     ret = _1706(NOTRACE_CODE)
     results = [_1722(TRACE)]

{
LCfuntop_1705:
     needalloc  0
LCsumarm_1717:
     bne        v2_1347(COMPUTE (*LDreify_1409))0LCsumarm_1718
     li         256, _1721(TRACE)
     mv         _1721(TRACE), _1722(TRACE)
     br LCafter_sum_1714
LCsumarm_1718:
LCnomatch_sum_1715:
     laddr      0(LDmk_1282), _1725(NOTRACE_LABEL)
     mirror_global_offset_1726(NOTRACE_INT)
     ldw        _1724(TRACE), (_1725(NOTRACE_LABEL)+_1726(NOTRACE_INT))
     mv         _1724(TRACE), EXNARG
     ldw        HANDLER, 0(EXNSTACK)
     ldw        STACK, 4(EXNSTACK)
     absStackPtrSTACK, STACK
     jmp HANDLER[]
     li         0, _1727(TRACE)
     mv         _1727(TRACE), _1722(TRACE)
LCafter_sum_1714:
     mv         _1722(TRACE), _1722(TRACE)
     return     _1706(NOTRACE_CODE)
}

RTL code

data objects = 
[ML Bug_unit_GLOBALS_BEGIN_VAL:,
     ### Global,
     .long 55,
LDreify_1409:,
     .long 258,
     .long 258,
     ### Global,
     .long 39,
LD+Noption_out_1277:,
     .long 258,
     ### Global,
     .long 111,
ML bindTuple_INT:,
     .long 256,
     .long 256,
     ### Global,
     .long 55,
LDmk_1282:,
     .long 258,
     .long 258,
     ### Global,
     .long 111,
ML f:,
     .data LDanonfun_1183,
     .data LDanonfun_1183,
     ### static record tag,
     .long 1561,
LDanonfun_1183:,
     .data LCBug_anonfun_code_1493,
     .long 256,
     .long 256,
     ### Global,
     .long 111,
ML g_r_INT:,
     .data LDouter_valbind_r_1215,
     .data LDouter_valbind_r_1215,
     ### static record tag,
     .long 1561,
LDouter_valbind_r_1215:,
     .data LCBug_outer_valbind_r_code_1498,
     .long 256,
     .long 256,
     ### Global,
     .long 55,
ML !bindarg_INT:,
     .long 258,
     .long 258,
     ### static record tag,
     .long 17,
LDrecord_1660:,
     .long 5,
     .long 0,
     ### static record tag,
     .long 17,
LDrecord_1683:,
     .long 5,
     .long 0,
     ### Module closure,
     .long 1561,
ML Bug_unit_closure:,
     .data ML Bug_main,
     .long 0,
     .long 0,
     .long 785,
ML Bug_unit:,
     .data ML Bug_unit_closure,
     .data ML Bug_unit_closure,
ML Bug_unit_GLOBALS_END_VAL:,
     .long 0]
global = [ML !bindarg_INT, LDmk_1282, LDreify_1409]
