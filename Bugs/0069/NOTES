  [170 imports of total size 329327 were cached.
   35 imports of total size 104285 were uncached.]
  [Elaboration context took 6.54 seconds.]
  [Parsing Nil/analyze.sml]
  [Elaborating Nil/analyze.sml non-constrained]
gc_context: 469 items in original context.  113 items in reduced context.
  [writing Nil/TM/any/analyze.sml.il]
Sending ACK_INTERFACE: interface took 12.592 seconds 
  [Compiling Analyze to assembly]
===== Starting Phasesplit: Analyze                       =====
  Initial context is phase-split
  Bindings are phase-split
  Imports are computed
  Exports are phase-split
===== Starting Rename: Analyze                           =====
===== Starting Optimize1: Analyze                        =====
===== Starting Vararg: Analyze                           =====
===== Starting Inline1: Analyze                          =====
  6 functions inlined once.
  2 copies of 1 other functions inlined.
===== Starting Reify1: Analyze                           =====
===== Starting Specialize: Analyze                       =====
  1 optimizable candidates.
  6 impure.
  38 escaping.
  1 used polymorphically.
===== Starting Hoist: Analyze                            =====
Imports Processed
===== Starting Optimize2: Analyze                        =====
===== Starting Inline2: Analyze                          =====
  2 functions inlined once.
  13 copies of 5 other functions inlined.
===== Starting Optimize3: Analyze                        =====
===== Starting Inline3: Analyze                          =====
  0 functions inlined once.
  0 copies of 0 other functions inlined.
===== Starting Reify2: Analyze                           =====
===== Starting ClosureConv: Analyze                      =====
===== Translating to RTL             =====

===== Translating to TIL-Sparc assembly      =====
  38 procedures.  38 recursive components.   Largest component has size 1.
  [Assembling Analyze to object file.]
  [Compressing Nil/TM/sparc/analyze.sml.s]
Slave compiled Analyze
Slave waiting for master to send work.
  [206 imports of total size 434393 were cached.
   1 imports of total size 614 were uncached.]
  [Elaboration context took 0.78 seconds.]
  [Parsing Nil/inline.sml]

Program received signal SIGILL, Illegal instruction.
0xbb46c8 in code_889250 ()
(gdb) info registers
g0             0x0      0
g1             0x29676be4       694643684
g2             0x174ad18        24423704
g3             0x1542000        22290432
g4             0x30042850       805578832
g5             0x3006cccc       805752012
g6             0xff0000 16711680
g7             0xef611de0       -278848032
o0             0x30042844       805578820
o1             0x3004238c       805577612
o2             0x719    1817
o3             0x30042834       805578804
o4             0xfbb    4027
o5             0x29676ce4       694643940
sp             0x100294ef       268604655
o7             0xbd5584 12408196
l0             0xcc0151c3       -872328765
l1             0xc40151c3       -1006546493
l2             0xc40151c3       -1006546493
l3             0xbc0151c3       -1140764221
l4             0xbc0151c3       -1140764221
l5             0xb40151c3       -1274981949
l6             0xb40151c3       -1274981949
l7             0xac0151c3       -1409199677
i0             0xac0151c3       -1409199677
i1             0xa40151c3       -1543417405
i2             0xa40151c3       -1543417405
i3             0x9c0151c3       -1677635133
i4             0x9c0151c3       -1677635133
i5             0x940151c3       -1811852861
fp             0x940151c3       -1811852861
i7             0x940151c3       -1811852861
y              0x0      0
psr            0xfe001003       -33550333
wim            0x0      0
tbr            0x0      0
pc             0xbb46c8 12273352
npc            0xbb46cc 12273356
fpsr           0xc0000ba1       -1073738847
cpsr           0x0      0
(gdb) where
#0  0xbb46c8 in code_889250 ()
#1  0xbd558c in code_296762 ()
Cannot access memory at address 0x940151fb.
(gdb) 
(gdb) x/10i $pc
0xbb46c8 <code_889250+8>:       retl 
0xbb46cc <code_889250+12>:      add  %sp, 0x211, %sp
0xbb46d0 <MLLrValsFun_functor_var_r_code_754499>:       mov  %sp, %fp
0xbb46d4 <MLLrValsFun_functor_var_r_code_754499+4>:     sub  %sp, 0x6a0, %sp
0xbb46d8 <MLLrValsFun_functor_var_r_code_754499+8>:     ld  [ %g2 + 0x320 ], %l0
0xbb46dc <MLLrValsFun_functor_var_r_code_754499+12>:    cmp  %sp, %l0
0xbb46e0 <MLLrValsFun_functor_var_r_code_754499+16>:    bg  0xbb4700 <code_892549>
0xbb46e4 <MLLrValsFun_functor_var_r_code_754499+20>:    mov  %sp, %fp
0xbb46e8 <MLLrValsFun_functor_var_r_code_754499+24>:    add  %sp, 0x6a0, %sp
0xbb46ec <MLLrValsFun_functor_var_r_code_754499+28>:    clr  %l0
(gdb) p/x $o7	(REAL RETURN ADDRES)
$2 = 0xbd5584
0xbd5584 <code_296647+40>:      call  %l2
0xbd5588 <code_296647+44>:      ld  [ %sp + 0xb4 ], %o5		(REAL RETURN ADDRESS)
0xbd558c <code_296762>: ld  [ %o0 ], %o3
0xbd5590 <code_296762+4>:       ld  [ %o0 + 4 ], %l1
0xbd5594 <code_296762+8>:       st  %l1, [ %sp + 0x94 ]
0xbd5598 <code_296762+12>:      ld  [ %o0 + 8 ], %l1
0xbd559c <code_296762+16>:      st  %l1, [ %sp + 0x90 ]
0xbd55a0 <sumarm_287218>:       mov  0xff, %o0
0xbd55a4 <sumarm_287218+4>:     ld  [ %sp + 0x90 ], %l1
0xbd55a8 <sumarm_287218+8>:     cmp  %l1, %o0


The problem is SP must always be 8-byte aligned so the code

	add	%sp, 4095, %sp
	retl
	add	%sp, 529, %sp

is invalid.

So is the code

	mov	%sp, %fp
	sub	%sp, 4095, %sp
	sub	%sp, 529, %sp

at the beginning of MLLrValsFun_anonfun_code_757178.
