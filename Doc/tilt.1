.\" TILT manual page
.\"
.\" Portability note (from rc man page):
.\" Note that sentences should end at the end of a line.  nroff and
.\" troff will supply the correct intersentence spacing, but only if
.\" the sentences end at the end of a line.  Explicit spaces, if given,
.\" are apparently honored and the normal intersentence spacing is
.\" suppressed.
.\"
.\" Use .BE and .EE to bracket example code.
.\" BE
.de BE
.nf	\" no filling
.sp	\" vertical space
.in +5	\" indent
.ft C	\" courier font
..
.\" EE
.de EE
.fi	\" filling
.sp	\" vertical space
.in -5	\" indent
.ft R	\" roman font
..
.\"
.TH TILT 1 "27 January 2000" "Version 0.1"
.SH NAME
tilt \- Standard ML compiler
.SH SYNOPSIS
.B tilt
.RI [ options ]
.RI [ mapfile " .\|.\|.]"
.SH DESCRIPTION
The TILT (or TIL-Two) Compiler Project is a joint effort between
researchers at Cornell and Carnegie Mellon.
The goal of the project is to produce a compiler for SML'97 that takes
advantage of types throughout compilation in order to produce better
code without compromising safety or correctness.
.PP
TILT has sparc and alpha back-ends and will only produce executables
on those platforms.
You can run slaves
.RB ( \-s
or
.BR \-S )
or perform partial compiles (see
.BR \-t )
on any platform for which TILT has been compiled.
.SH OPTIONS
.TP
.BI "\-m " mapfile
This is the primary method for building SML source files.
Any sources listed in
.I mapfile
are recompiled, as necessary.
See
.B MAKE SYSTEM
below for information on what a mapfile is and how to set up sources
for use with a mapfile.
.TP
.BI "\-t " platform
Generate code for
.I platform
(alpha or sparc).
The default is to target the current platform when a backend exists and
to target alpha otherwise.  Note that slaves
.RB ( "\-s"
or
.BR "\-S" )
ignore this option and generate code for whatever platforms are
required by their masters
.RB ( "-M" ).
.TP
.BI "\-c " mapfile
Remove platform-specific object files (and other compiler-generated files)
associated with
.IR mapfile .
.TP
.BI "\-C " mapfile
Also remove platform-independent files.
.TP
.BI "\-M " mapfile
Perform a parallel make of
.IR mapfile ,
using the current host as master.
Any slaves launched in the current directory will contribute to the
compilation.
.TP
.B \-s
This flag causes TILT to act as a slave for any (future or on-going)
parallel make in the current directory.
.TP
\fB\-S\fP [\fInum\fP/]\fIhost\fP
Launch
.I num
slaves on
.I host
in the current directory.
For this to work, you must be able to
.BR ssh (1)
to
.IR host .
.TP
.BI "\-f " flag
Set
.I flag
to true.
TILT's internal flags are primarily used to debug the compiler and are
not documented further.
If you're curious, grep for the strings Stats.tt and Stats.ff under
/afs/cs/local/tilt/src.
.\" Want to list interesting flags here?
.TP
.BI "\-r " flag
Set
.I flag
to false.
.TP
.B \-b
Compile the basis library (for bootstrapping the compiler).
.TP
.B \-B
Perform a parallel make of the basis library (see
.BR \-M ).
.TP
.B \-?
Print usage summary.
.TP
.B \-v
Print version information.
.SH MAKE SYSTEM
The TILT make system has two components: mapfiles and import lists.
.PP
Mapfiles are analogous to UNIX makefiles and SML/NJ's .cm files.
Mapfiles do not need to have any particular suffix.
Mapfiles map logical module names to filenames.
For example,
.BE
FooBar  Bar/foobar
.EE
in a mapfile would indicate that the logical module name FooBar is to
be associated with the file Baz/foobar.sml.
Note that the extension .sml is omitted.
The line
.BE
#include mapfile-basis
.EE
adds associations for the standard basis library to a mapfile.
Most basis structures, signatures, and functors are defined in a
module of the same name.
Examples include List, LIST, and TextIO.
The exceptions are IO_SIG, OS_SIG, and SML90_SIG which provide
signatures IO, OS, and SML90.  The logical names IO, OS, and SML90
provide the corresponding structures.
The logical names Prelude and TopLevel together
provide the terms
and types bound at the top level like print, map, etc.
A complete list of logical names used by the basis can be found in
/usr/local/lib/tilt/Basis/mapfile-basis.
.PP
The second feature is a specialized comment placed as the first line
of an SML source file.
For example,
.BE
(*$import FooBar Goo *)
.EE
as the first line of a file indicates that the file depends on the
modules named FooBar and Goo.
A file can only depend on modules which appear earlier in the mapfile.
If a file depends on a module that has not been imported, then unbound
variable errors will result.
For example,
.BE
(*$import Prelude TopLevel *)
val _ = TextIO.print "Hello, world"
.EE
will not compile because TextIO is missing from the import list.
.PP
When processing a mapfile, TILT recompiles any files which are
out-of-date and generates an executable file named after the last
module in the mapfile.
See
.B PROGRAM EXECUTION
below for information on what happens when this executable is run.
.\" XXX: TARGET in mapfiles
.PP
Suppose you have a directory of SML files called twelf.
To get twelf to compile with TILT, the first thing needed is to create
a mapfile in the twelf directory called mapfile-twelf.
The basis can be included in mapfile-twelf with the line ``#include
mapfile-basis''.
Then each of the SML source files in the twelf directory must be
listed in the mapfile along with its assigned logical name.
Then the proper dependencies among the modules needs to be inserted by
adding import lines to each source file.
.SH PROGRAM EXECUTION
TILT has no analogue of C's function main().
Instead, TILT-generated executables evaluate their top-level
declarations.
The order of modules in a mapfile determines the order in which these
top-level declarations are processed.
Command line arguments and environment variables are available via
the standard basis library.
The following are particularly useful:
.BE
CommandLine.name      : unit -> string
CommandLine.arguments : unit -> string list
OS.Process.getEnv     : string -> string option
.EE
For example, here is an SML program which behaves similar to
.BR echo (1):
.BE
(*$import Prelude TopLevel CommandLine OS *)

(* echo : string list -> unit *)
fun echo nil = print "\\n"
  | echo (s::nil) = (print s; print "\\n")
  | echo (s1::(ss as _::_)) = (print s1; print " "; echo ss)
    
val _ = echo (CommandLine.arguments())
val _ = OS.Process.exit (OS.Process.success)
.EE
.SH FILES
.TP
/usr/local/lib/tilt
Directory of compiler and library binaries and support scripts.
.TP
/afs/cs/local/tilt/src
Source code for TITL.
.TP
/usr/local/lib/sml/sml-mode/sml-site.el
.BR emacs (1)
major mode for editing SML files.
Read the comments at the top of the file for information on setting
this up.
.SH SEE ALSO
.BR sml (1),
.BR ml-lex (1),
.BR ml-yacc (1),
.BR ml-burg (1),
.BR make (1).
.SH BUGS
This is an alpha release of TILT.
If you think you've found a bug,
send mail to the
.B til-bugs@cs.cmu.edu
mailing list.
