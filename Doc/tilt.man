.\" NB Sentences should start on a new line.
.\" EX uses a fixed width font; typically "C", "CW(", or "LucidaCW".
.\" Ideally we'd change .B, .BI, etc. to use the same font.
.de EX
.if t .ft C
.nf
..
.de EE
.ft R
.fi
..
.TH TILT 1
.SH NAME
tilt, tilt-nj, tilt-slaves \- Standard ML compiler
.SH SYNOPSIS
.B tilt
[
.I option ...
]
.I project ...
.PP
.B tilt
[
.I option ...
]
.B -o
.I exe project ...
.PP
.B tilt
[
.I option ...
]
.B -l
.I lib project ...
.PP
.B tilt
[
.I option ...
]
.BR -p [ p ]
.I project ...
.PP
.B tilt -s
.PP
.B tilt-slaves
[
.B -n
]
.RI [ num /] host
.I ...
.SH DESCRIPTION
TILT is a compiler for Standard ML (SML) that uses Typed Intermediate
Languages.
It can make executables and libraries for the SPARC V9 and Alpha
architectures running SunOS 5.5.1, SunOS 5.7, SunOS 5.8, and Digital
Unix V4.0D.
.I Tilt
is a version of the compiler compiled by TILT.
.I Tilt-nj
is a version of the compiler compiled by Standard ML of New Jersey; it
should run on any Unix system supported by SML/NJ.
.PP
TILT operates on a project description comprised of the named
.I project
files.
By default, TILT performs cutoff incremental recompilation (IR) to
bring every unit and interface in the project description up to date.
The options are
.PD 0
.TP
.BI -o " exe"
Perform IR and link every unit into an executable
.IR exe .
This fails if there are unimplemented units.
.TP
.BI -l " lib"
Perform IR and pack every unit and interface into a library
.IR lib .
.TP
.B -p
Purge (remove) object files for every source unit in the project
description.
With a second
.BR -p ,
purge all compiler-generated files for every source unit and source
interface.
Files associated with compiled units and interfaces (ie, library files)
are not removed.
.TP
.B -s
Act as a slave for any future or ongoing parallel make in the current
directory.
When a slave joins a parallel make, the TILT process that
initiated compilation (the master) sends the target architecture,
compiler flags, and project description to the slave.
.TP
.B -v
Make TILT more verbose.
This option can be repeated.
.TP
.BI -f " F"
Set the compiler flag
.I F
to true; these flags are undocumented.
.TP
.BI -r " F"
Set
.I F
to false.
.TP
.B -m
Prevent TILT from forking off a slave process to handle compilation.
Compilation will proceed when slaves are started (with
.BR "tilt -s" )
in the current directory.
.TP
.BI -c " U"
Operate on unit
.IR U .
.TP
.BI -C " I"
Operate on interface
.IR I .
The
.B -c
and
.B -C
options can be repeated to specify a list of
.IR roots .
TILT will operate on a reduced project description obtained by
discarding any units and interfaces that are not prerequisite to
.IR roots .
.TP
.BI -t " T"
Set the target architecture;
.I T
must be
.B sparc
or
.BR alpha .
The default is the current architecture, if it is supported, and
.B sparc
otherwise.
.PD
.PP
.I Tilt-slaves
launches
.I num
slaves on
.I host
using
.I tilt
(or
.I tilt-nj
if the
.B -n
option is present).
.SS Project descriptions
.PP
A project description assigns logical names to compilation units and
their interfaces and describes the dependencies between them.
A project description is built up from the project description files
specified on the command line and any project description files they
include.
See
.IR project (4)
for more information.
.PP
A source unit is any SML top-level declaration
.RI ( topdec )
stored in a file.
A
.I topdec
can bind top-level signatures, structures,
functors, values, and so forth.
It is almost true that a source unit is a structure body (a
.IR strdec ),
except that SML limits what can go into a structure.
For example, the project description file
.EX
	unit U = "u.sml"
.EE
declares a source unit with logical name
.I U
whose
.I topdec
is stored in the file
.BR u.sml .
.PP
A source interface is a top-level specification
.RI ( topspec )
stored in a file.
.I Topspecs
do not exist in SML but the meaning should be clear.
A
.I topspec
can contain fixity declarations, signature definitions,
functor specs, structure specs, type specs, value specs, and so
on.
See
.IR interface (4)
for the full syntax.
It is almost true that a source interface is a signature body (a
.IR spec ),
except that SML limits what can go into a signature.
For example, the project description file
.EX
	interface I = "u.sig"
.EE
declares a source interface with logical name
.I I
whose
.I topspec
is stored in the file
.BR u.sig .
.PP
An interface may be ascribed to a unit in order to facilitate separate
compilation of those units and interfaces that depend on it.
Interface ascription is similar to opaque signature ascription. 
The unit must match the interface and the interface can hide components
and type information from dependents.
If an interface contains signature definitions, then equivalent
definitions must occur in any unit to which it is ascribed.
If an interface contains fixity declarations, then the same
declarations must occur in any unit to which it is ascribed.
If we do not ascribe an interface to a unit, then it has to be
compiled to obtain one before any dependent can be compiled.
If we do, then the dependent can be compiled without having compiled
the unit.
For example, the project description file
.EX
	interface I = "u.sig"
	unit U : I = "u.sml"
.EE
ascribes interface
.I I
to unit
.IR U .
.PP
A separately compiled unit is a unit with an ascribed interface and no
implementation.
A separately compiled unit can not be linked into an executable.
For example, the project description file
.EX
	interface I = "u.sig"
	unit U : I
.EE
declares a separately compiled unit
.I U
that has interface
.IR I .
.PP
In a project description, every declaration must specify those units
on which it depends.
This is not required in a project description file.
If, as in the preceeding examples, a source interface or source unit
declaration specifies no list of dependencies, then it depends on all
of the preceding units in the project description file.
A source declaration's dependencies specify precisely those units that
are
.I opened
for use when its file is compiled and, for source units that
are linked into an executable, those units whose effects must be
computed before the unit's effects are computed.
Specifying a dependency list allows you to manage name clashes because
the order in which units are opened determines the order of shadowing
in case multiple units bind the same identifiers.
It can cut down on compilation overhead to specify dependencies
because you are saying that certain units do not matter for this unit
or interface.
For example, the project description file
.EX
	unit A = "a.sml"
	unit B = "b.sml"
	unit C = "c.sml" { A }
.EE
specifies that unit
.I C
depends on unit
.I A
but not unit
.IR B .
.PP
A project description file can include another project description
file by name.
There may not be any cycles.
Including a project description file in this way is similar to writing
out all of its declarations and changing any relative file names.
For example, the project description file
.EX
	include "help.proj"
.EE
is well-formed provided it is not named
.BR help.proj .
.PP
In a project description, every unit and interface name
must be a definite reference to a specific unit or interface.
As the declarations in a project description file are added to a
project description, redundant declarations are discarded.
A second declaration for a unit
.I U
is redundant provided it is a separately compiled unit and
the first declaration has an equivalent ascribed interface.
Thus, if
.I U
has an implementation, then it must come before any other declarations
for
.I U
in the project description.
A second declaration for an interface
.I I
is redundant provided it is equivalent to the first.
Two interfaces are equivalent if they are defined with identical
source code and if they open the same units in the same order.
For example, the project description file
.EX
	interface I = "a.sig" { }
	unit U : I = "a.sml"

	interface I' = "b.sig" { }
	unit U : I'

	interface I' = "c.sig" { }
.EE
is well-formed provided the files
.BR a.sig ,
.BR b.sig ,
and
.B c.sig
are identical.
.PP
.PP
In a project description file, no unit or interface name
may be used before it is declared.
Thus, a project description file specifies the same interfaces and
units (up to interface equivalence) in any context.
.PP
The order of declarations in project description file is important.
It determines the order of shadowing when an interface or unit
declaration does not specify a list of units on which it depends.
It determines the order in which new declarations are added to a
project description.
The order of declarations in a project description is important.
It determines the order of effects when units are linked into an
executable.
.SS Libraries
.PP
The preceeding section describes source units, source interfaces, and
separately compiled units.
A project description can also declare units and interface that have
already been compiled; see
.IR project (4)
for the syntax.
.PP
A project description in which every unit has an ascribed interface
can be packed into a self-contained, compiled library (with
.B -l
.IR lib ).
A library is a directory containing a copy of every source interface
file in the project description, (optionally) a copy of every source
unit file in the project description, compiled files for every interface
and unit in the project description, and three project description
files that describe the library using these copies.
The first,
.IB lib /impl \fR,
describes the entire library.
The second,
.IB lib /inter \fR,
is similar but does not define any unit implementations.
The third,
.IB lib /desc \fR,
includes
.IB lib /impl
if TILT is generating an executable and includes
.IB lib /inter
otherwise.
(If a library is packed on an unsupported architecture, then
.IB lib /impl
will be the same as
.IB lib /inter \fR.)
.PP
The convention for using a library
.I lib
is to either add
.IB lib /desc
to the command line or to use
.EX
	include "\fIlib\fP/desc"
.EE
in a project description file.
When TILT is linking an executable, it will see the compiled
units in
.IR lib .
When TILT is packing a library, it will not and the new library will
merely describe the compiled units in
.IR lib .
If we want the new library to contain a copy of
.IR lib ,
then we would use
.IB lib /impl
rather than
.IB lib /desc \fR.
.PP
A human can learn the interface of a library by looking at the project
description file
.IB lib /inter
and the interface sources files
.IB lib /I/* \fR.
If the compiler flag
.B PackUnitSource
was set to true when the library was packed, then the
unit source files
.IB lib /U/*
can also be studied.
.PP
The basis library is special.
It is compiled when TILT is installed and every non-basis project
description file implicitly starts with
.EX
	include $libdir ^ "/basis/desc"
.EE
to pull in the units defined by the compiled basis library.
(The predefined variable
.B libdir
refers to the location where TILT was installed.)
Every source unit and interface declaration that specifies a list of
dependencies implicitly opens (before any listed units) the basis
library units that define the standard top-level environment.
Most basis structures, signatures, and functors are defined in a unit
of the same name; examples include
.BR List ,
.BR LIST ,
and
.BR TextIO .
The exceptions are
.BR IO_SIG ,
.BR OS_SIG ,
and
.B SML90_SIG
which provide signatures
.BR IO ,
.BR OS ,
and
.BR SML90 .
The units named
.BR IO ,
.BR OS ,
and
.B SML90
provide the corresponding structures.
.PP
TILT is installed with a few other libraries in
.BR libdir .
The library
.B ml-yacc-lib
is used by parsers generated by ml-yacc.
The library
.B smlnj-lib
contains a collection of utilities.
The library
.B arg
is for command-line option parsing.
.SS Executables
.PP
SML has no analogue of C's function
.BR main .
TILT-generated executables evaluate their top-level
declarations; this evaluation can have side-effects.
The order of units in a project description determines the order in which effects
occur.
Command line arguments and environment variables are available via
the basis library.
The following are particularly useful:
.EX
	CommandLine.name : unit -> string
	CommandLine.arguments : unit -> string list
	OS.Process.getEnv : string -> string option
.EE
.SH EXAMPLES
.PP
An SML implementation of
.IR echo (1):
.EX
	(* \fIecho.proj\fP *)
	(* Run "tilt -vv -o echo -c Echo echo.proj". *)
	unit Echo = "echo.sml" { CommandLine OS }

	(* \fIecho.sml\fP *)
	fun echo (ss:string list) : unit =
		(case ss of
			nil => ()
		|	s::nil => print s
		|	s::ss => (print s; print " "; echo ss))

	val _ =
		(case (CommandLine.arguments()) of
			"-n" :: args => echo args
		|	args => (echo args; print "\\n"))

	val () = OS.Process.exit OS.Process.success
.EE
.PP
A demonstration of cutoff recompilation:
.EX
	(* \fIco.proj\fP *)
	(*
		Run "tilt -vv -o co -c C co.proj".

		Change the representation of S.t in a.sml
		and recompile to observe that C is not
		recompiled.
	*)
	unit A = "a.sml" { Int }
	unit B = "b.sml" { A }
	unit C = "c.sml" { B }

	(* \fIa.sml\fP *)
	signature SIG =
	sig
		type t
		val x : t
		val toString : t -> string
	end

	structure S :> SIG =
	struct
		type t = int
		val x : t = 0
		val toString = Int.toString
	end

	(* \fIb.sml\fP *)
	structure T :> SIG =
	struct
		type t = S.t * S.t
		val x = (S.x, S.x)
		fun toString (a, b) =
			"(" ^ S.toString a ^ "," ^ S.toString b ^ ")"
	end

	(* \fIc.sml\fP *)
	val _ = print (T.toString T.x ^ "\\n")
.EE
.PP
A demonstration of separate compilation:
.EX
	(* \fIsc1.proj\fP *)
	interface AI = "a.int" { }
	unit A : AI = "a.sml" { Int }

	interface BI = "b.int" { A }
	unit B : BI = "b.sml" { A }

	(* \fIa.int\fP *)
	signature SIG =
	sig
		type t
		val x : t
		val toString : t -> string
	end

	structure S : SIG

	(* \fIuse a.sml from previous example\fP *) 

	(* \fIb.int\fP *)
	structure T : SIG

	(* \fIuse b.sml from previous example\fP *)

	(* \fIsc2.proj\fP *)
	(*
		Run "tilt -vv sc1.proj" to compile A and B.
		Run "tilt -vv sc2.proj" to compile C separately
		from A and B.
		Run "tilt -vv -o sc -c C sc1.proj sc2.proj" to link.
	*)
	interface AI = "a.int" { }
	unit A : AI

	interface BI = "b.int" { A }
	unit B : BI

	unit C = "c.sml" { B }

	(* \fIuse c.sml from previous example\fP *)
.EE
.SH SEE ALSO
.IR project (4),
.IR interface (4)
