.\" NB Sentences should start on a new line.
.\" This page mounts a fixed-width font L for literals and
.\" assumes .B, .BI, etc. use the same font.  The fixed
.\" width font is typically named "C" or "CW".
.fp 5 L CW
.de EX
.if t .ft L
.nf
..
.de EE
.ft R
.fi
..
.TH TILT-PROJECT 4
.SH NAME
tilt-project \- TILT project descriptions
.SH DESCRIPTION
.PP
The project description language has value, interface, and unit
expressions; value, interface, and unit declarations; conditional
declarations; and file inclusion.
.SS Lexical structure
.PP
Project descriptions are written in the ASCII character set.
A project description is a sequence of reserved words,
identifiers, and special constants.
Whitespace and comments separate lexical items (except within string
constants) and are otherwise ignored.
The reserved words are
.EX
	$ ^ ( ) { } = S= B= < <= > >= : :: env true false if
	then else not andalso orelse defined unit interface
	compiled primitive val include #if #elif #else #endif
	#error
.EE
.PP
An identifier is any SML alphanumeric identifier that is not a
reserved word.
A special constant
.I scon
is an SML string constant or an SML integer constant.
Whitespace is any sequence of space, tab, newline, carriage return,
and form feed characters.
Comments are as in SML.
.PP
Each identifier is classified as a variable
.IR x ,
a compilation unit name
.IR U ,
an interface name
.IR I ,
or an environment variable
.IR X .
These classes are disjoint; for example, it is possible to assign the
same name to a unit and its interface.
.SS Syntax
.PP
The syntax of value expressions
.I ve
is
.TS
center ;
li r lfL l.
ave	::=	\fIscon\fP	literal
		$ \fIx\fP	variable
		env \fIX\fP	environment variable
		true	constants
		false
		( \fIve\fP )	bracketing
ve	::=	\fIave\fP	atomic
		\fIve\fP ^ \fIve\fP	string concatenation
		if \fIve1\fP then \fIve2\fP else \fIve3\fP	conditional
		not \fIve\fP	negation
		\fIve1\fP andalso \fIve2\fP	conjunction
		\fIve1\fP orelse \fIve2\fP	disjunction
		\fIve1\fP S= \fIve2\fP	string equality
		\fIve1\fP B= \fIve2\fP	boolean equality
		\fIve1\fP = \fIve2\fP	integer comparisons
		\fIve1\fP < \fIve2\fP
		\fIve1\fP <= \fIve2\fP
		\fIve1\fP > \fIve2\fP
		\fIve1\fP >= \fIve2\fP
		defined \fIref\fP	definedness test
		defined ( \fIref\fP )
ref	::=	unit \fIU\fP
		interface \fII\fP
		$ \fIx\fP
		env \fIX\fP
.TE
.PP
The following words are left associative and listed in order
of increasing precedence:
.BR else ;
.BR orelse ;
.BR andalso ;
.BR "S= B= = < <= > >=" ;
and
.BR ^ .
.PP
The syntax of interface expressions
.I ie
is
.TS
center ;
li r lfL l.
ids	::=	\fIU\fP \fR[\fIids\fR]\fP
deps	::=	{ \fIids\fP }
ie	::=	\fIve\fP \fR[\fIdeps\fR]	source interface
		compiled \fR[\fIve deps\fR]	compiled interface
		primitive	primitive interface
.TE
.PP
The syntax of unit expressions
.I ue
is
.TS
center ;
li r lfL l.
asc	::=	: \fII\fP
ue	::=	\fIve\fP \fR[\fIdeps\fR]\fL \fR[\fIasc\fR]	source unit
		compiled \fR[\fIve\fR]\fL \fIdeps\fP \fIasc	compiled unit
		primitive \fIasc	primitive unit
.TE
.PP
The syntax of declarations
.I decs
is
.TS
center ;
li r lfL l.
dec	::=	interface \fII\fP = \fIie	interface declaration
		unit \fIU\fP = \fIue	unit implementation
		unit \fIU\fP : \fII	unit specification
		include \fIve	inclusion
		val \fIx\fP = \fIve	value declaration
		#if \fIve\fP \fIdecs\fP \fR[\fIcc\fR]\fL #endif	conditional
		#error \fIve	abort
cc	::=	#else \fIdecs
		#elif \fIve\fP \fIdecs\fP \fR[\fIcc\fR]
decs	::=	\fIdec\fP \fR[\fIdecs\fR]
.TE
.PP
The declarations
.EX
	unit \fIU\fP \fIasc\fP = \fIve\fP \fR[\fIdeps\fR]\fL
	unit \fIU\fP \fIasc\fP = compiled \fR[\fIve\fR]\fL \fIdeps
.EE
are derived forms for
.EX
	unit \fIU\fP = \fIve\fP \fR[\fIdeps\fR]\fL \fIasc\fP
	unit \fIU\fP = compiled \fR[\fIve\fR]\fL \fIdeps\fP \fIasc\fR,
.EE
respectively.
.PP
TILT accepts a list of project description files on the command line.
The list
.I file1 ...  filen
is treated as a derived form for the declarations
.B include
.I file1 ...
.B include
.IR filen .
.SS Dependencies
.PP
An interface or unit declaration may specify a list of units on which
it depends.
For source interfaces and units these units are implicitly opened, in
the order given, when the source is compiled.
For compiled units, these units are those that are required by the
given unit.
By default, a source interface or unit is assumed to depend on all of
the units that precede it in the project description file.
.SS Interface expressions
.PP
A source interface specifies a source file and, optionally, a list of
dependencies.
The source file contains a top-level specification
.IR topspec .
The character set and lexical conventions for a
.I topspec
are those specified in the Definition of Standard ML (Revised).
The syntax of a
.I topspec
is built up from the syntactic categories
.IR spec ,
.IR sigbind ,
.IR sigexp ,
.IR funid ,
.IR strid ,
.IR vid ,
and
.I d
from the Definition:
.TS
center ;
li r lfL l.
topspec	::=	\fIspec	basic
		functor \fIfundesc	functor
		signature \fIsigbind	signature
		infix \fR[\fId\fR]\fL \fIvids	fixity
		infixr \fR[\fId\fR]\fL \fIvids
		nonfix \fIvids
		\fItopspec1\fP \fR[\fP;\fR]\fP \fItopspec2	sequential
fundesc	::=	\fIfunid\fP ( \fIstrid\fP : \fIsigexp\fP ) : \fIsigexp
		\fIfunid\fP ( \fIspec\fP ) : \fIsigexp
		\fIfundesc\fP and \fIfundesc\fP
vids	::=	\fIvid\fP \fR[\fIvids\fR]
.TE
.PP
A compiled interface specifies a pre-compiled interface, and,
optionally, a source file and its dependencies.
The pre-compiled interface must be present, and, if the source is
specified, must be up-to-date.
.PP
A primitive interface is for internal use only.
It describes those components of the Standard Basis that are
implemented directly by the compiler.
.SS Unit expressions
.PP
A source unit specifies a source file, an optional list of
dependencies, and an optional ascribed interface.
The source unit must match the ascribed interface, if present, which
is propagated to clients of the unit.
Interface ascriptions are required for units that are to be packed
into a library.
.PP
A compiled unit specifies a pre-compiled unit, an optional source
file, its dependencies, and an ascribed interface.
The pre-compiled unit must be present and, if a source is specified,
must be up-to-date.
The unit is assumed to satisfy the ascribed interface.
.PP
A primitive unit is for internal use only.
It provides those components of the Standard Basis that are
implemented directly by the compiler.
.SS Declarations
.PP
An interface declaration binds an interface to an identifier.
.PP
A unit implementation binds a unit to an identifier.
.PP
A unit specification declares a separately compiled unit with an
assumed interface, but with no implementation.
.PP
An inclusion specifies a project description file to be included at
this point.
.PP
A value declaration binds an identifier to the value of the given
expression.
.PP
A conditional declaration selects among declarations according to
the first test whose value is
.BR true .
.PP
An abort declaration forces termination of the compiler with the
specified error.
.SS Static checks
.PP
Project descriptions are elaborated into an internal form that guides
the compilation manager.
Elaboration consists of parsing, checking scopes of identifiers,
evaluating expressions, including project description files, and
resolving conditionals.
File inclusion ensures that only one copy of a project description
file is incorporated, even if it is included more than once.
.PP
All identifiers must be bound before they are used.
The bindings for environment variables, predefined variables, and
Standard Basis units and interfaces are implicit.
.PP
File names in project descriptions are written in Unix syntax and
relative paths are resolved relative to the directory containing the
project description file.
.PP
Value identifiers may not be redeclared.
.PP
An interface may be multiply declared, provided that all declarations
specify equivalent interfaces.
A unit may be multiply declared, provided that all declarations after
the first are unit specifications and that all declarations specify
equivalent interfaces.
.PP
The typing rules for value expressions are self-evident.
.SS Predefined variables
.PP
The predefined variables are:
.TP
.B cputype : string
The master's CPU type.
Possible values are
.BR sparc ,
.BR alpha ,
and
.BR unsupported .
.TP
.B
objtype, target : string
The target CPU type.
Possible values for
.B $objtype
are
.B sparc
and
.BR alpha .
.B $target
has an additional suffix representing a few compiler flags which lead to
incompatible object code; sample values are
.B sparc
and
.BR sparc-8 .
.TP
.B littleEndian : bool
The target byte-order.
.TP
.B
majorVersion, minorVersion : int; version : string
TILT's version number; the string has the form
.IR major.minor .
.TP
.B libdir : string
Absolute path to a directory containing (at least) the Standard Basis
and SML/NJ libraries.
.TP
.B linking : bool
.B true
when TILT is creating an executable.
.TP
.B bootstrapping : bool
.B true
when the compiler is used to compile the Standard Basis.
.SH SEE ALSO
.IR tilt (1)
