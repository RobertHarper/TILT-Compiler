Compile_ui base
---------------
(1) if base.int is present, call compile_int base.int
(2) otherwise, call compile_sml base.sml

Compiling an interface file a.int
---------------------------------
(1) let inc be the includes of a.int
(2) call compile_ui for each included unit to obtain dates
(3) if a.ui exists and is newer than a.int and dates from step 2,
	then return the date of a.ui
(4) otherwise, transitively get the includes of a.int
(5) generate a context and compile the a.int to produce a.ui and return the date

Compiling an implementation file a.sml
--------------------------------------
(1) let imp be the imports of a.sml
(2) if a.int does not exist,
    (i) let inc be the includes of a.int
    (ii) compile_ui for each imported unit to obtain dates --> import_date
    (iii) If a.ui is newer than a.sml and the ui's of the imported unit
             and a.uo and a.o exist and both are newer than a.ui, then STOP
    (iv) Transitively get the contexts for imp and concatenate
    (v)  compile a.sml in the context from (iv) to generate a.ui, a.uo, and a.o
    (vi) as an optimization to step (v), the new a.ui is not written if
	 a.ui already exists and is fresh

(3) otherwise, a.int does exist,
    (i) let inc be the includes of a.int
    (ii)  compile_ui for each included unit to obtain dates --> include_date
    (iii) compile_ui for each imported unit to obtain dates --> import_date
    (iv) If a.ui is newer than a.sml, a.int, and the include_date
            and a.uo and a.o exist and both are newer than a.ui and imports then STOP
    (v)  Transitively get the contexts fom imp and inc and concatenate
    (vi) compile the "concatenation" of a.sml and a.int in the context from (v),
	 and generate a.ui, a.uo, and a.o

.uo files contain the crcs of the imported and exported interface

