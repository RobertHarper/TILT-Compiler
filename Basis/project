(*
	Project description used to compile the basis library.

	This is not used directly:  Other projects automatically
	include $libdir/basis/project to access the compiled basis
	library.
*)

#if not $bootstrapping
#error "Compile the basis library with -fBootstrap."
#endif

interface TiltPrim = primitive
unit TiltPrim : TiltPrim = primitive

interface TiltVectorEq = "vector_eq.int" {TiltPrim}
unit TiltVectorEq : TiltVectorEq = "vector_eq.sml" {TiltPrim}

interface TiltExnExtern = "General/extern.sml" {TiltPrim}
unit TiltExnExtern : TiltExnExtern = "General/extern.sml" {TiltPrim}

interface TiltPrelude = "Prelude.int" {TiltPrim}
unit TiltPrelude : TiltPrelude = "Prelude.sml" {TiltPrim TiltExnExtern}

interface TiltCleanUp = "cleanup.int" { TiltPrim TiltPrelude }
unit TiltCleanUp : TiltCleanUp = "cleanup.sml" { TiltPrim TiltPrelude }

interface TiltExn = "tiltexn.int" {TiltPrim TiltPrelude}
unit TiltExn : TiltExn = "tiltexn.sml" {TiltPrim TiltPrelude}

interface GENERAL = "General/general.sig.sml" {
	TiltPrim TiltPrelude
}
unit GENERAL : GENERAL = "General/general.sig.sml" {
	TiltPrim TiltPrelude
}

interface General = "General/general.int" {TiltPrim TiltPrelude GENERAL}
unit General : General = "General/general.sml" {
	TiltPrim TiltPrelude GENERAL TiltExnExtern TiltExn
}

interface OPTION = "General/option-sig.sml" {
	TiltPrim TiltPrelude
}
unit OPTION : OPTION = "General/option-sig.sml" {
	TiltPrim TiltPrelude
}

interface Option = "General/option.int" {TiltPrelude OPTION}
unit Option : Option = "General/option.sml" {
	TiltPrim TiltPrelude OPTION
}
interface TiltPreString = "Text/pre-string.int" {
	TiltPrim TiltPrelude TiltVectorEq
}
unit TiltPreString : TiltPreString = "Text/pre-string.sml" {
	TiltPrim TiltPrelude TiltVectorEq
}
interface STRING_CVT = "Text/string-cvt-sig.sml" {
	TiltPrim TiltPrelude
}
unit STRING_CVT : STRING_CVT = "Text/string-cvt-sig.sml" {
	TiltPrim TiltPrelude
}
interface StringCvt = "Text/string-cvt.int" {STRING_CVT}
unit StringCvt : StringCvt = "Text/string-cvt.sml" {
	TiltPrim TiltPrelude STRING_CVT TiltPreString
}
interface BOOL = "General/bool-sig.sml" {
	TiltPrim TiltPrelude StringCvt
}
unit BOOL : BOOL = "General/bool-sig.sml" {
	TiltPrim TiltPrelude StringCvt
}
interface Bool = "General/bool.int" {TiltPrim BOOL}
unit Bool : Bool = "General/bool.sml" {
	TiltPrim TiltPrelude TiltPreString StringCvt BOOL
}
interface LIST = "Aggregate/list-sig.sml" {
	TiltPrim TiltPrelude
}
unit LIST : LIST = "Aggregate/list-sig.sml" {
	TiltPrim TiltPrelude
}
interface List = "Aggregate/list.int" {TiltPrelude LIST}
unit List : List = "Aggregate/list.sml" {
	TiltPrim TiltPrelude LIST
}
interface TiltNumFmt = "Text/num-format.int" {
	TiltPrim TiltPrelude StringCvt
}
unit TiltNumFmt : TiltNumFmt = "Text/num-format.sml" {
	TiltPrim TiltPrelude StringCvt TiltPreString
}
interface CHAR = "Text/char-sig.sml" {
	TiltPrim TiltPrelude StringCvt
}
unit CHAR : CHAR = "Text/char-sig.sml" {
	TiltPrim TiltPrelude StringCvt
}
interface Char = "Text/char.int" {TiltPrim TiltPrelude CHAR}
unit Char : Char = "Text/char.sml" {
	TiltPrim TiltVectorEq TiltPrelude CHAR TiltPreString TiltNumFmt
	StringCvt TiltExn
}
interface STRING = "Text/string-sig.sml" {
	TiltPrim TiltPrelude CHAR
}
unit STRING : STRING = "Text/string-sig.sml" {
	TiltPrim TiltPrelude CHAR
}
interface String = "Text/string.int" {
	TiltPrim TiltPrelude STRING
}
unit String : String = "Text/string.sml" {
	TiltPrim TiltVectorEq TiltPrelude TiltExn TiltPreString STRING Char
}
interface SUBSTRING = "Text/substring-sig.sml" {
	TiltPrim TiltPrelude STRING
}
unit SUBSTRING : SUBSTRING = "Text/substring-sig.sml" {
	TiltPrim TiltPrelude STRING
}
interface Substring = "Text/substring.int" {
	TiltPrim TiltPrelude TiltPreString SUBSTRING
}
unit Substring : Substring = "Text/substring.sml" {
	TiltPrim TiltVectorEq TiltPrelude TiltPreString SUBSTRING String
}
interface TiltPreInt = "Numeric/pre-int.int" {
	TiltPrim TiltPrelude
}
unit TiltPreInt : TiltPreInt = "Numeric/pre-int.sml" {
	TiltPrim TiltPrelude
}
interface TiltPreReal = "Numeric/pre-real.int" {
	TiltPrim TiltPrelude
}
unit TiltPreReal : TiltPreReal = "Numeric/pre-real.sml" {
	TiltPrim TiltPrelude
}
interface TiltPreWord = "Numeric/pre-word.int" {
	TiltPrim TiltPrelude
}
unit TiltPreWord : TiltPreWord = "Numeric/pre-word.sml" {
	TiltPrim TiltPrelude
}
interface TiltPreVector = "Aggregate/pre-vector.int" {
	TiltPrim TiltPrelude
}
unit TiltPreVector : TiltPreVector = "Aggregate/pre-vector.sml" {
	TiltPrim TiltPrelude
}
interface TiltNumScan = "Text/num-scan.int" {
	TiltPrim TiltPrelude StringCvt TiltPreInt TiltPreWord
	TiltPreReal
}
unit TiltNumScan : TiltNumScan = "Text/num-scan.sml" {
	TiltPrim TiltVectorEq TiltPrelude StringCvt String Option
	TiltPreInt TiltPreWord TiltPreReal TiltPreVector TiltExn Char
}
interface INTEGER = "Numeric/integer-sig.sml" {
	TiltPrim TiltPrelude TiltPreInt StringCvt
}
unit INTEGER : INTEGER = "Numeric/integer-sig.sml" {
	TiltPrim TiltPrelude TiltPreInt StringCvt
}
interface Int32 = "Numeric/int32.int" {TiltPrim TiltPrelude INTEGER}
unit Int32 : Int32 = "Numeric/int32.sml" {
	TiltPrim TiltPrelude TiltPreInt TiltNumScan
	TiltNumFmt INTEGER StringCvt
}
interface Int = "Numeric/int.int" {TiltPrim INTEGER}
unit Int : Int = "Numeric/int.sml" {Int32}
interface Position = "Numeric/position.int" {TiltPrim INTEGER}
unit Position : Position = "Numeric/position.sml" {Int32}
interface LargeInt = "Numeric/large-int.int" {TiltPrim INTEGER}
unit LargeInt : LargeInt = "Numeric/large-int.sml" {Int32}
interface TiltSysInt = "Numeric/sys-int.int" {TiltPrim INTEGER}
unit TiltSysInt : TiltSysInt = "Numeric/sys-int.sml" {Int32}
interface MATH = "Numeric/math-sig.sml" {
	TiltPrim
}
unit MATH : MATH = "Numeric/math-sig.sml" {
	TiltPrim
}
interface Math64 = "Numeric/math64c.int" {TiltPrim MATH}
unit Math64 : Math64 = "Numeric/math64c.sml" {
	TiltPrim TiltPrelude MATH TiltPreReal TiltPreInt
}
interface Math = "Numeric/math.int" {TiltPrim MATH}
unit Math : Math = "Numeric/math.sml" {Math64}
interface IEEE_REAL = "Numeric/ieee-real-sig.sml" {
	TiltPrim TiltPrelude
}
unit IEEE_REAL : IEEE_REAL = "Numeric/ieee-real-sig.sml" {
	TiltPrim TiltPrelude
}
interface IEEEReal = "Numeric/ieee-real.int" {IEEE_REAL}
unit IEEEReal : IEEEReal = "Numeric/ieee-real.sml" {
	TiltPrim TiltPrelude IEEE_REAL String Int TiltPreReal
}
interface REAL = "Numeric/real-sig.sml" {
	TiltPrim TiltPrelude StringCvt TiltPreInt TiltPreReal MATH IEEEReal
}
unit REAL : REAL = "Numeric/real-sig.sml" {
	TiltPrim TiltPrelude StringCvt TiltPreInt TiltPreReal MATH IEEEReal
}
interface TiltRealFmt = "Numeric/real-format.int" {TiltPrim  StringCvt}
unit TiltRealFmt : TiltRealFmt = "Numeric/real-format.sml" {
	TiltPrim TiltPrelude TiltVectorEq TiltExn TiltPreString TiltNumFmt
	TiltPreInt String StringCvt List
}
interface Real64 = "Numeric/real64.int" {TiltPrim REAL}
unit Real64 : Real64 = "Numeric/real64.sml" {
	TiltPrim TiltPrelude TiltExn TiltRealFmt TiltNumScan
	TiltPreReal REAL IEEEReal StringCvt Math64 Bool Int32
}
interface Real = "Numeric/real.int" {TiltPrim REAL}
unit Real : Real = "Numeric/real.sml" {Real64}
interface LargeReal = "Numeric/large-real.int" {TiltPrim REAL}
unit LargeReal : LargeReal = "Numeric/large-real.sml" {Real64}
interface WORD = "Numeric/word-sig.sml" {
	TiltPrim TiltPrelude StringCvt TiltPreWord TiltPreInt
}
unit WORD : WORD = "Numeric/word-sig.sml" {
	TiltPrim TiltPrelude StringCvt TiltPreWord TiltPreInt
}
interface Word8 = "Numeric/word8.int" {
	TiltPrim WORD
}
unit Word8 : Word8 = "Numeric/word8.sml" {
	TiltPrim TiltPrelude TiltExn TiltNumFmt
	TiltNumScan WORD StringCvt
}
interface Word32 = "Numeric/word32.int" {TiltPrim WORD}
unit Word32 : Word32 = "Numeric/word32.sml" {
	WORD TiltPrim TiltPrelude TiltPreWord StringCvt TiltNumFmt
	TiltNumScan TiltExn
}
interface Word = "Numeric/word.int" {TiltPrim WORD}
unit Word : Word = "Numeric/word.sml" {Word32}
interface LargeWord = "Numeric/large-word.int" {TiltPrim WORD}
unit LargeWord : LargeWord = "Numeric/large-word.sml" {Word32}
interface SysWord = "Numeric/sys-word.int" {TiltPrim WORD}
unit SysWord : SysWord = "Numeric/sys-word.sml" {Word32}
#if false
(*
	Word31 is neither required by the basis nor our basis
	implementation.  It is abstract and should probably be
	eliminated.
*)
interface Word31 = "Numeric/word31.int" {WORD}
unit Word31 : Word31 = "Numeric/word31.sml" {
	TiltPrim TiltPrelude WORD Word32 TiltExn
}
#endif
interface ARRAY = "Aggregate/array-sig.sml" {
	TiltPrim TiltPrelude
}
unit ARRAY : ARRAY = "Aggregate/array-sig.sml" {
	TiltPrim TiltPrelude
}
interface Array = "Aggregate/array.int" {TiltPrim TiltPrelude ARRAY}
unit Array : Array = "Aggregate/array.sml" {
	TiltPrim TiltPrelude TiltVectorEq ARRAY TiltPreVector
}
interface VECTOR = "Aggregate/vector-sig.sml" {
	TiltPrim TiltPrelude
}
unit VECTOR : VECTOR = "Aggregate/vector-sig.sml" {
	TiltPrim TiltPrelude
}
interface TiltPreVector8 = "Aggregate/pre-vector8.int" {
	TiltPrim TiltPrelude
}
unit TiltPreVector8 : TiltPreVector8 = "Aggregate/pre-vector8.sml" {
	TiltPrim TiltPrelude
}
interface Vector = "Aggregate/vector.int" {TiltPrim TiltPrelude VECTOR}
unit Vector : Vector = "Aggregate/vector.sml" {
	TiltPrim TiltPrelude TiltVectorEq VECTOR Array TiltPreVector
}
interface MONO_VECTOR = "Aggregate/mono-vector-sig.sml" {
	TiltPrim TiltPrelude
}
unit MONO_VECTOR : MONO_VECTOR = "Aggregate/mono-vector-sig.sml" {
	TiltPrim TiltPrelude
}
interface MONO_ARRAY = "Aggregate/mono-array-sig.sml" {
	TiltPrim TiltPrelude MONO_VECTOR
}
unit MONO_ARRAY : MONO_ARRAY = "Aggregate/mono-array-sig.sml" {
	TiltPrim TiltPrelude MONO_VECTOR
}
interface Word8Vector = "Aggregate/word8-vector.int" {
	TiltPrim TiltPrelude MONO_VECTOR
}
unit Word8Vector : Word8Vector = "Aggregate/word8-vector.sml" {
	TiltPrim TiltPrelude TiltVectorEq MONO_VECTOR
	List TiltPreVector8
}
interface Word8Array = "Aggregate/word8-array.int" {
	TiltPrim TiltPrelude MONO_ARRAY
}
unit Word8Array : Word8Array = "Aggregate/word8-array.sml" {
	TiltPrim TiltPrelude TiltVectorEq MONO_ARRAY
	List Word8Vector TiltPreVector8
}
interface PACK_WORD = "Aggregate/pack-word-sig.sml" {
	TiltPrim TiltPrelude Word8Vector Word8Array LargeWord
}
unit PACK_WORD : PACK_WORD = "Aggregate/pack-word-sig.sml" {
	TiltPrim TiltPrelude Word8Vector Word8Array LargeWord
}
interface Pack32Big = "Aggregate/pack-word-b32.int" {PACK_WORD}
unit Pack32Big : Pack32Big = "Aggregate/pack-word-b32.sml" {
	TiltPrim TiltPrelude PACK_WORD Word8 Word32 Word8Vector
	Word8Array TiltExn
}
interface BYTE = "Numeric/byte-sig.sml" {
	TiltPrim TiltPrelude Word8 Word8Vector Word8Array Substring
}
unit BYTE : BYTE = "Numeric/byte-sig.sml" {
	TiltPrim TiltPrelude Word8 Word8Vector Word8Array Substring
}
interface Byte = "Numeric/byte.int" {BYTE}
unit Byte : Byte = "Numeric/byte.sml" {
	TiltPrim TiltPrelude Word8 Word8Array Word8Vector Substring
	Array BYTE TiltPreString
}
interface CharVector = "Aggregate/char-vector.int" {
	TiltPrelude TiltPrim MONO_VECTOR
}
unit CharVector : CharVector = "Aggregate/char-vector.sml" {Word8Vector}
interface CharArray = "Aggregate/char-array.int" {
	TiltPrim TiltPrelude MONO_ARRAY
}
unit CharArray : CharArray = "Aggregate/char-array.sml" {Word8Array}
interface LIST_PAIR = "Aggregate/list-pair-sig.sml" {
	TiltPrim TiltPrelude
}
unit LIST_PAIR : LIST_PAIR = "Aggregate/list-pair-sig.sml" {
	TiltPrim TiltPrelude
}
interface ListPair = "Aggregate/list-pair.int" {LIST_PAIR}
unit ListPair : ListPair = "Aggregate/list-pair.sml" {
	TiltPrim TiltPrelude LIST_PAIR
}

interface COMMAND_LINE = "OS/commandline.sig.sml" {
	TiltPrim TiltPrelude
}
unit COMMAND_LINE : COMMAND_LINE = "OS/commandline.sig.sml" {
	TiltPrim TiltPrelude
}
interface TiltCmdLine = "OS/commandline-help.sml" {
	TiltPrim TiltPrelude
}
unit TiltCmdLine : TiltCmdLine = "OS/commandline-help.sml" {
	TiltPrim TiltPrelude
}
interface CommandLine = "OS/commandline.int" {COMMAND_LINE}
unit CommandLine : CommandLine = "OS/commandline.sml" {
	TiltPrim TiltPrelude COMMAND_LINE TiltCmdLine
}
interface TIME = "OS/time-sig.sml" {
	TiltPrim TiltPrelude StringCvt
}
unit TIME : TIME = "OS/time-sig.sml" {
	TiltPrim TiltPrelude StringCvt
}
interface TiltTimeExtern = "OS/pre-time.sml" {TiltPrim TiltPrelude}
unit TiltTimeExtern : TiltTimeExtern = "OS/pre-time.sml" {
	TiltPrim TiltPrelude
}
interface Time = "OS/time.int" {TIME}
unit Time : Time = "OS/time.sml" {
	TiltPrim TiltPrelude Int String StringCvt TIME TiltTimeExtern
	Real Bool TiltNumFmt Char
}
interface OS_FILE_SYS = "OS/os-filesys-sig.sml" {
	Position TiltPrim TiltPrelude Time
}
unit OS_FILE_SYS : OS_FILE_SYS = "OS/os-filesys-sig.sml" {
	Position TiltPrim TiltPrelude Time
}
interface OS_IO = "OS/os-io-sig.sml" {
	TiltPrim TiltPrelude Time
}
unit OS_IO : OS_IO = "OS/os-io-sig.sml" {
	TiltPrim TiltPrelude Time
}
interface OS_PATH = "OS/os-path-sig.sml" {
	TiltPrim TiltPrelude Substring
}
unit OS_PATH : OS_PATH = "OS/os-path-sig.sml" {
	TiltPrim TiltPrelude Substring
}
interface TiltOsPathFn = "OS/os-path-fn.int" {
	TiltPrim TiltVectorEq TiltPreString  OS_PATH
}
unit TiltOsPathFn : TiltOsPathFn = "OS/os-path-fn.sml" {
	TiltPrim TiltPrelude TiltVectorEq Substring String List Bool
	OS_PATH TiltExn
}
interface OS_PROCESS = "OS/os-process-sig.sml" {
	TiltPrim TiltPrelude
}
unit OS_PROCESS : OS_PROCESS = "OS/os-process-sig.sml" {
	TiltPrim TiltPrelude
}
interface OS_SIG = "OS/os-sig.sml" {
	TiltPrim TiltPrelude OS_FILE_SYS OS_PATH OS_IO OS_PROCESS
}
unit OS_SIG : OS_SIG = "OS/os-sig.sml" {
	TiltPrim TiltPrelude OS_FILE_SYS OS_PATH OS_IO OS_PROCESS
}
interface TiltPreOs = "Unix/pre-os.int" {
	TiltPrim TiltPrelude TiltExn
}
unit TiltPreOs : TiltPreOs = "Unix/pre-os.sml" {
	TiltPrim TiltPrelude TiltExn
}
interface IO_SIG = "IO/io-sig.sml" {
	TiltPrelude TiltPrim
}
unit IO_SIG : IO_SIG = "IO/io-sig.sml" {
	TiltPrelude TiltPrim
}
interface IO = "IO/io.int" {IO_SIG}
unit IO : IO = "IO/io.sml" {
	TiltPrim TiltPrelude IO_SIG
}
interface STREAM_IO = "IO/stream-io-sig.sml" {
	TiltPrim TiltPrelude IO
}
unit STREAM_IO : STREAM_IO = "IO/stream-io-sig.sml" {
	TiltPrim TiltPrelude IO
}
interface TEXT_STREAM_IO = "IO/text-stream-io-sig.sml" {
	TiltPrim TiltPrelude Substring STREAM_IO
}
unit TEXT_STREAM_IO : TEXT_STREAM_IO = "IO/text-stream-io-sig.sml" {
	TiltPrim TiltPrelude Substring STREAM_IO
}
interface TEXT_IO = "IO/text-io-sig.sml" {
	TiltPrim TiltPrelude TiltPreString StringCvt TEXT_STREAM_IO
}
unit TEXT_IO : TEXT_IO = "IO/text-io-sig.sml" {
	TiltPrim TiltPrelude TiltPreString StringCvt TEXT_STREAM_IO
}
interface IMPERATIVE_IO = "IO/imperative-io-sig.sml" {
	TiltPrim TiltPrelude STREAM_IO
}
unit IMPERATIVE_IO : IMPERATIVE_IO = "IO/imperative-io-sig.sml" {
	TiltPrim TiltPrelude STREAM_IO
}
interface BIN_IO = "IO/bin-io-sig.sml" {
	TiltPrim TiltPrelude IMPERATIVE_IO Word8Vector Word8
}
unit BIN_IO : BIN_IO = "IO/bin-io-sig.sml" {
	TiltPrim TiltPrelude IMPERATIVE_IO Word8Vector Word8
}
interface PRIM_IO = "IO/prim-io-sig.sml" {
	TiltPrim TiltPrelude TiltPreOs
}
unit PRIM_IO : PRIM_IO = "IO/prim-io-sig.sml" {
	TiltPrim TiltPrelude TiltPreOs
}
interface TILT_OS_PRIM_IO = "IO/os-prim-io-sig.sml" {
	TiltPrim TiltPrelude PRIM_IO
}
unit TILT_OS_PRIM_IO : TILT_OS_PRIM_IO = "IO/os-prim-io-sig.sml" {
	TiltPrim TiltPrelude PRIM_IO
}
interface TiltPrimIoFn = "IO/prim-io-fn.int" {
	TiltPrim TiltPrelude PRIM_IO MONO_ARRAY
}
unit TiltPrimIoFn : TiltPrimIoFn = "IO/prim-io-fn.sml" {
	TiltPrim TiltPrelude TiltPreOs MONO_VECTOR MONO_ARRAY PRIM_IO
}
interface TextPrimIO = "IO/text-prim-io.int" {
	TiltPrim TiltPrelude PRIM_IO
}
unit TextPrimIO : TextPrimIO = "IO/text-prim-io.sml" {
	TiltPrim TiltPrelude PRIM_IO TiltPrimIoFn Position CharVector
	CharArray
}
interface BinPrimIO = "IO/bin-prim-io.int" {
	TiltPrim TiltPrelude PRIM_IO
}
unit BinPrimIO : BinPrimIO = "IO/bin-prim-io.sml" {
	TiltPrimIoFn Word8Vector Word8Array Word8 Position
}
interface TiltBinIoFn = "IO/bin-io-fn.int" {
	TiltPrim TILT_OS_PRIM_IO BinPrimIO BIN_IO
}
unit TiltBinIoFn : TiltBinIoFn = "IO/bin-io-fn.sml" {
	TiltPrim TiltPrelude TiltVectorEq Word8 Int Position IO
	BIN_IO TILT_OS_PRIM_IO Word8Array Word8Vector BinPrimIO Option
	TiltCleanUp
}
interface TIMER = "timer-sig.sml" {
	TiltPrim TiltPrelude Time
}
unit TIMER : TIMER = "timer-sig.sml" {
	TiltPrim TiltPrelude Time
}
interface Timer = "timer.int" {TIMER}
unit Timer : Timer = "useless-timer.sml" {
	TiltPrim TiltPrelude TIMER TiltTimeExtern Time
}
interface TiltPosixExtern = "extern.sml" {
	TiltPrim TiltPrelude
}
unit TiltPosixExtern : TiltPosixExtern = "extern.sml" {
	TiltPrim TiltVectorEq TiltPrelude
}
interface TiltPrePosix = "Posix/pre-posix.int" {
	TiltPrim SysWord
}
unit TiltPrePosix : TiltPrePosix = "Posix/pre-posix.sml" {
	TiltPrim TiltPrelude TiltPosixExtern String SysWord TiltExn
}
interface DATE = "date-sig.sml" {
	TiltPrim TiltPrelude StringCvt Time
}
unit DATE : DATE = "date-sig.sml" {
	TiltPrim TiltPrelude StringCvt Time
}
interface Date = "date.int" {DATE}
unit Date : Date = "date.sml" {
	TiltPrim TiltPrelude List DATE Time TiltPosixExtern
	Vector StringCvt Int TiltExn
}
interface POSIX_ERROR = "Posix/posix-error.sig.sml" {
	TiltPrim TiltPrelude
}
unit POSIX_ERROR : POSIX_ERROR = "Posix/posix-error.sig.sml" {
	TiltPrim TiltPrelude
}
interface TiltPosixError = "Posix/posix-error.int" {
	TiltPrim POSIX_ERROR
}
unit TiltPosixError : TiltPosixError = "Posix/posix-error.sml" {
	TiltPrim TiltPrelude POSIX_ERROR TiltPosixExtern
}
interface POSIX_FLAGS = "Posix/posix-flags-sig.sml" {
	TiltPrim TiltPrelude SysWord
}
unit POSIX_FLAGS : POSIX_FLAGS = "Posix/posix-flags-sig.sml" {
	TiltPrim TiltPrelude SysWord
}
interface POSIX_IO = "Posix/posix-io-sig.sml" {
	TiltPrim TiltPrelude POSIX_FLAGS Word8Vector Word8Array
	Position
}
unit POSIX_IO : POSIX_IO = "Posix/posix-io-sig.sml" {
	TiltPrim TiltPrelude POSIX_FLAGS Word8Vector Word8Array
	Position
}
interface POSIX_FILE_SYS = "Posix/posix-filesys-sig.sml" {
	TiltPrim TiltPrelude Position TiltPreOs SysWord POSIX_FLAGS Time
}
unit POSIX_FILE_SYS : POSIX_FILE_SYS = "Posix/posix-filesys-sig.sml" {
	TiltPrim TiltPrelude Position TiltPreOs SysWord POSIX_FLAGS Time
}
interface TiltPosixFileSys = "Posix/posix-filesys.int" {
	POSIX_FILE_SYS TiltPrePosix
}
unit TiltPosixFileSys : TiltPosixFileSys = "Posix/posix-filesys.sml" {
	TiltPrim TiltPrelude TiltPrePosix Position Word SysWord TiltPreOs
	TiltPosixExtern List Time POSIX_FILE_SYS String TiltExn
}
interface POSIX_PROCESS = "Posix/posix-process-sig.sml" {
	SysWord TiltPrim TiltPrelude POSIX_FLAGS Word8 Time
}
unit POSIX_PROCESS : POSIX_PROCESS = "Posix/posix-process-sig.sml" {
	SysWord TiltPrim TiltPrelude POSIX_FLAGS Word8 Time
}
interface POSIX_SIGNAL = "Posix/posix-signal-sig.sml" {
	TiltPrim SysWord
}
unit POSIX_SIGNAL : POSIX_SIGNAL = "Posix/posix-signal-sig.sml" {
	TiltPrim SysWord
}
interface TiltPosixSignal = "Posix/posix-signal.int" {POSIX_SIGNAL}
unit TiltPosixSignal : TiltPosixSignal = "Posix/posix-signal.sml" {
	Word32 TiltSysInt SysWord TiltPosixExtern POSIX_SIGNAL
}
interface TiltPosixProcess = "Posix/posix-process.int" {
	TiltPosixSignal POSIX_PROCESS
}
unit TiltPosixProcess : TiltPosixProcess = "Posix/posix-process.sml" {
	TiltPrim TiltPrelude TiltPrePosix List TiltPosixSignal SysWord
	TiltSysInt Time Word8 TiltPosixExtern POSIX_PROCESS TiltExn
}
interface TiltPosixIo = "Posix/posix-io.int" {
	POSIX_IO TiltPrePosix TiltPosixFileSys
}
unit TiltPosixIo : TiltPosixIo = "Posix/posix-io.sml" {
	TiltPrim TiltPrelude TiltPrePosix TiltSysInt Int Position
	Word8Vector Word8Array List POSIX_IO TiltPosixFileSys TiltPosixProcess
	SysWord TiltPosixExtern String TiltExn
}
interface POSIX_PROC_ENV = "Posix/posix-procenv-sig.sml" {
	TiltPrim TiltPrelude SysWord Time
}
unit POSIX_PROC_ENV : POSIX_PROC_ENV = "Posix/posix-procenv-sig.sml" {
	TiltPrim TiltPrelude SysWord Time
}
interface TiltPosixProcEnv = "Posix/posix-procenv.int" {
	POSIX_PROC_ENV TiltPosixProcess TiltPosixFileSys TiltPrePosix
}
unit TiltPosixProcEnv : TiltPosixProcEnv = "Posix/posix-procenv.sml" {
	TiltPrim TiltPrelude TiltPrePosix Time Real TiltSysInt List
	TiltPosixFileSys TiltPosixProcess SysWord POSIX_PROC_ENV TiltPosixProcess
	TiltPosixExtern
}
interface POSIX_TTY = "Posix/posix-tty-sig.sml" {
	TiltPrim TiltPrelude SysWord POSIX_FLAGS
}
unit POSIX_TTY : POSIX_TTY = "Posix/posix-tty-sig.sml" {
	TiltPrim TiltPrelude SysWord POSIX_FLAGS
}
interface TiltPosixTty = "Posix/posix-tty.int" {
	POSIX_TTY TiltPosixProcess TiltPosixFileSys
}
unit TiltPosixTty : TiltPosixTty = "Posix/posix-tty.sml" {
	TiltPrim TiltPrelude TiltVectorEq List Word8Vector
	Word8Array TiltSysInt TiltPosixFileSys TiltPosixProcess SysWord Byte
	POSIX_TTY TiltPosixExtern
}
interface POSIX_SYS_DB = "Posix/posix-sysdb-sig.sml" {
	TiltPrim TiltPrelude
}
unit POSIX_SYS_DB : POSIX_SYS_DB = "Posix/posix-sysdb-sig.sml" {
	TiltPrim TiltPrelude
}
interface TiltPosixSysDb = "Posix/posix-sysdb.int" {
	POSIX_SYS_DB TiltPrePosix
}
unit TiltPosixSysDb : TiltPosixSysDb = "Posix/posix-sysdb.sml" {
	TiltPrim TiltVectorEq TiltPrelude TiltPrePosix SysWord POSIX_SYS_DB
	TiltPosixExtern
}
interface POSIX = "Posix/posix-sig.sml" {
	POSIX_ERROR POSIX_SIGNAL POSIX_PROCESS POSIX_PROC_ENV
	POSIX_FILE_SYS POSIX_IO POSIX_SYS_DB POSIX_TTY
}
unit POSIX : POSIX = "Posix/posix-sig.sml" {
	POSIX_ERROR POSIX_SIGNAL POSIX_PROCESS POSIX_PROC_ENV
	POSIX_FILE_SYS POSIX_IO POSIX_SYS_DB POSIX_TTY
}
interface Posix = "Posix/posix.int" {TiltPrim TiltPrelude POSIX}
unit Posix : Posix = "Posix/posix.sml" {
	TiltPrim TiltPrelude TiltPosixError TiltPosixSignal TiltPosixProcess
	TiltPosixFileSys TiltPosixIo TiltPosixSysDb TiltPosixTty TiltPosixProcEnv
	POSIX
}
interface TiltOsPath = "Unix/os-path.int" {OS_PATH}
unit TiltOsPath : TiltOsPath = "Unix/os-path.sml" {
	TiltPrim TiltPrelude TiltVectorEq String Substring OS_PATH
	TiltOsPathFn
}
interface TiltOsFileSys = "Unix/os-filesys.int" {OS_FILE_SYS}
unit TiltOsFileSys : TiltOsFileSys = "Unix/os-filesys.sml" {
	TiltPrim TiltVectorEq TiltPrelude SysWord List OS_FILE_SYS
	TiltOsPath Posix TiltPosixExtern TiltExn
}
interface TiltOsProcess = "Unix/os-process.int" {OS_PROCESS}
unit TiltOsProcess : TiltOsProcess = "Unix/os-process.sml" {
	TiltPrim TiltPrelude Word8 TiltPreOs OS_PROCESS Posix
	TiltCleanUp
}
interface TiltOsIo = "Unix/os-io.int" {OS_IO TiltPreOs}
unit TiltOsIo : TiltOsIo = "Unix/os-io.sml" {
	TiltPrim TiltPrelude TiltVectorEq Time List Word SysWord
	Int OS_IO TiltPreOs Posix TiltPosixExtern
}
interface OS = "Unix/os.int" {
	OS_SIG TiltPreOs Posix
}
unit OS : OS = "Unix/os.sml" {
	TiltPrim TiltPrelude OS_PROCESS Posix TiltPreOs TiltOsFileSys
	TiltOsPath TiltOsProcess TiltOsIo OS_SIG
}
interface TiltTextIoFn = "IO/text-io-fn.int" {
	TiltPrim TILT_OS_PRIM_IO TextPrimIO TEXT_IO
}
unit TiltTextIoFn : TiltTextIoFn = "IO/text-io-fn.sml" {
	TiltPrim TiltPrelude TiltVectorEq Int CharArray CharVector
	TextPrimIO TiltCleanUp Substring IO TILT_OS_PRIM_IO TEXT_IO OS Option
	TiltExn
}
interface TiltPosixPrimIoFn = "Unix/posix-prim-io-fn.int" {
	TiltPrim PRIM_IO Word8Vector Word8Array Position
	TILT_OS_PRIM_IO Posix
}
unit TiltPosixPrimIoFn : TiltPosixPrimIoFn = "Unix/posix-prim-io-fn.sml" {
	TiltPrim TiltPrelude Position PRIM_IO Word8Vector Word8Array
	Posix IO BinPrimIO TILT_OS_PRIM_IO OS
}
interface TiltPosixBinPrimIo = "Unix/posix-bin-prim-io.int" {
	PRIM_IO TiltPosixPrimIoFn BinPrimIO TILT_OS_PRIM_IO Posix
}
unit TiltPosixBinPrimIo : TiltPosixBinPrimIo = "Unix/posix-bin-prim-io.sml" {
	PRIM_IO TiltPosixPrimIoFn BinPrimIO TILT_OS_PRIM_IO
}
interface TiltPosixTextPrimIo = "Unix/posix-text-prim-io.int" {
	TiltPrim TILT_OS_PRIM_IO TextPrimIO Posix
}
unit TiltPosixTextPrimIo : TiltPosixTextPrimIo = "Unix/posix-text-prim-io.sml" {
	TiltPrim TiltPrelude String Int IO TiltPosixPrimIoFn
	TiltPosixBinPrimIo TextPrimIO CharArray TILT_OS_PRIM_IO Posix
}
interface TextIO = "Unix/posix-text-io.int" {
	TEXT_IO TextPrimIO
}
unit TextIO : TextIO = "Unix/posix-text-io.sml" {
	TiltTextIoFn TEXT_IO TiltPosixTextPrimIo TextPrimIO
}
interface BinIO = "Unix/posix-bin-io.int" {
	TiltPrim TiltPrelude BIN_IO BinPrimIO
}
unit BinIO : BinIO = "Unix/posix-bin-io.sml" {
	TiltBinIoFn TiltPosixBinPrimIo BinPrimIO TextPrimIO
}
interface UNIX = "Unix/unix-sig.sml" {
	TiltPrim TiltPrelude TextIO OS
}
unit UNIX : UNIX = "Unix/unix-sig.sml" {
	TiltPrim TiltPrelude TextIO OS
}
interface Unix = "Unix/unix.int" {
	Posix UNIX
}
unit Unix : Unix = "Unix/unix.sml" {
	TiltPrim TiltPrelude TextIO IO UNIX Posix Substring String
	TiltPosixTextPrimIo OS
}
interface TiltTop = "toplevel.int" {
	TiltPrim TiltPrelude TiltPreString TiltPreInt Real Char String
	Option List General TextIO Vector TiltExn
}
unit TiltTop : TiltTop = "toplevel.sml" {
	TiltPrim TiltPrelude TiltPreString TiltPreInt Real Char String
	Option List General TextIO Vector TiltExn
}
interface SML90_SIG = "General/sml90.sig.sml" {
	TiltPrelude TiltPrim
}
unit SML90_SIG : SML90_SIG = "General/sml90.sig.sml" {
	TiltPrelude TiltPrim
}
interface SML90 = "General/sml90.int" {SML90_SIG}
unit SML90 : SML90 = "General/sml90.sml" {
	TiltPrim TiltPrelude General SML90_SIG Math Real Char
	CharVector String TextIO
}
