	TYPE	<Array8  = fn t:T1 . Exist[?sz:Sint]. (^*[S(?sz)^r,(^*[array(?sz,t^rw)])^r])>
	TYPE	<Array32 = fn t:T4 . Exist[?sz:Sint]. (^*[S(?sz)^r,(^*[array(?sz,t^rw)])^r])>
	TYPE	<Array64 = fn t:T8 . Exist[?sz:Sint]. (^*[S(?sz)^r,(^*[array(?sz,t^rw)])^r])>
	TYPE	<Dyntag = fn a_326_INT:T4 . ^T^rw(a_326_INT^r)*[]>
	TYPE	<exn = Exist[exn_vt_325_INT:T4]. (^*[(Dyntag exn_vt_325_INT)^r,exn_vt_325_INT^r,(Array8 B1)^r])>
	TYPE	<Ccode = fn qfrom:Ts qto:T4 . All[cs1:T4 cs2:T4 cs3:T4 cs4:T4 s:Ts]. (code {EAX : junk4,EBX: cs1,ECX : junk4,EDX : junk4,ESI: cs2,EDI: cs3,EBP: cs4,ESP: sptr (code {EAX: qto,EBX: cs1,ECX : junk4,EDX : junk4,ESI: cs2,EDI: cs3,EBP: cs4,ESP : sptr (qfrom # s)})::qfrom # s})>

	VAL	l__unit__INT_LAB,<^*[]>
	VAL	l__wordarray__zero__INT_LAB,<All[a:T1].(Array8 a)>
	VAL	l__array__zero__INT_LAB,<All[a:T4].(Array32 a)>
	VAL	l__floatarray__zero__INT_LAB,<All[a:T8].(Array64 a)>

	VAL	new_dyntag,<All[a:T4].(Ccode se (Dyntag a))>
	VAL	new_ptrarray,<All[a:T4].(Ccode B4::a::se (Array32 a))>
	VAL	new_int32array,<Ccode B4::B4::se (Array32 B4)>
	VAL	new_int8array,<Ccode B4::B4::se (Array8 B1)>
	VAL	new_floatarray,<Ccode B4::F8::se (Array64 F8)>

	VAL	dead_exit,<code{ ST0?, ST1?, ST2?, ST3?, ST4?, ST5?, ST6?, ST7?}>
; Default exception handler.
	VAL 	exn_handler_exit,<code{ST0?, ST1?, ST2?, ST3?, ST4?, ST5?, ST6?, ST7?, ESP: sptr (code{ESP: sptr exn::se})::exn::se}>
