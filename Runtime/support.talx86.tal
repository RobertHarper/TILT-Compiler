	INCLUDE	TAL.INC
	_begin_TAL

	TAL_IMPORT 	support.talx86_i.tali

	TAL_EXPORT 	support.talx86_e.tali

	TYPE	<?ab_323_INT = *[]>
	TYPE	<?ab_324_INT = ^?ab_323_INT>
	TYPE	<Array8  = fn t:T1 . Exist[?sz:Sint]. (^*[S(?sz)^r,(^*[array(?sz,t^rw)])^r])>
	TYPE	<Dt_271_INT = fn a_7003_INT:T4 . ^T^rw(a_7003_INT^r)*[]>
	TYPE	<exn = Exist[exn_vt_7002_INT:T4]. (^*[(Dt_271_INT exn_vt_7002_INT)^r,exn_vt_7002_INT^r,(Array8 B1)^r])>
	TYPE	<HndlrCd_294_INT = fn s2_277_INT:Ts henv_284_INT:T4 . code {EAX: exn,EBX: henv_284_INT,ECX: junk4,EDX: junk4,ESI: junk4,EDI: junk4,EBP: junk4,ESP: sptr s2_277_INT}>
	TYPE	<HndlrFrm = fn s2_277_INT:Ts . Exist[henv_284_INT:T4]. (^*[((HndlrCd_294_INT s2_277_INT) henv_284_INT)^r,(sptr s2_277_INT)^r,henv_284_INT^r])>
	TYPE	<raise_t = All[s1:Ts s2:Ts]. (code {EAX: junk4,EBX: junk4,ECX: junk4,EDX: junk4,ESI: junk4,EDI: junk4,EBP: HndlrFrm s2,ESP: sptr (exn::(s1#s2))})>
	TYPE	<error_t = All[s1:Ts s2:Ts]. (code {EAX: junk4,EBX: junk4,ECX: junk4,EDX: junk4,ESI: junk4,EDI: junk4,EBP: HndlrFrm s2,ESP: sptr (s1#s2)})>

	CODE


raise_exn:
LABELTYPE <raise_t>
	MOV	EAX,[ESP]      ; Put the exception packet in EAX
	UNPACK	exn__frm,ECX,EBP ; Unpack the frame
	MOV	EBX,[ECX+8]      ; Put the closure in EBX
	MOV	ESP,[ECX+4]      ; Load the old stack
	JMP	[ECX]            ; Jmp to the stored handler pointer


l__overflow__INT_LAB:
LABELTYPE<error_t>
	CALL	tapp(mkOverflowExn,<junk4,junk4,junk4,HndlrFrm s2,ESP 0>)
	PUSH	EAX
	JMP 	tapp(raise_exn,<s1,s2>)

l__raise__subscript__INT_LAB:
LABELTYPE<error_t>
	CALL	tapp(mkSubscriptExn,<junk4,junk4,junk4,HndlrFrm s2,ESP 0>)
	PUSH	EAX
	JMP 	tapp(raise_exn,<s1,s2>)

l__div__zero__INT_LAB:
LABELTYPE<error_t>
	CALL	tapp(mkDivExn,<junk4,junk4,junk4,HndlrFrm s2,ESP 0>)
	PUSH	EAX
	JMP 	tapp(raise_exn,<s1,s2>)

	_end_TAL
	END
