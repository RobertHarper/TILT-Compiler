# make all will build the runtime.  make dbg will build a separate
# debugging version for use with TILT's -fDebugRuntime flag.  The
# targets tags, clean, depend, and install do what you expect.  make
# cleandepend can be used to erase the system-specific dependency
# information generated by make depend (make clean does this also).
#
# cputype, objtype, and release are parameters that are set up through
# recursive invocations of make.
#
# Note that assertions defined with assert() are always tested and those
# defined with fastAssert() are only tested in the debug runtime.  So we
# do not define NDEBUG with the optimizing compilers.

cputype=unsupported
objtype=sparc
release=opt
objdir=$(objtype)/$(release)
DEST=/usr/local/lib/tilt/Runtime

CFLAGS=#-DHEAPPROFILE
ASFLAGS=
AR=ar

sparc_cc=gcc -Dsparc -Winline -Wimplicit -g -Wa,-xarch=v8plus
sparc_dbg_cc=$(sparc_cc) -DDEBUG
sparc_opt_cc=$(sparc_cc) -O2 -finline-functions
sparc_as=as -Dsparc -xarch=v8plus -P
sparc_dbg_as=$(sparc_as)
sparc_opt_as=$(sparc_as)

# The xtaso flag instructs the Alpha compiler to honor #pragma
# pointer_size directives.  This allows the runtime to use 32-bit
# pointers when interacting with ML.  The -fprm d flag instructs the
# Alpha compiler to respect dynamic IEEE rounding mode changes.

alpha_cc=cc -Dalpha -warnprotos -newc -std -w0 -xtaso -fprm d
alpha_dbg_cc=$(alpha_cc) -g -DDEBUG
alpha_opt_cc=$(alpha_cc) -g3 -inline size
alpha_as=as -Dalpha -g
alpha_dbg_as=$(alpha_as) -O0
alpha_opt_as=$(alpha_as) -O1

OBJ=\
	$(objdir)/barriers.o\
	$(objdir)/bitmap.o\
	$(objdir)/create.o\
	$(objdir)/exn.o\
	$(objdir)/firstdata.o\
	$(objdir)/forward.o\
	$(objdir)/gc.o\
	$(objdir)/gc_gen.o\
	$(objdir)/gc_gen_conc.o\
	$(objdir)/gc_gen_para.o\
	$(objdir)/gc_large.o\
	$(objdir)/gc_para.o\
	$(objdir)/gc_semi.o\
	$(objdir)/gc_semi_conc.o\
	$(objdir)/gc_semi_para.o\
	$(objdir)/gcstat.o\
	$(objdir)/global.o\
	$(objdir)/hash.o\
	$(objdir)/main.o\
	$(objdir)/memobj.o\
	$(objdir)/platform.o\
	$(objdir)/posix.o\
	$(objdir)/queue.o\
	$(objdir)/rooms.o\
	$(objdir)/show.o\
	$(objdir)/sigaction.o\
	$(objdir)/signal.o\
	$(objdir)/stack.o\
	$(objdir)/stats.o\
	$(objdir)/support.$(objtype).o\
	$(objdir)/thread.o

all: opt

opt: FORCE
	$(MAKE) release=opt cputype=`../Bin/cputype` continue

dbg: FORCE
	$(MAKE) release=dbg cputype=`../Bin/cputype` continue

continue: FORCE
	case $(cputype) in \
	unsupported) echo runtime not supported on this system ;; \
	*) $(MAKE) release=$(release) objtype=$(cputype) runtime-$(cputype)-$(release).a ;; \
	esac

cleandepend: FORCE
	-makedepend
	-rm Makefile.bak

clean: FORCE cleandepend
	-rm -rf */dbg/*.o */opt/*.o *.a

tags: FORCE
	-etags '--regex=/INLINE(\(.*\))/\1/' *.[chs]
	-ctags '--regex=/INLINE(\(.*\))/\1/' *.[chs]

depend: FORCE
	make cputype=`../Bin/cputype` continue_depend

continue_depend: FORCE
	makedepend -p'$$(objdir)/' -D$(cputype) *.c *.$(cputype).s

install: FORCE
	-mkdir $(DEST); \
	tar cf - ` \
		for release in opt dbg; do \
			for cputype in alpha sparc; do \
				for file in runtime-$$cputype-$$release.a $$cputype/$$release/firstdata.o; do \
					if test -f $$file; then \
						echo $$file; \
					fi; \
				done; \
			done; \
		done; \
	` | (cd $(DEST) && tar xf -)

FORCE:

# Compiling

sparc/dbg/%.o: %.c
	$(sparc_dbg_cc) $(CFLAGS) -c -o $@ $?

sparc/opt/%.o: %.c
	$(sparc_opt_cc) $(CFLAGS) -c -o $@ $?

alpha/dbg/%.o: %.c
	$(alpha_dbg_cc) $(CFLAGS) -c -o $@ $?

alpha/opt/%.o: %.c
	$(alpha_opt_cc) $(CFLAGS) -c -o $@ $?

# Assembling

sparc/dbg/%.sparc.o: %.sparc.s
	$(sparc_dbg_as) $(ASFLAGS) -o $@ $?

sparc/opt/%.sparc.o: %.sparc.s
	$(sparc_opt_as) $(ASFLAGS) -o $@ $?

alpha/dbg/%.alpha.o: %.alpha.s
	$(alpha_dbg_as) $(ASFLAGS) -o $@ $?

alpha/opt/%.alpha.o: %.alpha.s
	$(alpha_opt_as) $(ASFLAGS) -o $@ $?

# Packing

runtime-$(objtype)-$(release).a: $(OBJ)
	$(AR) r $@ $(OBJ)

# DO NOT DELETE
