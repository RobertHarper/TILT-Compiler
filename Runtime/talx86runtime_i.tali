	TYPE	<?ab_323_INT = *[]>
	TYPE	<?ab_324_INT = ^?ab_323_INT>
	TYPE	<Array8  = fn t:T1 . Exist[?sz:Sint]. (^*[S(?sz)^r,(^*[array(?sz,t^rw)])^r])>
	TYPE	<Dt_271_INT = fn a_7003_INT:T4 . ^T^rw(a_7003_INT^r)*[]>
	TYPE	<exn = Exist[exn_vt_7002_INT:T4]. (^*[(Dt_271_INT exn_vt_7002_INT)^r,exn_vt_7002_INT^r,(Array8 B1)^r])>
	TYPE	<HndlrCd_294_INT = fn s2_277_INT:Ts henv_284_INT:T4 . code {EAX: exn,EBX: henv_284_INT,ECX: junk4,EDX: junk4,ESI: junk4,EDI: junk4,EBP: junk4,ESP: sptr s2_277_INT}>
	TYPE	<HndlrFrm = fn s2_277_INT:Ts . Exist[henv_284_INT:T4]. (^*[((HndlrCd_294_INT s2_277_INT) henv_284_INT)^r,(sptr s2_277_INT)^r,henv_284_INT^r])>
	TYPE	<Code_299_INT = fn eargs_296_INT:Ts fargs_297_INT:Ts ret_298_INT:T4 . All[cs_t1_278_INT:T4 cs_t2_279_INT:T4 cs_t3_280_INT:T4 s1_276_INT:Ts s2_277_INT:Ts]. (code {EAX: junk4,EBX: cs_t1_278_INT,ECX: junk4,EDX: junk4,ESI: cs_t2_279_INT,EDI: cs_t3_280_INT,EBP: HndlrFrm s2_277_INT,ESP: sptr (code {EAX: ret_298_INT,EBX: cs_t1_278_INT,ECX: junk4,EDX: junk4,ESI: cs_t2_279_INT,EDI: cs_t3_280_INT,EBP: HndlrFrm s2_277_INT,ESP: sptr s1_276_INT#s2_277_INT})::(eargs_296_INT#(fargs_297_INT#(s1_276_INT#s2_277_INT)))})>


	TYPE	<?ab_327_INT = ((Code_299_INT se) se) ?ab_324_INT>

	VAL	TiltMain__INT__r__INT_LAB,<?ab_327_INT>

	VAL	_pop_never_null,<code{ ST0?, ST1?, ST2?, ST3?, ST4?, ST5?, ST6?, ST7?}>
; Default exception handler.
	VAL 	_pop_exn_handler_verbose,<code{ST0?, ST1?, ST2?, ST3?, ST4?, ST5?, ST6?, ST7?, ESP: sptr (code{ESP: sptr exn::se})::exn::se}>
; Array bounds error label.
; JGM:  note that this was defined in tal.tali too
	VAL	_array_bounds_error,<code{ ST0?, ST1?, ST2?, ST3?, ST4?, ST5?, ST6?, ST7? }>
; Division by zero error label.
	VAL 	_division_by_zero_error,<code{ ST0?, ST1?, ST2?, ST3?, ST4?, ST5?, ST6?, ST7? }>

	VAL	_tal_exit,<All[r:Ts].code{esp:sptr B4::r}>

