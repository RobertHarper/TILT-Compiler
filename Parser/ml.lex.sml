(*$import Prelude TopLevel StrgHash Control SourceMap Int String Char ML_TOKENS Symbol ErrorMsg TilWord64 TokenTable Vector *)
functor MLLexFun(structure Tokens : ML_TOKENS)=
   struct
    structure UserDeclarations =
      struct
(* ml.lex
 *
 * Copyright 1989 by AT&T Bell Laboratories
 *
 * $Log$
# Revision 1.10  2000/11/27  22:37:06  swasey
# *** empty log message ***
# 
 * Revision 1.4  1997/10/21 21:00:35  pscheng
 * got rid of int inf
 *
# Revision 1.3  1997/09/03  20:10:37  pscheng
# added extern and ccall syntax
#
# Revision 1.2  97/07/02  22:03:18  jgmorris
# Modified syntax to allow for interfaces and implementations.
# 
 * Revision 1.2  1997/05/30 14:12:41  zdance
 * Added support for (*$import...*) and (*$include...*) directives.
 * Also changed the grammar to allow for (possibly) semicolon-separated sequences
 * at the top level declarations.
 *
 * Revision 1.1.1.1  1997/05/23 14:53:52  til
 * Imported Sources
 *
# Revision 1.1  97/04/10  15:05:11  cokasaki
# Added DelayExp and DelayPat to ast.  Added lexical token DOLLAR.
# 
 * Revision 1.2  1997/01/28  23:20:40  jhr
 * Integer and word literals are now represented by IntInf.int (instead of
 * as strings).
 *
 *)

open ErrorMsg;

structure TokTable = TokenTable(Tokens);
type svalue = Tokens.svalue
type pos = int
type lexresult = (svalue,pos) Tokens.token
type lexarg = {comLevel : int ref, 
	       sourceMap : SourceMap.sourcemap,
	       charlist : string list ref,
	       stringtype : bool ref,
	       stringstart : int ref, (* start of current string or comment*)
               brack_stack : int ref list ref, (* for frags *)
	       err : pos*pos -> ErrorMsg.complainer}
type arg = lexarg
type ('a,'b) token = ('a,'b) Tokens.token
val eof = fn ({comLevel,err,stringstart,stringtype,sourceMap,
               charlist, brack_stack}:lexarg) => 
	   let val pos = Int.max(!stringstart+2, SourceMap.lastChange sourceMap)
	    in if !comLevel>0 then err (!stringstart,pos) COMPLAIN
					 "unclosed comment" nullErrorBody
		  	      else ();
	       Tokens.EOF(pos,pos)
	   end	
fun addString (charlist,s:string) = charlist := s :: (!charlist)
fun addChar (charlist, c:char) = addString(charlist, String.str c)
fun makeString charlist = (concat(rev(!charlist)) before charlist := nil)

fun atoi(s,i) = 
     let val s = String.substring(s,i,size s - i)
     in  TilWord64.fromDecimalString s
     end

fun xtoi(s,i) = 
     let val s = String.substring(s,i,size s - i)
     in  TilWord64.fromHexString s
     end


fun mysynch (src, pos, parts) =
  let fun digit d = Char.ord d - Char.ord #"0"
      fun cvt digits = foldl (fn(d, n) => 10*n + digit d) 0 (explode digits)
      val r = SourceMap.resynch src
  in  case parts 
        of [col, line] => 
              r (pos, {fileName=NONE,      line=cvt line, column=SOME(cvt col)})
         | [file, col, line] => 
              r (pos, {fileName=SOME file, line=cvt line, column=SOME(cvt col)})
         | _ => impossible "text in (*#line...*)"
  end

fun has_quote s = let
      fun loop i = ((String.sub(s,i) = #"`") orelse loop (i+1))
	    handle _ => false
      in
	loop 0
      end

fun inc (ri as ref i) = (ri := i+1)
fun dec (ri as ref i) = (ri := i-1)
end (* end of user routines *)
exception LexError (* raised if illegal leaf action tried *)
structure Internal =
	struct

datatype yyfinstate = N of int
type statedata = {fin : yyfinstate list, trans: string}
(* transition & final state table *)
val tab = let
val s = [ 
 (0, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (1, 
"\024\024\024\024\024\024\024\024\024\099\102\024\099\101\024\024\
\\024\024\024\024\024\024\024\024\024\024\024\024\024\024\024\024\
\\099\041\098\095\041\041\041\090\067\066\064\041\063\041\060\041\
\\052\050\050\050\050\050\050\050\050\050\041\049\041\041\041\041\
\\041\043\043\043\043\043\043\043\043\043\043\043\043\043\043\043\
\\043\043\043\043\043\043\043\043\043\043\043\048\041\047\041\046\
\\045\043\043\043\043\043\043\043\043\043\043\043\043\043\043\043\
\\043\043\043\043\043\043\043\043\043\043\043\042\041\040\025\024\
\\023"
),
 (3, 
"\103\103\103\103\103\103\103\103\103\103\109\103\103\108\103\103\
\\103\103\103\103\103\103\103\103\103\103\103\103\103\103\103\103\
\\103\103\103\103\103\103\103\103\106\103\104\103\103\103\103\103\
\\103\103\103\103\103\103\103\103\103\103\103\103\103\103\103\103\
\\103\103\103\103\103\103\103\103\103\103\103\103\103\103\103\103\
\\103\103\103\103\103\103\103\103\103\103\103\103\103\103\103\103\
\\103\103\103\103\103\103\103\103\103\103\103\103\103\103\103\103\
\\103\103\103\103\103\103\103\103\103\103\103\103\103\103\103\103\
\\103"
),
 (5, 
"\132\132\132\132\132\132\132\132\132\132\135\132\132\133\132\132\
\\132\132\132\132\132\132\132\132\132\132\132\132\132\132\132\132\
\\110\111\131\111\111\111\111\111\111\111\111\111\111\111\111\111\
\\111\111\111\111\111\111\111\111\111\111\111\111\111\111\111\111\
\\111\111\111\111\111\111\111\111\111\111\111\111\111\111\111\111\
\\111\111\111\111\111\111\111\111\111\111\111\111\112\111\111\111\
\\111\111\111\111\111\111\111\111\111\111\111\111\111\111\111\111\
\\111\111\111\111\111\111\111\111\111\111\111\111\111\111\111\110\
\\110"
),
 (7, 
"\136\136\136\136\136\136\136\136\136\138\141\136\138\140\136\136\
\\136\136\136\136\136\136\136\136\136\136\136\136\136\136\136\136\
\\138\136\136\136\136\136\136\136\136\136\136\136\136\136\136\136\
\\136\136\136\136\136\136\136\136\136\136\136\136\136\136\136\136\
\\136\136\136\136\136\136\136\136\136\136\136\136\136\136\136\136\
\\136\136\136\136\136\136\136\136\136\136\136\136\137\136\136\136\
\\136\136\136\136\136\136\136\136\136\136\136\136\136\136\136\136\
\\136\136\136\136\136\136\136\136\136\136\136\136\136\136\136\136\
\\136"
),
 (9, 
"\142\142\142\142\142\142\142\142\142\142\148\142\142\147\142\142\
\\142\142\142\142\142\142\142\142\142\142\142\142\142\142\142\142\
\\142\142\142\142\142\142\142\142\142\142\142\142\142\142\142\142\
\\142\142\142\142\142\142\142\142\142\142\142\142\142\142\142\142\
\\142\142\142\142\142\142\142\142\142\142\142\142\142\142\142\142\
\\142\142\142\142\142\142\142\142\142\142\142\142\142\142\144\142\
\\143\142\142\142\142\142\142\142\142\142\142\142\142\142\142\142\
\\142\142\142\142\142\142\142\142\142\142\142\142\142\142\142\142\
\\142"
),
 (11, 
"\149\149\149\149\149\149\149\149\149\155\158\149\155\157\149\149\
\\149\149\149\149\149\149\149\149\149\149\149\149\149\149\149\149\
\\155\150\149\150\150\150\150\149\154\149\150\150\149\150\149\150\
\\149\149\149\149\149\149\149\149\149\149\150\149\150\150\150\150\
\\150\152\152\152\152\152\152\152\152\152\152\152\152\152\152\152\
\\152\152\152\152\152\152\152\152\152\152\152\149\150\149\150\149\
\\149\152\152\152\152\152\152\152\152\152\152\152\152\152\152\152\
\\152\152\152\152\152\152\152\152\152\152\152\149\150\149\150\149\
\\149"
),
 (13, 
"\159\159\159\159\159\159\159\159\159\159\000\159\159\159\159\159\
\\159\159\159\159\159\159\159\159\159\159\159\159\159\159\159\159\
\\159\159\159\159\159\159\159\159\159\159\162\159\159\159\159\159\
\\160\160\160\160\160\160\160\160\160\160\159\159\159\159\159\159\
\\159\159\159\159\159\159\159\159\159\159\159\159\159\159\159\159\
\\159\159\159\159\159\159\159\159\159\159\159\159\159\159\159\159\
\\159\159\159\159\159\159\159\159\159\159\159\159\159\159\159\159\
\\159\159\159\159\159\159\159\159\159\159\159\159\159\159\159\159\
\\159"
),
 (15, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\166\000\
\\165\164\164\164\164\164\164\164\164\164\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (17, 
"\159\159\159\159\159\159\159\159\159\170\000\159\170\159\159\159\
\\159\159\159\159\159\159\159\159\159\159\159\159\159\159\159\159\
\\170\159\169\159\159\159\159\159\159\159\167\159\159\159\159\159\
\\159\159\159\159\159\159\159\159\159\159\159\159\159\159\159\159\
\\159\159\159\159\159\159\159\159\159\159\159\159\159\159\159\159\
\\159\159\159\159\159\159\159\159\159\159\159\159\159\159\159\159\
\\159\159\159\159\159\159\159\159\159\159\159\159\159\159\159\159\
\\159\159\159\159\159\159\159\159\159\159\159\159\159\159\159\159\
\\159"
),
 (19, 
"\173\173\173\173\173\173\173\173\173\173\174\173\173\173\173\173\
\\173\173\173\173\173\173\173\173\173\173\173\173\173\173\173\173\
\\173\173\177\173\173\173\173\173\173\173\175\173\173\173\173\173\
\\173\173\173\173\173\173\173\173\173\173\173\173\173\173\173\173\
\\173\173\173\173\173\173\173\173\173\173\173\173\173\173\173\173\
\\173\173\173\173\173\173\173\173\173\173\173\173\173\173\173\173\
\\173\173\173\173\173\173\173\173\173\173\173\173\173\173\173\173\
\\173\173\173\173\173\173\173\173\173\173\173\173\173\173\173\173\
\\173"
),
 (21, 
"\180\180\180\180\180\180\180\180\180\185\188\180\185\187\180\180\
\\180\180\180\180\180\180\180\180\180\180\180\180\180\180\180\180\
\\185\180\180\180\180\180\180\180\180\180\183\180\180\180\180\180\
\\180\180\180\180\180\180\180\180\180\180\180\180\180\180\180\180\
\\180\181\181\181\181\181\181\181\181\181\181\181\181\181\181\181\
\\181\181\181\181\181\181\181\181\181\181\181\180\180\180\180\180\
\\180\181\181\181\181\181\181\181\181\181\181\181\181\181\181\181\
\\181\181\181\181\181\181\181\181\181\181\181\180\180\180\180\180\
\\180"
),
 (25, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\026\000\026\026\026\026\000\000\000\026\026\000\026\000\026\
\\037\028\028\028\028\028\028\028\028\028\026\000\026\026\026\026\
\\026\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\026\000\026\000\
\\027\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\026\000\026\000\
\\000"
),
 (26, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\026\000\026\026\026\026\000\000\000\026\026\000\026\000\026\
\\000\000\000\000\000\000\000\000\000\000\026\000\026\026\026\026\
\\026\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\026\000\026\000\
\\027\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\026\000\026\000\
\\000"
),
 (27, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\027\000\027\027\027\027\000\000\000\027\027\000\027\000\027\
\\000\000\000\000\000\000\000\000\000\000\027\000\027\027\027\027\
\\027\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\027\000\027\000\
\\027\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\027\000\027\000\
\\000"
),
 (28, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\032\000\
\\028\028\028\028\028\028\028\028\028\028\000\000\000\000\000\000\
\\000\000\000\000\000\029\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\029\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (29, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\031\031\031\031\031\031\031\031\031\031\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\030\000\
\\000"
),
 (30, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\031\031\031\031\031\031\031\031\031\031\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (32, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\033\033\033\033\033\033\033\033\033\033\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (33, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\033\033\033\033\033\033\033\033\033\033\000\000\000\000\000\000\
\\000\000\000\000\000\034\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\034\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (34, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\036\036\036\036\036\036\036\036\036\036\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\035\000\
\\000"
),
 (35, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\036\036\036\036\036\036\036\036\036\036\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (37, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\032\000\
\\028\028\028\028\028\028\028\028\028\028\000\000\000\000\000\000\
\\000\000\000\000\000\029\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\029\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\038\000\000\000\000\000\000\000\
\\000"
),
 (38, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\039\039\039\039\039\039\039\039\039\039\000\000\000\000\000\000\
\\000\039\039\039\039\039\039\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\039\039\039\039\039\039\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (43, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\044\000\000\000\000\000\000\000\000\
\\044\044\044\044\044\044\044\044\044\044\000\000\000\000\000\000\
\\000\044\044\044\044\044\044\044\044\044\044\044\044\044\044\044\
\\044\044\044\044\044\044\044\044\044\044\044\000\000\000\000\044\
\\000\044\044\044\044\044\044\044\044\044\044\044\044\044\044\044\
\\044\044\044\044\044\044\044\044\044\044\044\000\000\000\000\000\
\\000"
),
 (50, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\032\000\
\\051\051\051\051\051\051\051\051\051\051\000\000\000\000\000\000\
\\000\000\000\000\000\029\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\029\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (52, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\032\000\
\\059\059\059\059\059\059\059\059\059\059\000\000\000\000\000\000\
\\000\000\000\000\000\029\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\029\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\055\053\000\000\000\000\000\000\000\
\\000"
),
 (53, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\054\054\054\054\054\054\054\054\054\054\000\000\000\000\000\000\
\\000\054\054\054\054\054\054\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\054\054\054\054\054\054\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (55, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\058\058\058\058\058\058\058\058\058\058\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\056\000\000\000\000\000\000\000\
\\000"
),
 (56, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\057\057\057\057\057\057\057\057\057\057\000\000\000\000\000\000\
\\000\057\057\057\057\057\057\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\057\057\057\057\057\057\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (58, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\058\058\058\058\058\058\058\058\058\058\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (59, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\032\000\
\\059\059\059\059\059\059\059\059\059\059\000\000\000\000\000\000\
\\000\000\000\000\000\029\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\029\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (60, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\061\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (61, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\062\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (64, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\026\000\026\026\026\026\000\000\065\026\026\000\026\000\026\
\\000\000\000\000\000\000\000\000\000\000\026\000\026\026\026\026\
\\026\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\026\000\026\000\
\\027\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\026\000\026\000\
\\000"
),
 (67, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\068\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (68, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\084\069\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (69, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\070\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (70, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\078\071\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (71, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\072\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (72, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\073\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (73, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\074\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (74, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\075\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (75, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\076\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (76, 
"\000\000\000\000\000\000\000\000\000\077\000\000\077\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\077\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (78, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\079\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (79, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\080\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (80, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\081\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (81, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\082\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (82, 
"\000\000\000\000\000\000\000\000\000\083\000\000\083\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\083\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (84, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\085\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (85, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\086\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (86, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\087\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (87, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\088\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (88, 
"\000\000\000\000\000\000\000\000\000\089\000\000\089\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\089\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (90, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\094\000\000\000\000\000\000\000\000\
\\093\093\093\093\093\093\093\093\093\093\000\000\000\000\000\000\
\\000\091\091\091\091\091\091\091\091\091\091\091\091\091\091\091\
\\091\091\091\091\091\091\091\091\091\091\091\000\000\000\000\092\
\\000\091\091\091\091\091\091\091\091\091\091\091\091\091\091\091\
\\091\091\091\091\091\091\091\091\091\091\091\000\000\000\000\000\
\\000"
),
 (91, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\091\000\000\000\000\000\000\000\000\
\\091\091\091\091\091\091\091\091\091\091\000\000\000\000\000\000\
\\000\091\091\091\091\091\091\091\091\091\091\091\091\091\091\091\
\\091\091\091\091\091\091\091\091\091\091\091\000\000\000\000\091\
\\000\091\091\091\091\091\091\091\091\091\091\091\091\091\091\091\
\\091\091\091\091\091\091\091\091\091\091\091\000\000\000\000\000\
\\000"
),
 (92, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\091\091\091\091\091\091\091\091\091\091\091\091\091\091\091\
\\091\091\091\091\091\091\091\091\091\091\091\000\000\000\000\000\
\\000\091\091\091\091\091\091\091\091\091\091\091\091\091\091\091\
\\091\091\091\091\091\091\091\091\091\091\091\000\000\000\000\000\
\\000"
),
 (93, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\093\093\093\093\093\093\093\093\093\093\000\000\000\000\000\000\
\\000\091\091\091\091\091\091\091\091\091\091\091\091\091\091\091\
\\091\091\091\091\091\091\091\091\091\091\091\000\000\000\000\000\
\\000\091\091\091\091\091\091\091\091\091\091\091\091\091\091\091\
\\091\091\091\091\091\091\091\091\091\091\091\000\000\000\000\000\
\\000"
),
 (94, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\093\093\093\093\093\093\093\093\093\093\000\000\000\000\000\000\
\\000\091\091\091\091\091\091\091\091\091\091\091\091\091\091\091\
\\091\091\091\091\091\091\091\091\091\091\091\000\000\000\000\092\
\\000\091\091\091\091\091\091\091\091\091\091\091\091\091\091\091\
\\091\091\091\091\091\091\091\091\091\091\091\000\000\000\000\000\
\\000"
),
 (95, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\026\097\026\026\026\026\000\000\000\026\026\000\026\000\026\
\\000\000\000\000\000\000\000\000\000\000\026\000\026\026\026\026\
\\026\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\096\026\000\026\000\
\\027\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\026\000\026\000\
\\000"
),
 (99, 
"\000\000\000\000\000\000\000\000\000\100\000\000\100\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\100\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (101, 
"\000\000\000\000\000\000\000\000\000\000\102\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (104, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\105\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (106, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\107\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (108, 
"\000\000\000\000\000\000\000\000\000\000\109\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (111, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\111\000\111\111\111\111\111\111\111\111\111\111\111\111\111\
\\111\111\111\111\111\111\111\111\111\111\111\111\111\111\111\111\
\\111\111\111\111\111\111\111\111\111\111\111\111\111\111\111\111\
\\111\111\111\111\111\111\111\111\111\111\111\111\000\111\111\111\
\\111\111\111\111\111\111\111\111\111\111\111\111\111\111\111\111\
\\111\111\111\111\111\111\111\111\111\111\111\111\111\111\111\000\
\\000"
),
 (112, 
"\000\000\000\000\000\000\000\000\000\128\130\000\128\129\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\128\000\127\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\124\124\124\124\124\124\124\124\124\124\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\123\000\120\000\
\\000\119\118\000\000\000\117\000\000\000\000\000\000\000\116\000\
\\000\000\115\000\114\000\113\000\000\000\000\000\000\000\000\000\
\\000"
),
 (120, 
"\121\121\121\121\121\121\121\121\121\121\000\121\121\121\121\121\
\\121\121\121\121\121\121\121\121\121\121\121\121\121\121\121\121\
\\121\121\121\121\121\121\121\121\121\121\121\121\121\121\121\121\
\\121\121\121\121\121\121\121\121\121\121\121\121\121\121\121\121\
\\122\122\122\122\122\122\122\122\122\122\122\122\122\122\122\122\
\\122\122\122\122\122\122\122\122\122\122\122\122\122\122\122\122\
\\121\121\121\121\121\121\121\121\121\121\121\121\121\121\121\121\
\\121\121\121\121\121\121\121\121\121\121\121\121\121\121\121\121\
\\121"
),
 (124, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\125\125\125\125\125\125\125\125\125\125\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (125, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\126\126\126\126\126\126\126\126\126\126\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (128, 
"\000\000\000\000\000\000\000\000\000\128\000\000\128\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (129, 
"\000\000\000\000\000\000\000\000\000\000\130\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (133, 
"\000\000\000\000\000\000\000\000\000\000\134\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (138, 
"\000\000\000\000\000\000\000\000\000\139\000\000\139\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\139\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (140, 
"\000\000\000\000\000\000\000\000\000\000\141\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (144, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\146\000\
\\145\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (147, 
"\000\000\000\000\000\000\000\000\000\000\148\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (150, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\151\000\151\151\151\151\000\000\000\151\151\000\151\000\151\
\\000\000\000\000\000\000\000\000\000\000\151\000\151\151\151\151\
\\151\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\151\000\151\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\151\000\151\000\
\\000"
),
 (152, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\153\000\000\000\000\000\000\000\000\
\\153\153\153\153\153\153\153\153\153\153\000\000\000\000\000\000\
\\000\153\153\153\153\153\153\153\153\153\153\153\153\153\153\153\
\\153\153\153\153\153\153\153\153\153\153\153\000\000\000\000\153\
\\000\153\153\153\153\153\153\153\153\153\153\153\153\153\153\153\
\\153\153\153\153\153\153\153\153\153\153\153\000\000\000\000\000\
\\000"
),
 (155, 
"\000\000\000\000\000\000\000\000\000\156\000\000\156\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\156\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (157, 
"\000\000\000\000\000\000\000\000\000\000\158\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (160, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\161\161\161\161\161\161\161\161\161\161\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (162, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\163\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (164, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\164\164\164\164\164\164\164\164\164\164\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (165, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\165\164\164\164\164\164\164\164\164\164\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (167, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\168\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (170, 
"\000\000\000\000\000\000\000\000\000\172\000\000\172\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\172\000\171\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (173, 
"\174\174\174\174\174\174\174\174\174\174\174\174\174\174\174\174\
\\174\174\174\174\174\174\174\174\174\174\174\174\174\174\174\174\
\\174\174\000\174\174\174\174\174\174\174\174\174\174\174\174\174\
\\174\174\174\174\174\174\174\174\174\174\174\174\174\174\174\174\
\\174\174\174\174\174\174\174\174\174\174\174\174\174\174\174\174\
\\174\174\174\174\174\174\174\174\174\174\174\174\174\174\174\174\
\\174\174\174\174\174\174\174\174\174\174\174\174\174\174\174\174\
\\174\174\174\174\174\174\174\174\174\174\174\174\174\174\174\174\
\\174"
),
 (175, 
"\174\174\174\174\174\174\174\174\174\174\174\174\174\174\174\174\
\\174\174\174\174\174\174\174\174\174\174\174\174\174\174\174\174\
\\174\174\000\174\174\174\174\174\174\176\174\174\174\174\174\174\
\\174\174\174\174\174\174\174\174\174\174\174\174\174\174\174\174\
\\174\174\174\174\174\174\174\174\174\174\174\174\174\174\174\174\
\\174\174\174\174\174\174\174\174\174\174\174\174\174\174\174\174\
\\174\174\174\174\174\174\174\174\174\174\174\174\174\174\174\174\
\\174\174\174\174\174\174\174\174\174\174\174\174\174\174\174\174\
\\174"
),
 (177, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\178\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (178, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\179\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (181, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\182\000\000\000\000\000\000\000\000\
\\182\182\182\182\182\182\182\182\182\182\000\000\000\000\000\000\
\\000\182\182\182\182\182\182\182\182\182\182\182\182\182\182\182\
\\182\182\182\182\182\182\182\182\182\182\182\000\000\000\000\182\
\\000\182\182\182\182\182\182\182\182\182\182\182\182\182\182\182\
\\182\182\182\182\182\182\182\182\182\182\182\000\000\000\000\000\
\\000"
),
 (183, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\184\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (185, 
"\000\000\000\000\000\000\000\000\000\186\000\000\186\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\186\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (187, 
"\000\000\000\000\000\000\000\000\000\000\188\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
(0, "")]
fun f x = x 
val s = map f (rev (tl (rev s))) 
exception LexHackingError 
fun look ((j,x)::r, i) = if i = j then x else look(r, i) 
  | look ([], i) = raise LexHackingError
fun g {fin=x, trans=i} = {fin=x, trans=look(s,i)} 
in Vector.fromList(map g 
[{fin = [], trans = 0},
{fin = [(N 2)], trans = 1},
{fin = [(N 2)], trans = 1},
{fin = [], trans = 3},
{fin = [], trans = 3},
{fin = [], trans = 5},
{fin = [], trans = 5},
{fin = [(N 323)], trans = 7},
{fin = [(N 323)], trans = 7},
{fin = [], trans = 9},
{fin = [], trans = 9},
{fin = [(N 352)], trans = 11},
{fin = [(N 352)], trans = 11},
{fin = [], trans = 13},
{fin = [], trans = 13},
{fin = [(N 201)], trans = 15},
{fin = [(N 201)], trans = 15},
{fin = [], trans = 17},
{fin = [], trans = 17},
{fin = [(N 210)], trans = 19},
{fin = [(N 210)], trans = 19},
{fin = [(N 181)], trans = 21},
{fin = [(N 181)], trans = 21},
{fin = [(N 173),(N 175)], trans = 0},
{fin = [(N 175)], trans = 0},
{fin = [(N 56),(N 65),(N 175)], trans = 25},
{fin = [(N 56),(N 65)], trans = 26},
{fin = [(N 56)], trans = 27},
{fin = [(N 97)], trans = 28},
{fin = [], trans = 29},
{fin = [], trans = 30},
{fin = [(N 87)], trans = 30},
{fin = [], trans = 32},
{fin = [(N 87)], trans = 33},
{fin = [], trans = 34},
{fin = [], trans = 35},
{fin = [(N 87)], trans = 35},
{fin = [(N 97)], trans = 37},
{fin = [], trans = 38},
{fin = [(N 108)], trans = 38},
{fin = [(N 15),(N 175)], trans = 0},
{fin = [(N 56),(N 65),(N 175)], trans = 26},
{fin = [(N 13),(N 175)], trans = 0},
{fin = [(N 45),(N 175)], trans = 43},
{fin = [(N 45)], trans = 43},
{fin = [(N 56),(N 67),(N 175)], trans = 27},
{fin = [(N 9),(N 175)], trans = 0},
{fin = [(N 22),(N 175)], trans = 0},
{fin = [(N 17),(N 175)], trans = 0},
{fin = [(N 24),(N 175)], trans = 0},
{fin = [(N 90),(N 93),(N 175)], trans = 50},
{fin = [(N 90),(N 93)], trans = 50},
{fin = [(N 93),(N 175)], trans = 52},
{fin = [], trans = 53},
{fin = [(N 102)], trans = 53},
{fin = [], trans = 55},
{fin = [], trans = 56},
{fin = [(N 119)], trans = 56},
{fin = [(N 113)], trans = 58},
{fin = [(N 93)], trans = 59},
{fin = [(N 30),(N 175)], trans = 60},
{fin = [], trans = 61},
{fin = [(N 34)], trans = 0},
{fin = [(N 11),(N 175)], trans = 0},
{fin = [(N 56),(N 65),(N 175)], trans = 64},
{fin = [(N 171)], trans = 0},
{fin = [(N 28),(N 175)], trans = 0},
{fin = [(N 26),(N 175)], trans = 67},
{fin = [(N 168)], trans = 68},
{fin = [], trans = 69},
{fin = [], trans = 70},
{fin = [], trans = 71},
{fin = [], trans = 72},
{fin = [], trans = 73},
{fin = [], trans = 74},
{fin = [], trans = 75},
{fin = [], trans = 76},
{fin = [(N 165)], trans = 76},
{fin = [], trans = 78},
{fin = [], trans = 79},
{fin = [], trans = 80},
{fin = [], trans = 81},
{fin = [], trans = 82},
{fin = [(N 150)], trans = 82},
{fin = [], trans = 84},
{fin = [], trans = 85},
{fin = [], trans = 86},
{fin = [], trans = 87},
{fin = [], trans = 88},
{fin = [(N 136)], trans = 88},
{fin = [(N 175)], trans = 90},
{fin = [(N 42)], trans = 91},
{fin = [], trans = 92},
{fin = [], trans = 93},
{fin = [], trans = 94},
{fin = [(N 56),(N 65),(N 175)], trans = 95},
{fin = [(N 20)], trans = 0},
{fin = [(N 124)], trans = 0},
{fin = [(N 121),(N 175)], trans = 0},
{fin = [(N 2),(N 175)], trans = 99},
{fin = [(N 2)], trans = 99},
{fin = [(N 7),(N 175)], trans = 101},
{fin = [(N 7)], trans = 0},
{fin = [(N 232)], trans = 0},
{fin = [(N 232)], trans = 104},
{fin = [(N 230)], trans = 0},
{fin = [(N 232)], trans = 106},
{fin = [(N 222)], trans = 0},
{fin = [(N 227),(N 232)], trans = 108},
{fin = [(N 227)], trans = 0},
{fin = [(N 315)], trans = 0},
{fin = [(N 315)], trans = 111},
{fin = [(N 249),(N 291),(N 315)], trans = 112},
{fin = [(N 270)], trans = 0},
{fin = [(N 267)], trans = 0},
{fin = [(N 264)], trans = 0},
{fin = [(N 261)], trans = 0},
{fin = [(N 258)], trans = 0},
{fin = [(N 255)], trans = 0},
{fin = [(N 252)], trans = 0},
{fin = [], trans = 120},
{fin = [(N 284)], trans = 0},
{fin = [(N 280),(N 284)], trans = 0},
{fin = [(N 273)], trans = 0},
{fin = [], trans = 124},
{fin = [], trans = 125},
{fin = [(N 289)], trans = 0},
{fin = [(N 276)], trans = 0},
{fin = [(N 249)], trans = 128},
{fin = [(N 245)], trans = 129},
{fin = [(N 245)], trans = 0},
{fin = [(N 234),(N 315)], trans = 0},
{fin = [(N 293),(N 315)], trans = 0},
{fin = [(N 239),(N 293),(N 315)], trans = 133},
{fin = [(N 239)], trans = 0},
{fin = [(N 239),(N 293)], trans = 0},
{fin = [(N 327)], trans = 0},
{fin = [(N 325),(N 327)], trans = 0},
{fin = [(N 323),(N 327)], trans = 138},
{fin = [(N 323)], trans = 138},
{fin = [(N 320),(N 327)], trans = 140},
{fin = [(N 320)], trans = 0},
{fin = [(N 344)], trans = 0},
{fin = [(N 337),(N 344)], trans = 0},
{fin = [(N 335),(N 344)], trans = 144},
{fin = [(N 330)], trans = 0},
{fin = [(N 333)], trans = 0},
{fin = [(N 342),(N 344)], trans = 147},
{fin = [(N 342)], trans = 0},
{fin = [(N 368)], trans = 0},
{fin = [(N 364),(N 368)], trans = 150},
{fin = [(N 364)], trans = 150},
{fin = [(N 355),(N 368)], trans = 152},
{fin = [(N 355)], trans = 152},
{fin = [(N 366),(N 368)], trans = 0},
{fin = [(N 352),(N 368)], trans = 155},
{fin = [(N 352)], trans = 155},
{fin = [(N 349),(N 368)], trans = 157},
{fin = [(N 349)], trans = 0},
{fin = [(N 219)], trans = 0},
{fin = [(N 194),(N 219)], trans = 160},
{fin = [(N 194)], trans = 160},
{fin = [(N 219)], trans = 162},
{fin = [(N 217)], trans = 0},
{fin = [(N 199)], trans = 164},
{fin = [(N 199),(N 201)], trans = 165},
{fin = [(N 196)], trans = 0},
{fin = [(N 219)], trans = 167},
{fin = [(N 204),(N 217)], trans = 0},
{fin = [(N 208),(N 219)], trans = 0},
{fin = [(N 219)], trans = 170},
{fin = [(N 208)], trans = 0},
{fin = [], trans = 170},
{fin = [(N 210),(N 219)], trans = 173},
{fin = [(N 210)], trans = 173},
{fin = [(N 210),(N 219)], trans = 175},
{fin = [(N 210),(N 217)], trans = 173},
{fin = [(N 219)], trans = 177},
{fin = [], trans = 178},
{fin = [(N 214)], trans = 0},
{fin = [(N 191)], trans = 0},
{fin = [(N 178),(N 191)], trans = 181},
{fin = [(N 178)], trans = 181},
{fin = [(N 191)], trans = 183},
{fin = [(N 189)], trans = 0},
{fin = [(N 181),(N 191)], trans = 185},
{fin = [(N 181)], trans = 185},
{fin = [(N 186),(N 191)], trans = 187},
{fin = [(N 186)], trans = 0}])
end
structure StartStates =
	struct
	datatype yystartstate = STARTSTATE of int

(* start state definitions *)

val A = STARTSTATE 3;
val AQ = STARTSTATE 11;
val F = STARTSTATE 7;
val IMP = STARTSTATE 21;
val INITIAL = STARTSTATE 1;
val L = STARTSTATE 13;
val LL = STARTSTATE 15;
val LLC = STARTSTATE 17;
val LLCQ = STARTSTATE 19;
val Q = STARTSTATE 9;
val S = STARTSTATE 5;

end
type result = UserDeclarations.lexresult
	exception LexerError (* raised if illegal leaf action tried *)
end

fun makeLexer yyinput =
let	val yygone0=1
	val yyb = ref "\n" 		(* buffer *)
	val yybl = ref 1		(*buffer length *)
	val yybufpos = ref 1		(* location of next character to use *)
	val yygone = ref yygone0	(* position in file of beginning of buffer *)
	val yydone = ref false		(* eof found yet? *)
	val yybegin = ref 1		(*Current 'start state' for lexer *)

	val YYBEGIN = fn (Internal.StartStates.STARTSTATE x) =>
		 yybegin := x

fun lex (yyarg as ({comLevel,sourceMap,err,charlist,stringstart,stringtype,brack_stack})) =
let fun continue() : Internal.result = 
  let fun scan (s,AcceptingLeaves : Internal.yyfinstate list list,l,i0) =
	let fun action (i,nil) = raise LexError
	| action (i,nil::l) = action (i-1,l)
	| action (i,(node::acts)::l) =
		case node of
		    Internal.N yyk => 
			(let val yytext = substring(!yyb,i0,i-i0)
			     val yypos = i0+ !yygone
			fun REJECT() = action(i,acts::l)
			open UserDeclarations Internal.StartStates
 in (yybufpos := i; case yyk of 

			(* Application actions *)

  102 => (Tokens.INT0(xtoi(yytext, 2),yypos,yypos+size yytext))
| 108 => (Tokens.INT0(TilWord64.snegate(xtoi(yytext, 3)),yypos,yypos+size yytext))
| 11 => (Tokens.COMMA(yypos,yypos+1))
| 113 => (Tokens.WORD(atoi(yytext, 2),yypos,yypos+size yytext))
| 119 => (Tokens.WORD(xtoi(yytext, 3),yypos,yypos+size yytext))
| 121 => (charlist := [""]; stringstart := yypos;
                    stringtype := true; YYBEGIN S; continue())
| 124 => (charlist := [""]; stringstart := yypos;
                    stringtype := false; YYBEGIN S; continue())
| 13 => (Tokens.LBRACE(yypos,yypos+1))
| 136 => (YYBEGIN L; stringstart := yypos; comLevel := 1; continue())
| 15 => (Tokens.RBRACE(yypos,yypos+1))
| 150 => (YYBEGIN IMP; comLevel := 1; Tokens.IMPORT(yypos, yypos+9))
| 165 => (YYBEGIN IMP; comLevel := 1; Tokens.INCLUDE(yypos, yypos+10))
| 168 => (YYBEGIN A; stringstart := yypos; comLevel := 1; continue())
| 17 => (Tokens.LBRACKET(yypos,yypos+1))
| 171 => (err (yypos,yypos+1) COMPLAIN "unmatched close comment"
		        nullErrorBody;
		    continue())
| 173 => (err (yypos,yypos) COMPLAIN "non-Ascii character"
		        nullErrorBody;
		    continue())
| 175 => (err (yypos,yypos) COMPLAIN "illegal token" nullErrorBody;
		    continue())
| 178 => (Tokens.STRING(yytext, yypos, yypos+size yytext))
| 181 => (continue())
| 186 => (SourceMap.newline sourceMap yypos; continue())
| 189 => (YYBEGIN INITIAL; comLevel := 0; continue())
| 191 => (err (yypos, yypos+1) COMPLAIN
			      "ill-formed (*$import...*) or (*$include...*)" nullErrorBody
		              ; YYBEGIN INITIAL; comLevel := 0; continue())
| 194 => (YYBEGIN LL; charlist := [yytext]; continue())
| 196 => ((* cheat: take n > 0 dots *) continue())
| 199 => (YYBEGIN LLC; addString(charlist, yytext); continue())
| 2 => (continue())
| 20 => (Tokens.VECTORSTART(yypos,yypos+1))
| 201 => (YYBEGIN LLC; addString(charlist, "1");    continue()
		(* note hack, since ml-lex chokes on the empty string for 0* *))
| 204 => (YYBEGIN INITIAL; mysynch(sourceMap, yypos+2, !charlist); 
		              comLevel := 0; charlist := []; continue())
| 208 => (YYBEGIN LLCQ; continue())
| 210 => (addString(charlist, yytext); continue())
| 214 => (YYBEGIN INITIAL; mysynch(sourceMap, yypos+3, !charlist); 
		              comLevel := 0; charlist := []; continue())
| 217 => (err (!stringstart, yypos+1) WARN 
                       "ill-formed (*#line...*) taken as comment" nullErrorBody;
                     YYBEGIN INITIAL; comLevel := 0; charlist := []; continue())
| 219 => (err (!stringstart, yypos+1) WARN 
                       "ill-formed (*#line...*) taken as comment" nullErrorBody;
                     YYBEGIN A; continue())
| 22 => (Tokens.RBRACKET(yypos,yypos+1))
| 222 => (inc comLevel; continue())
| 227 => (SourceMap.newline sourceMap yypos; continue())
| 230 => (dec comLevel; if !comLevel=0 then YYBEGIN INITIAL else (); continue())
| 232 => (continue())
| 234 => (let val s = makeString charlist
                        val s = if size s <> 1 andalso not(!stringtype)
                                 then (err(!stringstart,yypos) COMPLAIN
                                      "character constant not length 1"
                                       nullErrorBody;
                                       substring(s^"x",0,1))
                                 else s
                        val t = (s,!stringstart,yypos+1)
                    in YYBEGIN INITIAL;
                       if !stringtype then Tokens.STRING t else Tokens.CHAR t
                    end)
| 239 => (err (!stringstart,yypos) COMPLAIN "unclosed string"
		        nullErrorBody;
		    SourceMap.newline sourceMap yypos;
		    YYBEGIN INITIAL; Tokens.STRING(makeString charlist,!stringstart,yypos))
| 24 => (Tokens.SEMICOLON(yypos,yypos+1))
| 245 => (SourceMap.newline sourceMap (yypos+1);
		    YYBEGIN F; continue())
| 249 => (YYBEGIN F; continue())
| 252 => (addString(charlist, "\007"); continue())
| 255 => (addString(charlist, "\008"); continue())
| 258 => (addString(charlist, "\012"); continue())
| 26 => (if (null(!brack_stack))
                    then ()
                    else inc (hd (!brack_stack));
                    Tokens.LPAREN(yypos,yypos+1))
| 261 => (addString(charlist, "\010"); continue())
| 264 => (addString(charlist, "\013"); continue())
| 267 => (addString(charlist, "\009"); continue())
| 270 => (addString(charlist, "\011"); continue())
| 273 => (addString(charlist, "\\"); continue())
| 276 => (addString(charlist, "\""); continue())
| 28 => (if (null(!brack_stack))
                    then ()
                    else if (!(hd (!brack_stack)) = 1)
                         then ( brack_stack := tl (!brack_stack);
                                charlist := [];
                                YYBEGIN Q)
                         else dec (hd (!brack_stack));
                    Tokens.RPAREN(yypos,yypos+1))
| 280 => (addChar(charlist,
			Char.chr(Char.ord(String.sub(yytext,2))-Char.ord #"@"));
		    continue())
| 284 => (err(yypos,yypos+2) COMPLAIN "illegal control escape; must be one of \
	  \@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_" nullErrorBody;
	 continue())
| 289 => (let val x = Char.ord(String.sub(yytext,1))*100
	     +Char.ord(String.sub(yytext,2))*10
	     +Char.ord(String.sub(yytext,3))
	     -((Char.ord #"0")*111)
  in (if x>255
      then err (yypos,yypos+4) COMPLAIN "illegal ascii escape" nullErrorBody
      else addChar(charlist, Char.chr x);
      continue())
  end)
| 291 => (err (yypos,yypos+1) COMPLAIN "illegal string escape"
		        nullErrorBody; 
		    continue())
| 293 => (err (yypos,yypos+1) COMPLAIN "illegal non-printing character in string" nullErrorBody;
                    continue())
| 30 => (Tokens.DOT(yypos,yypos+1))
| 315 => (addString(charlist,yytext); continue())
| 320 => (SourceMap.newline sourceMap yypos; continue())
| 323 => (continue())
| 325 => (YYBEGIN S; stringstart := yypos; continue())
| 327 => (err (!stringstart,yypos) COMPLAIN "unclosed string"
		        nullErrorBody; 
		    YYBEGIN INITIAL; Tokens.STRING(makeString charlist,!stringstart,yypos+1))
| 330 => (addString(charlist, "`"); continue())
| 333 => (addString(charlist, "^"); continue())
| 335 => (YYBEGIN AQ;
                    let val x = makeString charlist
                    in
                    Tokens.OBJL(x,yypos,yypos+(size x))
                    end)
| 337 => ((* a closing quote *)
                    YYBEGIN INITIAL;
                    let val x = makeString charlist
                    in
                    Tokens.ENDQ(x,yypos,yypos+(size x))
                    end)
| 34 => (Tokens.DOTDOTDOT(yypos,yypos+3))
| 342 => (SourceMap.newline sourceMap yypos; addString(charlist,"\n"); continue())
| 344 => (addString(charlist,yytext); continue())
| 349 => (SourceMap.newline sourceMap yypos; continue())
| 352 => (continue())
| 355 => (YYBEGIN Q; 
                    let val hash = StrgHash.hashString yytext
                    in
                    Tokens.AQID(FastSymbol.rawSymbol(hash,yytext),
				yypos,yypos+(size yytext))
                    end)
| 364 => (YYBEGIN Q; 
                    let val hash = StrgHash.hashString yytext
                    in
                    Tokens.AQID(FastSymbol.rawSymbol(hash,yytext),
				yypos,yypos+(size yytext))
                    end)
| 366 => (YYBEGIN INITIAL;
                    brack_stack := ((ref 1)::(!brack_stack));
                    Tokens.LPAREN(yypos,yypos+1))
| 368 => (err (yypos,yypos+1) COMPLAIN
		       ("ml lexer: bad character after antiquote "^yytext)
		       nullErrorBody;
                    Tokens.AQID(FastSymbol.rawSymbol(0,""),yypos,yypos))
| 42 => (TokTable.checkTyvar(yytext,yypos))
| 45 => (TokTable.checkToken(yytext,yypos))
| 56 => (if (!Control.quotation)
                            then if (has_quote yytext)
                                 then REJECT()
                                 else TokTable.checkToken(yytext,yypos)
                            else TokTable.checkToken(yytext,yypos))
| 65 => (TokTable.checkToken(yytext,yypos))
| 67 => (if (!Control.quotation)
                            then (YYBEGIN Q;
                                  charlist := [];
                                  Tokens.BEGINQ(yypos,yypos+1))
                            else (err(yypos, yypos+1)
                                     COMPLAIN "quotation implementation error"
				     nullErrorBody;
                                  Tokens.BEGINQ(yypos,yypos+1)))
| 7 => (SourceMap.newline sourceMap yypos; continue())
| 87 => (Tokens.REAL(yytext,yypos,yypos+size yytext))
| 9 => (Tokens.WILD(yypos,yypos+1))
| 90 => (Tokens.INT(atoi(yytext, 0),yypos,yypos+size yytext))
| 93 => (Tokens.INT0(atoi(yytext, 0),yypos,yypos+size yytext))
| 97 => (Tokens.INT0(atoi(yytext, 0),yypos,yypos+size yytext))
| _ => raise Internal.LexerError

		) end )

	val {fin,trans} = Vector.sub(Internal.tab, s)
	val NewAcceptingLeaves = fin::AcceptingLeaves
	in if l = !yybl then
	     if trans = #trans(Vector.sub(Internal.tab,0))
	       then action(l,NewAcceptingLeaves
) else	    let val newchars= if !yydone then "" else yyinput 1024
	    in if (size newchars)=0
		  then (yydone := true;
		        if (l=i0) then UserDeclarations.eof yyarg
		                  else action(l,NewAcceptingLeaves))
		  else (if i0=l then yyb := newchars
		     else yyb := substring(!yyb,i0,l-i0)^newchars;
		     yygone := !yygone+i0;
		     yybl := size (!yyb);
		     scan (s,AcceptingLeaves,l-i0,0))
	    end
	  else let val NewChar = Char.ord(String.sub(!yyb,l))
		val NewState = if NewChar<128 then Char.ord(String.sub(trans,NewChar)) else Char.ord(String.sub(trans,128))
		in if NewState=0 then action(l,NewAcceptingLeaves)
		else scan(NewState,NewAcceptingLeaves,l+1,i0)
	end
	end
(*
	val start= if substring(!yyb,!yybufpos-1,1)="\n"
then !yybegin+1 else !yybegin
*)
	in scan(!yybegin (* start *),nil,!yybufpos,!yybufpos)
    end
in continue end
  in lex
  end
end
