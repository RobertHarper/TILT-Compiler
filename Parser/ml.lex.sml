functor MLLexFun(structure Tokens : ML_TOKENS)=
   struct
    structure UserDeclarations =
      struct
(* ml.lex
 *
 * Copyright 1989 by AT&T Bell Laboratories
 *)

open ErrorMsg;

structure TokTable = TokenTable(Tokens);
type svalue = Tokens.svalue
type pos = int
type lexresult = (svalue,pos) Tokens.token
type lexarg = {comLevel : int ref,
	       sourceMap : SourceMap.sourcemap,
	       charlist : string list ref,
	       stringtype : bool ref,
	       stringstart : int ref, (* start of current string or comment*)
               brack_stack : int ref list ref, (* for frags *)
	       err : pos*pos -> ErrorMsg.complainer}
type arg = lexarg
type ('a,'b) token = ('a,'b) Tokens.token
val eof = fn ({comLevel,err,stringstart,stringtype,sourceMap,
               charlist, brack_stack}:lexarg) =>
	   let val pos = Int.max(!stringstart+2, SourceMap.lastChange sourceMap)
	    in if !comLevel>0 then err (!stringstart,pos) COMPLAIN
					 "unclosed comment" nullErrorBody
		  	      else ();
	       Tokens.EOF(pos,pos)
	   end
fun addString (charlist,s:string) = charlist := s :: (!charlist)
fun addChar (charlist, c:char) = addString(charlist, String.str c)
fun makeString charlist = (concat(rev(!charlist)) before charlist := nil)

fun atoi(err,p,s,i) =
     let val s = String.substring(s,i,size s - i)
     in  TilWord64.fromDecimalString s
	 handle Overflow =>
	     (err(p,p+size s) COMPLAIN "decimal constant too large" nullErrorBody;
	      TilWord64.zero)
     end

fun xtoi(err,p,s,i) =
     let val s = String.substring(s,i,size s - i)
     in  TilWord64.fromHexString s
	 handle Overflow =>
	     (err(p,p+size s) COMPLAIN "hex constant too large" nullErrorBody;
	      TilWord64.zero)
     end

fun mysynch (src, pos, parts) =
  let fun digit d = Char.ord d - Char.ord #"0"
      fun cvt digits = foldl (fn(d, n) => 10*n + digit d) 0 (explode digits)
      val r = SourceMap.resynch src
  in  case parts
        of [col, line] =>
              r (pos, {fileName=NONE,      line=cvt line, column=SOME(cvt col)})
         | [file, col, line] =>
              r (pos, {fileName=SOME file, line=cvt line, column=SOME(cvt col)})
         | _ => impossible "text in (*#line...*)"
  end

fun has_quote s = let
      fun loop i = ((String.sub(s,i) = #"`") orelse loop (i+1))
	    handle _ => false
      in
	loop 0
      end

fun inc (ri as ref i) = (ri := i+1)
fun dec (ri as ref i) = (ri := i-1)
end (* end of user routines *)
exception LexError (* raised if illegal leaf action tried *)
structure Internal =
	struct

datatype yyfinstate = N of int
type statedata = {fin : yyfinstate list, trans: string}
(* transition & final state table *)
val tab = let
val s = [ 
 (0, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (1, 
"\022\022\022\022\022\022\022\022\022\082\085\022\082\084\022\022\
\\022\022\022\022\022\022\022\022\022\022\022\022\022\022\022\022\
\\082\039\081\078\039\039\039\073\065\064\062\039\061\039\058\039\
\\050\048\048\048\048\048\048\048\048\048\039\047\039\039\039\039\
\\039\041\041\041\041\041\041\041\041\041\041\041\041\041\041\041\
\\041\041\041\041\041\041\041\041\041\041\041\046\039\045\039\044\
\\043\041\041\041\041\041\041\041\041\041\041\041\041\041\041\041\
\\041\041\041\041\041\041\041\041\041\041\041\040\039\038\023\022\
\\021"
),
 (3, 
"\086\086\086\086\086\086\086\086\086\086\092\086\086\091\086\086\
\\086\086\086\086\086\086\086\086\086\086\086\086\086\086\086\086\
\\086\086\086\086\086\086\086\086\089\086\087\086\086\086\086\086\
\\086\086\086\086\086\086\086\086\086\086\086\086\086\086\086\086\
\\086\086\086\086\086\086\086\086\086\086\086\086\086\086\086\086\
\\086\086\086\086\086\086\086\086\086\086\086\086\086\086\086\086\
\\086\086\086\086\086\086\086\086\086\086\086\086\086\086\086\086\
\\086\086\086\086\086\086\086\086\086\086\086\086\086\086\086\086\
\\086"
),
 (5, 
"\115\115\115\115\115\115\115\115\115\115\118\115\115\116\115\115\
\\115\115\115\115\115\115\115\115\115\115\115\115\115\115\115\115\
\\093\094\114\094\094\094\094\094\094\094\094\094\094\094\094\094\
\\094\094\094\094\094\094\094\094\094\094\094\094\094\094\094\094\
\\094\094\094\094\094\094\094\094\094\094\094\094\094\094\094\094\
\\094\094\094\094\094\094\094\094\094\094\094\094\095\094\094\094\
\\094\094\094\094\094\094\094\094\094\094\094\094\094\094\094\094\
\\094\094\094\094\094\094\094\094\094\094\094\094\094\094\094\093\
\\093"
),
 (7, 
"\119\119\119\119\119\119\119\119\119\121\124\119\121\123\119\119\
\\119\119\119\119\119\119\119\119\119\119\119\119\119\119\119\119\
\\121\119\119\119\119\119\119\119\119\119\119\119\119\119\119\119\
\\119\119\119\119\119\119\119\119\119\119\119\119\119\119\119\119\
\\119\119\119\119\119\119\119\119\119\119\119\119\119\119\119\119\
\\119\119\119\119\119\119\119\119\119\119\119\119\120\119\119\119\
\\119\119\119\119\119\119\119\119\119\119\119\119\119\119\119\119\
\\119\119\119\119\119\119\119\119\119\119\119\119\119\119\119\119\
\\119"
),
 (9, 
"\125\125\125\125\125\125\125\125\125\125\131\125\125\130\125\125\
\\125\125\125\125\125\125\125\125\125\125\125\125\125\125\125\125\
\\125\125\125\125\125\125\125\125\125\125\125\125\125\125\125\125\
\\125\125\125\125\125\125\125\125\125\125\125\125\125\125\125\125\
\\125\125\125\125\125\125\125\125\125\125\125\125\125\125\125\125\
\\125\125\125\125\125\125\125\125\125\125\125\125\125\125\127\125\
\\126\125\125\125\125\125\125\125\125\125\125\125\125\125\125\125\
\\125\125\125\125\125\125\125\125\125\125\125\125\125\125\125\125\
\\125"
),
 (11, 
"\132\132\132\132\132\132\132\132\132\138\141\132\138\140\132\132\
\\132\132\132\132\132\132\132\132\132\132\132\132\132\132\132\132\
\\138\133\132\133\133\133\133\132\137\132\133\133\132\133\132\133\
\\132\132\132\132\132\132\132\132\132\132\133\132\133\133\133\133\
\\133\135\135\135\135\135\135\135\135\135\135\135\135\135\135\135\
\\135\135\135\135\135\135\135\135\135\135\135\132\133\132\133\132\
\\132\135\135\135\135\135\135\135\135\135\135\135\135\135\135\135\
\\135\135\135\135\135\135\135\135\135\135\135\132\133\132\133\132\
\\132"
),
 (13, 
"\142\142\142\142\142\142\142\142\142\142\000\142\142\142\142\142\
\\142\142\142\142\142\142\142\142\142\142\142\142\142\142\142\142\
\\142\142\142\142\142\142\142\142\142\142\145\142\142\142\142\142\
\\143\143\143\143\143\143\143\143\143\143\142\142\142\142\142\142\
\\142\142\142\142\142\142\142\142\142\142\142\142\142\142\142\142\
\\142\142\142\142\142\142\142\142\142\142\142\142\142\142\142\142\
\\142\142\142\142\142\142\142\142\142\142\142\142\142\142\142\142\
\\142\142\142\142\142\142\142\142\142\142\142\142\142\142\142\142\
\\142"
),
 (15, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\149\000\
\\148\147\147\147\147\147\147\147\147\147\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (17, 
"\142\142\142\142\142\142\142\142\142\153\000\142\153\142\142\142\
\\142\142\142\142\142\142\142\142\142\142\142\142\142\142\142\142\
\\153\142\152\142\142\142\142\142\142\142\150\142\142\142\142\142\
\\142\142\142\142\142\142\142\142\142\142\142\142\142\142\142\142\
\\142\142\142\142\142\142\142\142\142\142\142\142\142\142\142\142\
\\142\142\142\142\142\142\142\142\142\142\142\142\142\142\142\142\
\\142\142\142\142\142\142\142\142\142\142\142\142\142\142\142\142\
\\142\142\142\142\142\142\142\142\142\142\142\142\142\142\142\142\
\\142"
),
 (19, 
"\156\156\156\156\156\156\156\156\156\156\157\156\156\156\156\156\
\\156\156\156\156\156\156\156\156\156\156\156\156\156\156\156\156\
\\156\156\160\156\156\156\156\156\156\156\158\156\156\156\156\156\
\\156\156\156\156\156\156\156\156\156\156\156\156\156\156\156\156\
\\156\156\156\156\156\156\156\156\156\156\156\156\156\156\156\156\
\\156\156\156\156\156\156\156\156\156\156\156\156\156\156\156\156\
\\156\156\156\156\156\156\156\156\156\156\156\156\156\156\156\156\
\\156\156\156\156\156\156\156\156\156\156\156\156\156\156\156\156\
\\156"
),
 (23, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\024\000\024\024\024\024\000\000\000\024\024\000\024\000\024\
\\035\026\026\026\026\026\026\026\026\026\024\000\024\024\024\024\
\\024\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\024\000\024\000\
\\025\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\024\000\024\000\
\\000"
),
 (24, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\024\000\024\024\024\024\000\000\000\024\024\000\024\000\024\
\\000\000\000\000\000\000\000\000\000\000\024\000\024\024\024\024\
\\024\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\024\000\024\000\
\\025\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\024\000\024\000\
\\000"
),
 (25, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\025\000\025\025\025\025\000\000\000\025\025\000\025\000\025\
\\000\000\000\000\000\000\000\000\000\000\025\000\025\025\025\025\
\\025\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\025\000\025\000\
\\025\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\025\000\025\000\
\\000"
),
 (26, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\030\000\
\\026\026\026\026\026\026\026\026\026\026\000\000\000\000\000\000\
\\000\000\000\000\000\027\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\027\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (27, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\029\029\029\029\029\029\029\029\029\029\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\028\000\
\\000"
),
 (28, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\029\029\029\029\029\029\029\029\029\029\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (30, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\031\031\031\031\031\031\031\031\031\031\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (31, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\031\031\031\031\031\031\031\031\031\031\000\000\000\000\000\000\
\\000\000\000\000\000\032\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\032\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (32, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\034\034\034\034\034\034\034\034\034\034\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\033\000\
\\000"
),
 (33, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\034\034\034\034\034\034\034\034\034\034\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (35, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\030\000\
\\026\026\026\026\026\026\026\026\026\026\000\000\000\000\000\000\
\\000\000\000\000\000\027\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\027\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\036\000\000\000\000\000\000\000\
\\000"
),
 (36, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\037\037\037\037\037\037\037\037\037\037\000\000\000\000\000\000\
\\000\037\037\037\037\037\037\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\037\037\037\037\037\037\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (41, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\042\000\000\000\000\000\000\000\000\
\\042\042\042\042\042\042\042\042\042\042\000\000\000\000\000\000\
\\000\042\042\042\042\042\042\042\042\042\042\042\042\042\042\042\
\\042\042\042\042\042\042\042\042\042\042\042\000\000\000\000\042\
\\000\042\042\042\042\042\042\042\042\042\042\042\042\042\042\042\
\\042\042\042\042\042\042\042\042\042\042\042\000\000\000\000\000\
\\000"
),
 (48, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\030\000\
\\049\049\049\049\049\049\049\049\049\049\000\000\000\000\000\000\
\\000\000\000\000\000\027\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\027\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (50, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\030\000\
\\057\057\057\057\057\057\057\057\057\057\000\000\000\000\000\000\
\\000\000\000\000\000\027\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\027\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\053\051\000\000\000\000\000\000\000\
\\000"
),
 (51, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\052\052\052\052\052\052\052\052\052\052\000\000\000\000\000\000\
\\000\052\052\052\052\052\052\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\052\052\052\052\052\052\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (53, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\056\056\056\056\056\056\056\056\056\056\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\054\000\000\000\000\000\000\000\
\\000"
),
 (54, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\055\055\055\055\055\055\055\055\055\055\000\000\000\000\000\000\
\\000\055\055\055\055\055\055\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\055\055\055\055\055\055\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (56, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\056\056\056\056\056\056\056\056\056\056\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (57, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\030\000\
\\057\057\057\057\057\057\057\057\057\057\000\000\000\000\000\000\
\\000\000\000\000\000\027\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\027\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (58, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\059\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (59, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\060\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (62, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\024\000\024\024\024\024\000\000\063\024\024\000\024\000\024\
\\000\000\000\000\000\000\000\000\000\000\024\000\024\024\024\024\
\\024\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\024\000\024\000\
\\025\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\024\000\024\000\
\\000"
),
 (65, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\066\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (66, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\067\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (67, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\068\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (68, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\069\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (69, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\070\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (70, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\071\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (71, 
"\000\000\000\000\000\000\000\000\000\072\000\000\072\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\072\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (73, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\077\000\000\000\000\000\000\000\000\
\\076\076\076\076\076\076\076\076\076\076\000\000\000\000\000\000\
\\000\074\074\074\074\074\074\074\074\074\074\074\074\074\074\074\
\\074\074\074\074\074\074\074\074\074\074\074\000\000\000\000\075\
\\000\074\074\074\074\074\074\074\074\074\074\074\074\074\074\074\
\\074\074\074\074\074\074\074\074\074\074\074\000\000\000\000\000\
\\000"
),
 (74, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\074\000\000\000\000\000\000\000\000\
\\074\074\074\074\074\074\074\074\074\074\000\000\000\000\000\000\
\\000\074\074\074\074\074\074\074\074\074\074\074\074\074\074\074\
\\074\074\074\074\074\074\074\074\074\074\074\000\000\000\000\074\
\\000\074\074\074\074\074\074\074\074\074\074\074\074\074\074\074\
\\074\074\074\074\074\074\074\074\074\074\074\000\000\000\000\000\
\\000"
),
 (75, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\074\074\074\074\074\074\074\074\074\074\074\074\074\074\074\
\\074\074\074\074\074\074\074\074\074\074\074\000\000\000\000\000\
\\000\074\074\074\074\074\074\074\074\074\074\074\074\074\074\074\
\\074\074\074\074\074\074\074\074\074\074\074\000\000\000\000\000\
\\000"
),
 (76, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\076\076\076\076\076\076\076\076\076\076\000\000\000\000\000\000\
\\000\074\074\074\074\074\074\074\074\074\074\074\074\074\074\074\
\\074\074\074\074\074\074\074\074\074\074\074\000\000\000\000\000\
\\000\074\074\074\074\074\074\074\074\074\074\074\074\074\074\074\
\\074\074\074\074\074\074\074\074\074\074\074\000\000\000\000\000\
\\000"
),
 (77, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\075\000\000\000\000\000\000\000\000\
\\076\076\076\076\076\076\076\076\076\076\000\000\000\000\000\000\
\\000\074\074\074\074\074\074\074\074\074\074\074\074\074\074\074\
\\074\074\074\074\074\074\074\074\074\074\074\000\000\000\000\075\
\\000\074\074\074\074\074\074\074\074\074\074\074\074\074\074\074\
\\074\074\074\074\074\074\074\074\074\074\074\000\000\000\000\000\
\\000"
),
 (78, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\024\080\024\024\024\024\000\000\000\024\024\000\024\000\024\
\\000\000\000\000\000\000\000\000\000\000\024\000\024\024\024\024\
\\024\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\079\024\000\024\000\
\\025\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\024\000\024\000\
\\000"
),
 (82, 
"\000\000\000\000\000\000\000\000\000\083\000\000\083\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\083\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (84, 
"\000\000\000\000\000\000\000\000\000\000\085\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (87, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\088\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (89, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\090\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (91, 
"\000\000\000\000\000\000\000\000\000\000\092\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (94, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\094\000\094\094\094\094\094\094\094\094\094\094\094\094\094\
\\094\094\094\094\094\094\094\094\094\094\094\094\094\094\094\094\
\\094\094\094\094\094\094\094\094\094\094\094\094\094\094\094\094\
\\094\094\094\094\094\094\094\094\094\094\094\094\000\094\094\094\
\\094\094\094\094\094\094\094\094\094\094\094\094\094\094\094\094\
\\094\094\094\094\094\094\094\094\094\094\094\094\094\094\094\000\
\\000"
),
 (95, 
"\000\000\000\000\000\000\000\000\000\111\113\000\111\112\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\111\000\110\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\107\107\107\107\107\107\107\107\107\107\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\106\000\103\000\
\\000\102\101\000\000\000\100\000\000\000\000\000\000\000\099\000\
\\000\000\098\000\097\000\096\000\000\000\000\000\000\000\000\000\
\\000"
),
 (103, 
"\104\104\104\104\104\104\104\104\104\104\000\104\104\104\104\104\
\\104\104\104\104\104\104\104\104\104\104\104\104\104\104\104\104\
\\104\104\104\104\104\104\104\104\104\104\104\104\104\104\104\104\
\\104\104\104\104\104\104\104\104\104\104\104\104\104\104\104\104\
\\105\105\105\105\105\105\105\105\105\105\105\105\105\105\105\105\
\\105\105\105\105\105\105\105\105\105\105\105\105\105\105\105\105\
\\104\104\104\104\104\104\104\104\104\104\104\104\104\104\104\104\
\\104\104\104\104\104\104\104\104\104\104\104\104\104\104\104\104\
\\104"
),
 (107, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\108\108\108\108\108\108\108\108\108\108\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (108, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\109\109\109\109\109\109\109\109\109\109\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (111, 
"\000\000\000\000\000\000\000\000\000\111\000\000\111\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\111\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (112, 
"\000\000\000\000\000\000\000\000\000\000\113\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (116, 
"\000\000\000\000\000\000\000\000\000\000\117\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (121, 
"\000\000\000\000\000\000\000\000\000\122\000\000\122\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\122\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (123, 
"\000\000\000\000\000\000\000\000\000\000\124\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (127, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\129\000\
\\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (130, 
"\000\000\000\000\000\000\000\000\000\000\131\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (133, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\134\000\134\134\134\134\000\000\000\134\134\000\134\000\134\
\\000\000\000\000\000\000\000\000\000\000\134\000\134\134\134\134\
\\134\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\134\000\134\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\134\000\134\000\
\\000"
),
 (135, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\136\000\000\000\000\000\000\000\000\
\\136\136\136\136\136\136\136\136\136\136\000\000\000\000\000\000\
\\000\136\136\136\136\136\136\136\136\136\136\136\136\136\136\136\
\\136\136\136\136\136\136\136\136\136\136\136\000\000\000\000\136\
\\000\136\136\136\136\136\136\136\136\136\136\136\136\136\136\136\
\\136\136\136\136\136\136\136\136\136\136\136\000\000\000\000\000\
\\000"
),
 (138, 
"\000\000\000\000\000\000\000\000\000\139\000\000\139\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\139\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (140, 
"\000\000\000\000\000\000\000\000\000\000\141\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (143, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\144\144\144\144\144\144\144\144\144\144\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (145, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\146\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (147, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\147\147\147\147\147\147\147\147\147\147\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (148, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\148\147\147\147\147\147\147\147\147\147\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (150, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\151\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (153, 
"\000\000\000\000\000\000\000\000\000\155\000\000\155\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\155\000\154\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (156, 
"\157\157\157\157\157\157\157\157\157\157\157\157\157\157\157\157\
\\157\157\157\157\157\157\157\157\157\157\157\157\157\157\157\157\
\\157\157\000\157\157\157\157\157\157\157\157\157\157\157\157\157\
\\157\157\157\157\157\157\157\157\157\157\157\157\157\157\157\157\
\\157\157\157\157\157\157\157\157\157\157\157\157\157\157\157\157\
\\157\157\157\157\157\157\157\157\157\157\157\157\157\157\157\157\
\\157\157\157\157\157\157\157\157\157\157\157\157\157\157\157\157\
\\157\157\157\157\157\157\157\157\157\157\157\157\157\157\157\157\
\\157"
),
 (158, 
"\157\157\157\157\157\157\157\157\157\157\157\157\157\157\157\157\
\\157\157\157\157\157\157\157\157\157\157\157\157\157\157\157\157\
\\157\157\000\157\157\157\157\157\157\159\157\157\157\157\157\157\
\\157\157\157\157\157\157\157\157\157\157\157\157\157\157\157\157\
\\157\157\157\157\157\157\157\157\157\157\157\157\157\157\157\157\
\\157\157\157\157\157\157\157\157\157\157\157\157\157\157\157\157\
\\157\157\157\157\157\157\157\157\157\157\157\157\157\157\157\157\
\\157\157\157\157\157\157\157\157\157\157\157\157\157\157\157\157\
\\157"
),
 (160, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\161\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (161, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\162\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
(0, "")]
fun f x = x 
val s = map f (rev (tl (rev s))) 
exception LexHackingError 
fun look ((j,x)::r, i) = if i = j then x else look(r, i) 
  | look ([], i) = raise LexHackingError
fun g {fin=x, trans=i} = {fin=x, trans=look(s,i)} 
in Vector.fromList(map g 
[{fin = [], trans = 0},
{fin = [(N 2)], trans = 1},
{fin = [(N 2)], trans = 1},
{fin = [], trans = 3},
{fin = [], trans = 3},
{fin = [], trans = 5},
{fin = [], trans = 5},
{fin = [(N 279)], trans = 7},
{fin = [(N 279)], trans = 7},
{fin = [], trans = 9},
{fin = [], trans = 9},
{fin = [(N 308)], trans = 11},
{fin = [(N 308)], trans = 11},
{fin = [], trans = 13},
{fin = [], trans = 13},
{fin = [(N 157)], trans = 15},
{fin = [(N 157)], trans = 15},
{fin = [], trans = 17},
{fin = [], trans = 17},
{fin = [(N 166)], trans = 19},
{fin = [(N 166)], trans = 19},
{fin = [(N 145),(N 147)], trans = 0},
{fin = [(N 147)], trans = 0},
{fin = [(N 57),(N 66),(N 147)], trans = 23},
{fin = [(N 57),(N 66)], trans = 24},
{fin = [(N 57)], trans = 25},
{fin = [(N 98)], trans = 26},
{fin = [], trans = 27},
{fin = [], trans = 28},
{fin = [(N 88)], trans = 28},
{fin = [], trans = 30},
{fin = [(N 88)], trans = 31},
{fin = [], trans = 32},
{fin = [], trans = 33},
{fin = [(N 88)], trans = 33},
{fin = [(N 98)], trans = 35},
{fin = [], trans = 36},
{fin = [(N 109)], trans = 36},
{fin = [(N 15),(N 147)], trans = 0},
{fin = [(N 57),(N 66),(N 147)], trans = 24},
{fin = [(N 13),(N 147)], trans = 0},
{fin = [(N 46),(N 147)], trans = 41},
{fin = [(N 46)], trans = 41},
{fin = [(N 57),(N 68),(N 147)], trans = 25},
{fin = [(N 9),(N 147)], trans = 0},
{fin = [(N 22),(N 147)], trans = 0},
{fin = [(N 17),(N 147)], trans = 0},
{fin = [(N 24),(N 147)], trans = 0},
{fin = [(N 91),(N 94),(N 147)], trans = 48},
{fin = [(N 91),(N 94)], trans = 48},
{fin = [(N 94),(N 147)], trans = 50},
{fin = [], trans = 51},
{fin = [(N 103)], trans = 51},
{fin = [], trans = 53},
{fin = [], trans = 54},
{fin = [(N 120)], trans = 54},
{fin = [(N 114)], trans = 56},
{fin = [(N 94)], trans = 57},
{fin = [(N 30),(N 147)], trans = 58},
{fin = [], trans = 59},
{fin = [(N 34)], trans = 0},
{fin = [(N 11),(N 147)], trans = 0},
{fin = [(N 57),(N 66),(N 147)], trans = 62},
{fin = [(N 143)], trans = 0},
{fin = [(N 28),(N 147)], trans = 0},
{fin = [(N 26),(N 147)], trans = 65},
{fin = [(N 140)], trans = 66},
{fin = [], trans = 67},
{fin = [], trans = 68},
{fin = [], trans = 69},
{fin = [], trans = 70},
{fin = [], trans = 71},
{fin = [(N 137)], trans = 71},
{fin = [(N 43),(N 147)], trans = 73},
{fin = [(N 43)], trans = 74},
{fin = [(N 43)], trans = 75},
{fin = [(N 43)], trans = 76},
{fin = [(N 43)], trans = 77},
{fin = [(N 57),(N 66),(N 147)], trans = 78},
{fin = [(N 20)], trans = 0},
{fin = [(N 125)], trans = 0},
{fin = [(N 122),(N 147)], trans = 0},
{fin = [(N 2),(N 147)], trans = 82},
{fin = [(N 2)], trans = 82},
{fin = [(N 7),(N 147)], trans = 84},
{fin = [(N 7)], trans = 0},
{fin = [(N 188)], trans = 0},
{fin = [(N 188)], trans = 87},
{fin = [(N 186)], trans = 0},
{fin = [(N 188)], trans = 89},
{fin = [(N 178)], trans = 0},
{fin = [(N 183),(N 188)], trans = 91},
{fin = [(N 183)], trans = 0},
{fin = [(N 271)], trans = 0},
{fin = [(N 271)], trans = 94},
{fin = [(N 205),(N 247),(N 271)], trans = 95},
{fin = [(N 226)], trans = 0},
{fin = [(N 223)], trans = 0},
{fin = [(N 220)], trans = 0},
{fin = [(N 217)], trans = 0},
{fin = [(N 214)], trans = 0},
{fin = [(N 211)], trans = 0},
{fin = [(N 208)], trans = 0},
{fin = [], trans = 103},
{fin = [(N 240)], trans = 0},
{fin = [(N 236),(N 240)], trans = 0},
{fin = [(N 229)], trans = 0},
{fin = [], trans = 107},
{fin = [], trans = 108},
{fin = [(N 245)], trans = 0},
{fin = [(N 232)], trans = 0},
{fin = [(N 205)], trans = 111},
{fin = [(N 201)], trans = 112},
{fin = [(N 201)], trans = 0},
{fin = [(N 190),(N 271)], trans = 0},
{fin = [(N 249),(N 271)], trans = 0},
{fin = [(N 195),(N 249),(N 271)], trans = 116},
{fin = [(N 195)], trans = 0},
{fin = [(N 195),(N 249)], trans = 0},
{fin = [(N 283)], trans = 0},
{fin = [(N 281),(N 283)], trans = 0},
{fin = [(N 279),(N 283)], trans = 121},
{fin = [(N 279)], trans = 121},
{fin = [(N 276),(N 283)], trans = 123},
{fin = [(N 276)], trans = 0},
{fin = [(N 300)], trans = 0},
{fin = [(N 293),(N 300)], trans = 0},
{fin = [(N 291),(N 300)], trans = 127},
{fin = [(N 286)], trans = 0},
{fin = [(N 289)], trans = 0},
{fin = [(N 298),(N 300)], trans = 130},
{fin = [(N 298)], trans = 0},
{fin = [(N 324)], trans = 0},
{fin = [(N 320),(N 324)], trans = 133},
{fin = [(N 320)], trans = 133},
{fin = [(N 311),(N 324)], trans = 135},
{fin = [(N 311)], trans = 135},
{fin = [(N 322),(N 324)], trans = 0},
{fin = [(N 308),(N 324)], trans = 138},
{fin = [(N 308)], trans = 138},
{fin = [(N 305),(N 324)], trans = 140},
{fin = [(N 305)], trans = 0},
{fin = [(N 175)], trans = 0},
{fin = [(N 150),(N 175)], trans = 143},
{fin = [(N 150)], trans = 143},
{fin = [(N 175)], trans = 145},
{fin = [(N 173)], trans = 0},
{fin = [(N 155)], trans = 147},
{fin = [(N 155),(N 157)], trans = 148},
{fin = [(N 152)], trans = 0},
{fin = [(N 175)], trans = 150},
{fin = [(N 160),(N 173)], trans = 0},
{fin = [(N 164),(N 175)], trans = 0},
{fin = [(N 175)], trans = 153},
{fin = [(N 164)], trans = 0},
{fin = [], trans = 153},
{fin = [(N 166),(N 175)], trans = 156},
{fin = [(N 166)], trans = 156},
{fin = [(N 166),(N 175)], trans = 158},
{fin = [(N 166),(N 173)], trans = 156},
{fin = [(N 175)], trans = 160},
{fin = [], trans = 161},
{fin = [(N 170)], trans = 0}])
end
structure StartStates =
	struct
	datatype yystartstate = STARTSTATE of int

(* start state definitions *)

val A = STARTSTATE 3;
val AQ = STARTSTATE 11;
val F = STARTSTATE 7;
val INITIAL = STARTSTATE 1;
val L = STARTSTATE 13;
val LL = STARTSTATE 15;
val LLC = STARTSTATE 17;
val LLCQ = STARTSTATE 19;
val Q = STARTSTATE 9;
val S = STARTSTATE 5;

end
type result = UserDeclarations.lexresult
	exception LexerError (* raised if illegal leaf action tried *)
end

fun makeLexer yyinput =
let	val yygone0=1
	val yyb = ref "\n" 		(* buffer *)
	val yybl = ref 1		(*buffer length *)
	val yybufpos = ref 1		(* location of next character to use *)
	val yygone = ref yygone0	(* position in file of beginning of buffer *)
	val yydone = ref false		(* eof found yet? *)
	val yybegin = ref 1		(*Current 'start state' for lexer *)

	val YYBEGIN = fn (Internal.StartStates.STARTSTATE x) =>
		 yybegin := x

fun lex (yyarg as ({comLevel,sourceMap,err,charlist,stringstart,stringtype,brack_stack})) =
let fun continue() : Internal.result = 
  let fun scan (s,AcceptingLeaves : Internal.yyfinstate list list,l,i0) =
	let fun action (i,nil) = raise LexError
	| action (i,nil::l) = action (i-1,l)
	| action (i,(node::acts)::l) =
		case node of
		    Internal.N yyk => 
			(let val yytext = substring(!yyb,i0,i-i0)
			     val yypos = i0+ !yygone
			fun REJECT() = action(i,acts::l)
			open UserDeclarations Internal.StartStates
 in (yybufpos := i; case yyk of 

			(* Application actions *)

  103 => (Tokens.INT0(xtoi(err, yypos, yytext, 2),yypos,yypos+size yytext))
| 109 => (Tokens.INT0(TilWord64.snegate(xtoi(err, yypos, yytext, 3)),yypos,yypos+size yytext))
| 11 => (Tokens.COMMA(yypos,yypos+1))
| 114 => (Tokens.WORD(atoi(err, yypos, yytext, 2),yypos,yypos+size yytext))
| 120 => (Tokens.WORD(xtoi(err, yypos, yytext, 3),yypos,yypos+size yytext))
| 122 => (charlist := [""]; stringstart := yypos;
                    stringtype := true; YYBEGIN S; continue())
| 125 => (charlist := [""]; stringstart := yypos;
                    stringtype := false; YYBEGIN S; continue())
| 13 => (Tokens.LBRACE(yypos,yypos+1))
| 137 => (YYBEGIN L; stringstart := yypos; comLevel := 1; continue())
| 140 => (YYBEGIN A; stringstart := yypos; comLevel := 1; continue())
| 143 => (err (yypos,yypos+1) COMPLAIN "unmatched close comment"
		        nullErrorBody;
		    continue())
| 145 => (err (yypos,yypos) COMPLAIN "non-Ascii character"
		        nullErrorBody;
		    continue())
| 147 => (err (yypos,yypos) COMPLAIN "illegal token" nullErrorBody;
		    continue())
| 15 => (Tokens.RBRACE(yypos,yypos+1))
| 150 => (YYBEGIN LL; charlist := [yytext]; continue())
| 152 => ((* cheat: take n > 0 dots *) continue())
| 155 => (YYBEGIN LLC; addString(charlist, yytext); continue())
| 157 => (YYBEGIN LLC; addString(charlist, "1");    continue()
		(* note hack, since ml-lex chokes on the empty string for 0* *))
| 160 => (YYBEGIN INITIAL; mysynch(sourceMap, yypos+2, !charlist);
		              comLevel := 0; charlist := []; continue())
| 164 => (YYBEGIN LLCQ; continue())
| 166 => (addString(charlist, yytext); continue())
| 17 => (Tokens.LBRACKET(yypos,yypos+1))
| 170 => (YYBEGIN INITIAL; mysynch(sourceMap, yypos+3, !charlist);
		              comLevel := 0; charlist := []; continue())
| 173 => (err (!stringstart, yypos+1) WARN
                       "ill-formed (*#line...*) taken as comment" nullErrorBody;
                     YYBEGIN INITIAL; comLevel := 0; charlist := []; continue())
| 175 => (err (!stringstart, yypos+1) WARN
                       "ill-formed (*#line...*) taken as comment" nullErrorBody;
                     YYBEGIN A; continue())
| 178 => (inc comLevel; continue())
| 183 => (SourceMap.newline sourceMap yypos; continue())
| 186 => (dec comLevel; if !comLevel=0 then YYBEGIN INITIAL else (); continue())
| 188 => (continue())
| 190 => (let val s = makeString charlist
                        val s = if size s <> 1 andalso not(!stringtype)
                                 then (err(!stringstart,yypos) COMPLAIN
                                      "character constant not length 1"
                                       nullErrorBody;
                                       substring(s^"x",0,1))
                                 else s
                        val t = (s,!stringstart,yypos+1)
                    in YYBEGIN INITIAL;
                       if !stringtype then Tokens.STRING t else Tokens.CHAR t
                    end)
| 195 => (err (!stringstart,yypos) COMPLAIN "unclosed string"
		        nullErrorBody;
		    SourceMap.newline sourceMap yypos;
		    YYBEGIN INITIAL; Tokens.STRING(makeString charlist,!stringstart,yypos))
| 2 => (continue())
| 20 => (Tokens.VECTORSTART(yypos,yypos+1))
| 201 => (SourceMap.newline sourceMap (yypos+1);
		    YYBEGIN F; continue())
| 205 => (YYBEGIN F; continue())
| 208 => (addString(charlist, "\007"); continue())
| 211 => (addString(charlist, "\008"); continue())
| 214 => (addString(charlist, "\012"); continue())
| 217 => (addString(charlist, "\010"); continue())
| 22 => (Tokens.RBRACKET(yypos,yypos+1))
| 220 => (addString(charlist, "\013"); continue())
| 223 => (addString(charlist, "\009"); continue())
| 226 => (addString(charlist, "\011"); continue())
| 229 => (addString(charlist, "\\"); continue())
| 232 => (addString(charlist, "\""); continue())
| 236 => (addChar(charlist,
			Char.chr(Char.ord(String.sub(yytext,2))-Char.ord #"@"));
		    continue())
| 24 => (Tokens.SEMICOLON(yypos,yypos+1))
| 240 => (err(yypos,yypos+2) COMPLAIN "illegal control escape; must be one of \
	  \@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_" nullErrorBody;
	 continue())
| 245 => (let val x = Char.ord(String.sub(yytext,1))*100
	     +Char.ord(String.sub(yytext,2))*10
	     +Char.ord(String.sub(yytext,3))
	     -((Char.ord #"0")*111)
  in (if x>255
      then err (yypos,yypos+4) COMPLAIN "illegal ascii escape" nullErrorBody
      else addChar(charlist, Char.chr x);
      continue())
  end)
| 247 => (err (yypos,yypos+1) COMPLAIN "illegal string escape"
		        nullErrorBody;
		    continue())
| 249 => (err (yypos,yypos+1) COMPLAIN "illegal non-printing character in string" nullErrorBody;
                    continue())
| 26 => (if (null(!brack_stack))
                    then ()
                    else inc (hd (!brack_stack));
                    Tokens.LPAREN(yypos,yypos+1))
| 271 => (addString(charlist,yytext); continue())
| 276 => (SourceMap.newline sourceMap yypos; continue())
| 279 => (continue())
| 28 => (if (null(!brack_stack))
                    then ()
                    else if (!(hd (!brack_stack)) = 1)
                         then ( brack_stack := tl (!brack_stack);
                                charlist := [];
                                YYBEGIN Q)
                         else dec (hd (!brack_stack));
                    Tokens.RPAREN(yypos,yypos+1))
| 281 => (YYBEGIN S; stringstart := yypos; continue())
| 283 => (err (!stringstart,yypos) COMPLAIN "unclosed string"
		        nullErrorBody;
		    YYBEGIN INITIAL; Tokens.STRING(makeString charlist,!stringstart,yypos+1))
| 286 => (addString(charlist, "`"); continue())
| 289 => (addString(charlist, "^"); continue())
| 291 => (YYBEGIN AQ;
                    let val x = makeString charlist
                    in
                    Tokens.OBJL(x,yypos,yypos+(size x))
                    end)
| 293 => ((* a closing quote *)
                    YYBEGIN INITIAL;
                    let val x = makeString charlist
                    in
                    Tokens.ENDQ(x,yypos,yypos+(size x))
                    end)
| 298 => (SourceMap.newline sourceMap yypos; addString(charlist,"\n"); continue())
| 30 => (Tokens.DOT(yypos,yypos+1))
| 300 => (addString(charlist,yytext); continue())
| 305 => (SourceMap.newline sourceMap yypos; continue())
| 308 => (continue())
| 311 => (YYBEGIN Q;
                    let val hash = StrgHash.hashString yytext
                    in
                    Tokens.AQID(FastSymbol.rawSymbol(hash,yytext),
				yypos,yypos+(size yytext))
                    end)
| 320 => (YYBEGIN Q;
                    let val hash = StrgHash.hashString yytext
                    in
                    Tokens.AQID(FastSymbol.rawSymbol(hash,yytext),
				yypos,yypos+(size yytext))
                    end)
| 322 => (YYBEGIN INITIAL;
                    brack_stack := ((ref 1)::(!brack_stack));
                    Tokens.LPAREN(yypos,yypos+1))
| 324 => (err (yypos,yypos+1) COMPLAIN
		       ("ml lexer: bad character after antiquote "^yytext)
		       nullErrorBody;
                    Tokens.AQID(FastSymbol.rawSymbol(0,""),yypos,yypos))
| 34 => (Tokens.DOTDOTDOT(yypos,yypos+3))
| 43 => (TokTable.checkTyvar(yytext,yypos))
| 46 => (TokTable.checkToken(yytext,yypos))
| 57 => (if (!Control.quotation)
                            then if (has_quote yytext)
                                 then REJECT()
                                 else TokTable.checkToken(yytext,yypos)
                            else TokTable.checkToken(yytext,yypos))
| 66 => (TokTable.checkToken(yytext,yypos))
| 68 => (if (!Control.quotation)
                            then (YYBEGIN Q;
                                  charlist := [];
                                  Tokens.BEGINQ(yypos,yypos+1))
                            else (err(yypos, yypos+1)
                                     COMPLAIN "quotation implementation error"
				     nullErrorBody;
                                  Tokens.BEGINQ(yypos,yypos+1)))
| 7 => (SourceMap.newline sourceMap yypos; continue())
| 88 => (Tokens.REAL(yytext,yypos,yypos+size yytext))
| 9 => (Tokens.WILD(yypos,yypos+1))
| 91 => (Tokens.INT(atoi(err, yypos, yytext, 0),yypos,yypos+size yytext))
| 94 => (Tokens.INT0(atoi(err, yypos, yytext, 0),yypos,yypos+size yytext))
| 98 => (Tokens.INT0(atoi(err, yypos, yytext, 0),yypos,yypos+size yytext))
| _ => raise Internal.LexerError

		) end )

	val {fin,trans} = Vector.sub(Internal.tab, s)
	val NewAcceptingLeaves = fin::AcceptingLeaves
	in if l = !yybl then
	     if trans = #trans(Vector.sub(Internal.tab,0))
	       then action(l,NewAcceptingLeaves
) else	    let val newchars= if !yydone then "" else yyinput 1024
	    in if (size newchars)=0
		  then (yydone := true;
		        if (l=i0) then UserDeclarations.eof yyarg
		                  else action(l,NewAcceptingLeaves))
		  else (if i0=l then yyb := newchars
		     else yyb := substring(!yyb,i0,l-i0)^newchars;
		     yygone := !yygone+i0;
		     yybl := size (!yyb);
		     scan (s,AcceptingLeaves,l-i0,0))
	    end
	  else let val NewChar = Char.ord(String.sub(!yyb,l))
		val NewState = if NewChar<128 then Char.ord(String.sub(trans,NewChar)) else Char.ord(String.sub(trans,128))
		in if NewState=0 then action(l,NewAcceptingLeaves)
		else scan(NewState,NewAcceptingLeaves,l+1,i0)
	end
	end
(*
	val start= if substring(!yyb,!yybufpos-1,1)="\n"
then !yybegin+1 else !yybegin
*)
	in scan(!yybegin (* start *),nil,!yybufpos,!yybufpos)
    end
in continue end
  in lex
  end
end
