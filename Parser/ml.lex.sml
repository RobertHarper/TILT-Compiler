functor MLLexFun(structure Tokens : ML_TOKENS)=
   struct
    structure UserDeclarations =
      struct
(* ml.lex
 *
 * Copyright 1989 by AT&T Bell Laboratories
 *
 * $Log$
# Revision 1.4  97/09/03  20:10:39  pscheng
# added extern and ccall syntax
# 
# Revision 1.2  97/07/02  22:03:18  jgmorris
# Modified syntax to allow for interfaces and implementations.
# 
 * Revision 1.2  1997/05/30 14:12:41  zdance
 * Added support for (*$import...*) and (*$include...*) directives.
 * Also changed the grammar to allow for (possibly) semicolon-separated sequences
 * at the top level declarations.
 *
 * Revision 1.1.1.1  1997/05/23 14:53:52  til
 * Imported Sources
 *
# Revision 1.1  97/04/10  15:05:11  cokasaki
# Added DelayExp and DelayPat to ast.  Added lexical token DOLLAR.
# 
 * Revision 1.2  1997/01/28  23:20:40  jhr
 * Integer and word literals are now represented by IntInf.int (instead of
 * as strings).
 *
 *)

open ErrorMsg;

structure TokTable = TokenTable(Tokens);
type svalue = Tokens.svalue
type pos = int
type lexresult = (svalue,pos) Tokens.token
type lexarg = {comLevel : int ref, 
	       sourceMap : SourceMap.sourcemap,
	       charlist : string list ref,
	       stringtype : bool ref,
	       stringstart : int ref, (* start of current string or comment*)
               brack_stack : int ref list ref, (* for frags *)
	       err : pos*pos -> ErrorMsg.complainer}
type arg = lexarg
type ('a,'b) token = ('a,'b) Tokens.token
val eof = fn ({comLevel,err,stringstart,stringtype,sourceMap,
               charlist, brack_stack}:lexarg) => 
	   let val pos = Int.max(!stringstart+2, SourceMap.lastChange sourceMap)
	    in if !comLevel>0 then err (!stringstart,pos) COMPLAIN
					 "unclosed comment" nullErrorBody
		  	      else ();
	       Tokens.EOF(pos,pos)
	   end	
fun addString (charlist,s:string) = charlist := s :: (!charlist)
fun addChar (charlist, c:char) = addString(charlist, String.str c)
fun makeString charlist = (concat(rev(!charlist)) before charlist := nil)

local
  fun cvt radix (s, i) =
	#1(valOf(IntInf.scan radix Substring.getc (Substring.triml i (Substring.all s))))
in
val atoi = cvt StringCvt.DEC
val xtoi = cvt StringCvt.HEX
end (* local *)

fun mysynch (src, pos, parts) =
  let fun digit d = Char.ord d - Char.ord #"0"
      fun cvt digits = foldl (fn(d, n) => 10*n + digit d) 0 (explode digits)
      val r = SourceMap.resynch src
  in  case parts 
        of [col, line] => 
              r (pos, {fileName=NONE,      line=cvt line, column=SOME(cvt col)})
         | [file, col, line] => 
              r (pos, {fileName=SOME file, line=cvt line, column=SOME(cvt col)})
         | _ => impossible "text in (*#line...*)"
  end

fun has_quote s = let
      fun loop i = ((String.sub(s,i) = #"`") orelse loop (i+1))
	    handle _ => false
      in
	loop 0
      end

fun inc (ri as ref i) = (ri := i+1)
fun dec (ri as ref i) = (ri := i-1)
end (* end of user routines *)
exception LexError (* raised if illegal leaf action tried *)
structure Internal =
	struct

datatype yyfinstate = N of int
type statedata = {fin : yyfinstate list, trans: string}
(* transition & final state table *)
val tab = let
val s = [ 
 (0, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (1, 
"\024\024\024\024\024\024\024\024\024\100\102\024\100\024\024\024\
\\024\024\024\024\024\024\024\024\024\024\024\024\024\024\024\024\
\\100\041\099\096\095\041\041\090\067\066\064\041\063\041\060\041\
\\052\050\050\050\050\050\050\050\050\050\041\049\041\041\041\041\
\\041\043\043\043\043\043\043\043\043\043\043\043\043\043\043\043\
\\043\043\043\043\043\043\043\043\043\043\043\048\041\047\041\046\
\\045\043\043\043\043\043\043\043\043\043\043\043\043\043\043\043\
\\043\043\043\043\043\043\043\043\043\043\043\042\041\040\025\024\
\\023"
),
 (3, 
"\103\103\103\103\103\103\103\103\103\103\108\103\103\103\103\103\
\\103\103\103\103\103\103\103\103\103\103\103\103\103\103\103\103\
\\103\103\103\103\103\103\103\103\106\103\104\103\103\103\103\103\
\\103\103\103\103\103\103\103\103\103\103\103\103\103\103\103\103\
\\103\103\103\103\103\103\103\103\103\103\103\103\103\103\103\103\
\\103\103\103\103\103\103\103\103\103\103\103\103\103\103\103\103\
\\103\103\103\103\103\103\103\103\103\103\103\103\103\103\103\103\
\\103\103\103\103\103\103\103\103\103\103\103\103\103\103\103\103\
\\103"
),
 (5, 
"\130\130\130\130\130\130\130\130\130\130\131\130\130\130\130\130\
\\130\130\130\130\130\130\130\130\130\130\130\130\130\130\130\130\
\\109\110\129\110\109\110\110\110\110\110\110\110\110\110\110\110\
\\110\110\110\110\110\110\110\110\110\110\110\110\110\110\110\110\
\\110\110\110\110\110\110\110\110\110\110\110\110\110\110\110\110\
\\110\110\110\110\110\110\110\110\110\110\110\110\111\110\110\110\
\\110\110\110\110\110\110\110\110\110\110\110\110\110\110\110\110\
\\110\110\110\110\110\110\110\110\110\110\110\110\110\110\110\109\
\\109"
),
 (7, 
"\132\132\132\132\132\132\132\132\132\134\136\132\134\132\132\132\
\\132\132\132\132\132\132\132\132\132\132\132\132\132\132\132\132\
\\134\132\132\132\132\132\132\132\132\132\132\132\132\132\132\132\
\\132\132\132\132\132\132\132\132\132\132\132\132\132\132\132\132\
\\132\132\132\132\132\132\132\132\132\132\132\132\132\132\132\132\
\\132\132\132\132\132\132\132\132\132\132\132\132\133\132\132\132\
\\132\132\132\132\132\132\132\132\132\132\132\132\132\132\132\132\
\\132\132\132\132\132\132\132\132\132\132\132\132\132\132\132\132\
\\132"
),
 (9, 
"\137\137\137\137\137\137\137\137\137\137\142\137\137\137\137\137\
\\137\137\137\137\137\137\137\137\137\137\137\137\137\137\137\137\
\\137\137\137\137\137\137\137\137\137\137\137\137\137\137\137\137\
\\137\137\137\137\137\137\137\137\137\137\137\137\137\137\137\137\
\\137\137\137\137\137\137\137\137\137\137\137\137\137\137\137\137\
\\137\137\137\137\137\137\137\137\137\137\137\137\137\137\139\137\
\\138\137\137\137\137\137\137\137\137\137\137\137\137\137\137\137\
\\137\137\137\137\137\137\137\137\137\137\137\137\137\137\137\137\
\\137"
),
 (11, 
"\143\143\143\143\143\143\143\143\143\149\151\143\149\143\143\143\
\\143\143\143\143\143\143\143\143\143\143\143\143\143\143\143\143\
\\149\144\143\144\143\144\144\143\148\143\144\144\143\144\143\144\
\\143\143\143\143\143\143\143\143\143\143\144\143\144\144\144\144\
\\144\146\146\146\146\146\146\146\146\146\146\146\146\146\146\146\
\\146\146\146\146\146\146\146\146\146\146\146\143\144\143\144\143\
\\143\146\146\146\146\146\146\146\146\146\146\146\146\146\146\146\
\\146\146\146\146\146\146\146\146\146\146\146\143\144\143\144\143\
\\143"
),
 (13, 
"\152\152\152\152\152\152\152\152\152\152\000\152\152\152\152\152\
\\152\152\152\152\152\152\152\152\152\152\152\152\152\152\152\152\
\\152\152\152\152\152\152\152\152\152\152\155\152\152\152\152\152\
\\153\153\153\153\153\153\153\153\153\153\152\152\152\152\152\152\
\\152\152\152\152\152\152\152\152\152\152\152\152\152\152\152\152\
\\152\152\152\152\152\152\152\152\152\152\152\152\152\152\152\152\
\\152\152\152\152\152\152\152\152\152\152\152\152\152\152\152\152\
\\152\152\152\152\152\152\152\152\152\152\152\152\152\152\152\152\
\\152"
),
 (15, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\159\000\
\\158\157\157\157\157\157\157\157\157\157\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (17, 
"\152\152\152\152\152\152\152\152\152\163\000\152\163\152\152\152\
\\152\152\152\152\152\152\152\152\152\152\152\152\152\152\152\152\
\\163\152\162\152\152\152\152\152\152\152\160\152\152\152\152\152\
\\152\152\152\152\152\152\152\152\152\152\152\152\152\152\152\152\
\\152\152\152\152\152\152\152\152\152\152\152\152\152\152\152\152\
\\152\152\152\152\152\152\152\152\152\152\152\152\152\152\152\152\
\\152\152\152\152\152\152\152\152\152\152\152\152\152\152\152\152\
\\152\152\152\152\152\152\152\152\152\152\152\152\152\152\152\152\
\\152"
),
 (19, 
"\166\166\166\166\166\166\166\166\166\166\167\166\166\166\166\166\
\\166\166\166\166\166\166\166\166\166\166\166\166\166\166\166\166\
\\166\166\170\166\166\166\166\166\166\166\168\166\166\166\166\166\
\\166\166\166\166\166\166\166\166\166\166\166\166\166\166\166\166\
\\166\166\166\166\166\166\166\166\166\166\166\166\166\166\166\166\
\\166\166\166\166\166\166\166\166\166\166\166\166\166\166\166\166\
\\166\166\166\166\166\166\166\166\166\166\166\166\166\166\166\166\
\\166\166\166\166\166\166\166\166\166\166\166\166\166\166\166\166\
\\166"
),
 (21, 
"\173\173\173\173\173\173\173\173\173\178\180\173\178\173\173\173\
\\173\173\173\173\173\173\173\173\173\173\173\173\173\173\173\173\
\\178\173\173\173\173\173\173\173\173\173\176\173\173\173\173\173\
\\173\173\173\173\173\173\173\173\173\173\173\173\173\173\173\173\
\\173\174\174\174\174\174\174\174\174\174\174\174\174\174\174\174\
\\174\174\174\174\174\174\174\174\174\174\174\173\173\173\173\173\
\\173\174\174\174\174\174\174\174\174\174\174\174\174\174\174\174\
\\174\174\174\174\174\174\174\174\174\174\174\173\173\173\173\173\
\\173"
),
 (25, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\026\000\026\000\026\026\000\000\000\026\026\000\026\000\026\
\\037\028\028\028\028\028\028\028\028\028\026\000\026\026\026\026\
\\026\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\026\000\026\000\
\\027\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\026\000\026\000\
\\000"
),
 (26, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\026\000\026\000\026\026\000\000\000\026\026\000\026\000\026\
\\000\000\000\000\000\000\000\000\000\000\026\000\026\026\026\026\
\\026\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\026\000\026\000\
\\027\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\026\000\026\000\
\\000"
),
 (27, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\027\000\027\000\027\027\000\000\000\027\027\000\027\000\027\
\\000\000\000\000\000\000\000\000\000\000\027\000\027\027\027\027\
\\027\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\027\000\027\000\
\\027\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\027\000\027\000\
\\000"
),
 (28, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\032\000\
\\028\028\028\028\028\028\028\028\028\028\000\000\000\000\000\000\
\\000\000\000\000\000\029\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (29, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\031\031\031\031\031\031\031\031\031\031\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\030\000\
\\000"
),
 (30, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\031\031\031\031\031\031\031\031\031\031\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (32, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\033\033\033\033\033\033\033\033\033\033\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (33, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\033\033\033\033\033\033\033\033\033\033\000\000\000\000\000\000\
\\000\000\000\000\000\034\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (34, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\036\036\036\036\036\036\036\036\036\036\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\035\000\
\\000"
),
 (35, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\036\036\036\036\036\036\036\036\036\036\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (37, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\032\000\
\\028\028\028\028\028\028\028\028\028\028\000\000\000\000\000\000\
\\000\000\000\000\000\029\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\038\000\000\000\000\000\000\000\
\\000"
),
 (38, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\039\039\039\039\039\039\039\039\039\039\000\000\000\000\000\000\
\\000\039\039\039\039\039\039\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\039\039\039\039\039\039\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (43, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\044\000\000\000\000\000\000\000\000\
\\044\044\044\044\044\044\044\044\044\044\000\000\000\000\000\000\
\\000\044\044\044\044\044\044\044\044\044\044\044\044\044\044\044\
\\044\044\044\044\044\044\044\044\044\044\044\000\000\000\000\044\
\\000\044\044\044\044\044\044\044\044\044\044\044\044\044\044\044\
\\044\044\044\044\044\044\044\044\044\044\044\000\000\000\000\000\
\\000"
),
 (50, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\032\000\
\\051\051\051\051\051\051\051\051\051\051\000\000\000\000\000\000\
\\000\000\000\000\000\029\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (52, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\032\000\
\\059\059\059\059\059\059\059\059\059\059\000\000\000\000\000\000\
\\000\000\000\000\000\029\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\055\053\000\000\000\000\000\000\000\
\\000"
),
 (53, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\054\054\054\054\054\054\054\054\054\054\000\000\000\000\000\000\
\\000\054\054\054\054\054\054\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\054\054\054\054\054\054\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (55, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\058\058\058\058\058\058\058\058\058\058\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\056\000\000\000\000\000\000\000\
\\000"
),
 (56, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\057\057\057\057\057\057\057\057\057\057\000\000\000\000\000\000\
\\000\057\057\057\057\057\057\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\057\057\057\057\057\057\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (58, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\058\058\058\058\058\058\058\058\058\058\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (59, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\032\000\
\\059\059\059\059\059\059\059\059\059\059\000\000\000\000\000\000\
\\000\000\000\000\000\029\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (60, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\061\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (61, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\062\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (64, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\026\000\026\000\026\026\000\000\065\026\026\000\026\000\026\
\\000\000\000\000\000\000\000\000\000\000\026\000\026\026\026\026\
\\026\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\026\000\026\000\
\\027\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\026\000\026\000\
\\000"
),
 (67, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\068\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (68, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\084\069\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (69, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\070\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (70, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\078\071\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (71, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\072\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (72, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\073\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (73, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\074\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (74, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\075\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (75, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\076\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (76, 
"\000\000\000\000\000\000\000\000\000\077\000\000\077\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\077\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (78, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\079\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (79, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\080\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (80, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\081\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (81, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\082\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (82, 
"\000\000\000\000\000\000\000\000\000\083\000\000\083\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\083\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (84, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\085\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (85, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\086\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (86, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\087\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (87, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\088\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (88, 
"\000\000\000\000\000\000\000\000\000\089\000\000\089\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\089\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (90, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\094\000\000\000\000\000\000\000\000\
\\093\093\093\093\093\093\093\093\093\093\000\000\000\000\000\000\
\\000\091\091\091\091\091\091\091\091\091\091\091\091\091\091\091\
\\091\091\091\091\091\091\091\091\091\091\091\000\000\000\000\092\
\\000\091\091\091\091\091\091\091\091\091\091\091\091\091\091\091\
\\091\091\091\091\091\091\091\091\091\091\091\000\000\000\000\000\
\\000"
),
 (91, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\091\000\000\000\000\000\000\000\000\
\\091\091\091\091\091\091\091\091\091\091\000\000\000\000\000\000\
\\000\091\091\091\091\091\091\091\091\091\091\091\091\091\091\091\
\\091\091\091\091\091\091\091\091\091\091\091\000\000\000\000\091\
\\000\091\091\091\091\091\091\091\091\091\091\091\091\091\091\091\
\\091\091\091\091\091\091\091\091\091\091\091\000\000\000\000\000\
\\000"
),
 (92, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\091\091\091\091\091\091\091\091\091\091\091\091\091\091\091\
\\091\091\091\091\091\091\091\091\091\091\091\000\000\000\000\000\
\\000\091\091\091\091\091\091\091\091\091\091\091\091\091\091\091\
\\091\091\091\091\091\091\091\091\091\091\091\000\000\000\000\000\
\\000"
),
 (93, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\093\093\093\093\093\093\093\093\093\093\000\000\000\000\000\000\
\\000\091\091\091\091\091\091\091\091\091\091\091\091\091\091\091\
\\091\091\091\091\091\091\091\091\091\091\091\000\000\000\000\000\
\\000\091\091\091\091\091\091\091\091\091\091\091\091\091\091\091\
\\091\091\091\091\091\091\091\091\091\091\091\000\000\000\000\000\
\\000"
),
 (94, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\093\093\093\093\093\093\093\093\093\093\000\000\000\000\000\000\
\\000\091\091\091\091\091\091\091\091\091\091\091\091\091\091\091\
\\091\091\091\091\091\091\091\091\091\091\091\000\000\000\000\092\
\\000\091\091\091\091\091\091\091\091\091\091\091\091\091\091\091\
\\091\091\091\091\091\091\091\091\091\091\091\000\000\000\000\000\
\\000"
),
 (96, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\026\098\026\000\026\026\000\000\000\026\026\000\026\000\026\
\\000\000\000\000\000\000\000\000\000\000\026\000\026\026\026\026\
\\026\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\097\026\000\026\000\
\\027\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\026\000\026\000\
\\000"
),
 (100, 
"\000\000\000\000\000\000\000\000\000\101\000\000\101\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\101\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (104, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\105\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (106, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\107\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (110, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\110\000\110\000\110\110\110\110\110\110\110\110\110\110\110\
\\110\110\110\110\110\110\110\110\110\110\110\110\110\110\110\110\
\\110\110\110\110\110\110\110\110\110\110\110\110\110\110\110\110\
\\110\110\110\110\110\110\110\110\110\110\110\110\000\110\110\110\
\\110\110\110\110\110\110\110\110\110\110\110\110\110\110\110\110\
\\110\110\110\110\110\110\110\110\110\110\110\110\110\110\110\000\
\\000"
),
 (111, 
"\000\000\000\000\000\000\000\000\000\127\128\000\127\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\127\000\126\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\123\123\123\123\123\123\123\123\123\123\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\122\000\119\000\
\\000\118\117\000\000\000\116\000\000\000\000\000\000\000\115\000\
\\000\000\114\000\113\000\112\000\000\000\000\000\000\000\000\000\
\\000"
),
 (119, 
"\120\120\120\120\120\120\120\120\120\120\000\120\120\120\120\120\
\\120\120\120\120\120\120\120\120\120\120\120\120\120\120\120\120\
\\120\120\120\120\120\120\120\120\120\120\120\120\120\120\120\120\
\\120\120\120\120\120\120\120\120\120\120\120\120\120\120\120\120\
\\121\121\121\121\121\121\121\121\121\121\121\121\121\121\121\121\
\\121\121\121\121\121\121\121\121\121\121\121\121\121\121\121\121\
\\120\120\120\120\120\120\120\120\120\120\120\120\120\120\120\120\
\\120\120\120\120\120\120\120\120\120\120\120\120\120\120\120\120\
\\120"
),
 (123, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\124\124\124\124\124\124\124\124\124\124\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (124, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\125\125\125\125\125\125\125\125\125\125\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (127, 
"\000\000\000\000\000\000\000\000\000\127\000\000\127\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\127\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (134, 
"\000\000\000\000\000\000\000\000\000\135\000\000\135\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\135\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (139, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\141\000\
\\140\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (144, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\145\000\145\000\145\145\000\000\000\145\145\000\145\000\145\
\\000\000\000\000\000\000\000\000\000\000\145\000\145\145\145\145\
\\145\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\145\000\145\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\145\000\145\000\
\\000"
),
 (146, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\147\000\000\000\000\000\000\000\000\
\\147\147\147\147\147\147\147\147\147\147\000\000\000\000\000\000\
\\000\147\147\147\147\147\147\147\147\147\147\147\147\147\147\147\
\\147\147\147\147\147\147\147\147\147\147\147\000\000\000\000\147\
\\000\147\147\147\147\147\147\147\147\147\147\147\147\147\147\147\
\\147\147\147\147\147\147\147\147\147\147\147\000\000\000\000\000\
\\000"
),
 (149, 
"\000\000\000\000\000\000\000\000\000\150\000\000\150\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\150\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (153, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\154\154\154\154\154\154\154\154\154\154\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (155, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\156\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (157, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\157\157\157\157\157\157\157\157\157\157\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (158, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\158\157\157\157\157\157\157\157\157\157\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (160, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\161\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (163, 
"\000\000\000\000\000\000\000\000\000\165\000\000\165\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\165\000\164\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (166, 
"\167\167\167\167\167\167\167\167\167\167\167\167\167\167\167\167\
\\167\167\167\167\167\167\167\167\167\167\167\167\167\167\167\167\
\\167\167\000\167\167\167\167\167\167\167\167\167\167\167\167\167\
\\167\167\167\167\167\167\167\167\167\167\167\167\167\167\167\167\
\\167\167\167\167\167\167\167\167\167\167\167\167\167\167\167\167\
\\167\167\167\167\167\167\167\167\167\167\167\167\167\167\167\167\
\\167\167\167\167\167\167\167\167\167\167\167\167\167\167\167\167\
\\167\167\167\167\167\167\167\167\167\167\167\167\167\167\167\167\
\\167"
),
 (168, 
"\167\167\167\167\167\167\167\167\167\167\167\167\167\167\167\167\
\\167\167\167\167\167\167\167\167\167\167\167\167\167\167\167\167\
\\167\167\000\167\167\167\167\167\167\169\167\167\167\167\167\167\
\\167\167\167\167\167\167\167\167\167\167\167\167\167\167\167\167\
\\167\167\167\167\167\167\167\167\167\167\167\167\167\167\167\167\
\\167\167\167\167\167\167\167\167\167\167\167\167\167\167\167\167\
\\167\167\167\167\167\167\167\167\167\167\167\167\167\167\167\167\
\\167\167\167\167\167\167\167\167\167\167\167\167\167\167\167\167\
\\167"
),
 (170, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\171\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (171, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\172\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (174, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\175\000\000\000\000\000\000\000\000\
\\175\175\175\175\175\175\175\175\175\175\000\000\000\000\000\000\
\\000\175\175\175\175\175\175\175\175\175\175\175\175\175\175\175\
\\175\175\175\175\175\175\175\175\175\175\175\000\000\000\000\175\
\\000\175\175\175\175\175\175\175\175\175\175\175\175\175\175\175\
\\175\175\175\175\175\175\175\175\175\175\175\000\000\000\000\000\
\\000"
),
 (176, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\177\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (178, 
"\000\000\000\000\000\000\000\000\000\179\000\000\179\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\179\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
(0, "")]
fun f x = x 
val s = map f (rev (tl (rev s))) 
exception LexHackingError 
fun look ((j,x)::r, i) = if i = j then x else look(r, i) 
  | look ([], i) = raise LexHackingError
fun g {fin=x, trans=i} = {fin=x, trans=look(s,i)} 
in Vector.fromList(map g 
[{fin = [], trans = 0},
{fin = [(N 2)], trans = 1},
{fin = [(N 2)], trans = 1},
{fin = [], trans = 3},
{fin = [], trans = 3},
{fin = [], trans = 5},
{fin = [], trans = 5},
{fin = [(N 307)], trans = 7},
{fin = [(N 307)], trans = 7},
{fin = [], trans = 9},
{fin = [], trans = 9},
{fin = [(N 330)], trans = 11},
{fin = [(N 330)], trans = 11},
{fin = [], trans = 13},
{fin = [], trans = 13},
{fin = [(N 197)], trans = 15},
{fin = [(N 197)], trans = 15},
{fin = [], trans = 17},
{fin = [], trans = 17},
{fin = [(N 206)], trans = 19},
{fin = [(N 206)], trans = 19},
{fin = [(N 180)], trans = 21},
{fin = [(N 180)], trans = 21},
{fin = [(N 172),(N 174)], trans = 0},
{fin = [(N 174)], trans = 0},
{fin = [(N 55),(N 64),(N 174)], trans = 25},
{fin = [(N 55),(N 64)], trans = 26},
{fin = [(N 55)], trans = 27},
{fin = [(N 96)], trans = 28},
{fin = [], trans = 29},
{fin = [], trans = 30},
{fin = [(N 86)], trans = 30},
{fin = [], trans = 32},
{fin = [(N 86)], trans = 33},
{fin = [], trans = 34},
{fin = [], trans = 35},
{fin = [(N 86)], trans = 35},
{fin = [(N 96)], trans = 37},
{fin = [], trans = 38},
{fin = [(N 107)], trans = 38},
{fin = [(N 12),(N 174)], trans = 0},
{fin = [(N 55),(N 64),(N 174)], trans = 26},
{fin = [(N 10),(N 174)], trans = 0},
{fin = [(N 44),(N 174)], trans = 43},
{fin = [(N 44)], trans = 43},
{fin = [(N 55),(N 66),(N 174)], trans = 27},
{fin = [(N 6),(N 174)], trans = 0},
{fin = [(N 19),(N 174)], trans = 0},
{fin = [(N 14),(N 174)], trans = 0},
{fin = [(N 21),(N 174)], trans = 0},
{fin = [(N 89),(N 92),(N 174)], trans = 50},
{fin = [(N 89),(N 92)], trans = 50},
{fin = [(N 92),(N 174)], trans = 52},
{fin = [], trans = 53},
{fin = [(N 101)], trans = 53},
{fin = [], trans = 55},
{fin = [], trans = 56},
{fin = [(N 118)], trans = 56},
{fin = [(N 112)], trans = 58},
{fin = [(N 92)], trans = 59},
{fin = [(N 29),(N 174)], trans = 60},
{fin = [], trans = 61},
{fin = [(N 33)], trans = 0},
{fin = [(N 8),(N 174)], trans = 0},
{fin = [(N 55),(N 64),(N 174)], trans = 64},
{fin = [(N 170)], trans = 0},
{fin = [(N 27),(N 174)], trans = 0},
{fin = [(N 25),(N 174)], trans = 67},
{fin = [(N 167)], trans = 68},
{fin = [], trans = 69},
{fin = [], trans = 70},
{fin = [], trans = 71},
{fin = [], trans = 72},
{fin = [], trans = 73},
{fin = [], trans = 74},
{fin = [], trans = 75},
{fin = [], trans = 76},
{fin = [(N 164)], trans = 76},
{fin = [], trans = 78},
{fin = [], trans = 79},
{fin = [], trans = 80},
{fin = [], trans = 81},
{fin = [], trans = 82},
{fin = [(N 149)], trans = 82},
{fin = [], trans = 84},
{fin = [], trans = 85},
{fin = [], trans = 86},
{fin = [], trans = 87},
{fin = [], trans = 88},
{fin = [(N 135)], trans = 88},
{fin = [(N 174)], trans = 90},
{fin = [(N 41)], trans = 91},
{fin = [], trans = 92},
{fin = [], trans = 93},
{fin = [], trans = 94},
{fin = [(N 23),(N 174)], trans = 0},
{fin = [(N 55),(N 64),(N 174)], trans = 96},
{fin = [(N 17)], trans = 0},
{fin = [(N 123)], trans = 0},
{fin = [(N 120),(N 174)], trans = 0},
{fin = [(N 2),(N 174)], trans = 100},
{fin = [(N 2)], trans = 100},
{fin = [(N 4)], trans = 0},
{fin = [(N 225)], trans = 0},
{fin = [(N 225)], trans = 104},
{fin = [(N 223)], trans = 0},
{fin = [(N 225)], trans = 106},
{fin = [(N 218)], trans = 0},
{fin = [(N 220)], trans = 0},
{fin = [(N 302)], trans = 0},
{fin = [(N 302)], trans = 110},
{fin = [(N 236),(N 278),(N 302)], trans = 111},
{fin = [(N 257)], trans = 0},
{fin = [(N 254)], trans = 0},
{fin = [(N 251)], trans = 0},
{fin = [(N 248)], trans = 0},
{fin = [(N 245)], trans = 0},
{fin = [(N 242)], trans = 0},
{fin = [(N 239)], trans = 0},
{fin = [], trans = 119},
{fin = [(N 271)], trans = 0},
{fin = [(N 267),(N 271)], trans = 0},
{fin = [(N 260)], trans = 0},
{fin = [], trans = 123},
{fin = [], trans = 124},
{fin = [(N 276)], trans = 0},
{fin = [(N 263)], trans = 0},
{fin = [(N 236)], trans = 127},
{fin = [(N 232)], trans = 0},
{fin = [(N 227),(N 302)], trans = 0},
{fin = [(N 280),(N 302)], trans = 0},
{fin = [(N 229),(N 280)], trans = 0},
{fin = [(N 311)], trans = 0},
{fin = [(N 309),(N 311)], trans = 0},
{fin = [(N 307),(N 311)], trans = 134},
{fin = [(N 307)], trans = 134},
{fin = [(N 304)], trans = 0},
{fin = [(N 325)], trans = 0},
{fin = [(N 321),(N 325)], trans = 0},
{fin = [(N 319),(N 325)], trans = 139},
{fin = [(N 314)], trans = 0},
{fin = [(N 317)], trans = 0},
{fin = [(N 323)], trans = 0},
{fin = [(N 346)], trans = 0},
{fin = [(N 342),(N 346)], trans = 144},
{fin = [(N 342)], trans = 144},
{fin = [(N 333),(N 346)], trans = 146},
{fin = [(N 333)], trans = 146},
{fin = [(N 344),(N 346)], trans = 0},
{fin = [(N 330),(N 346)], trans = 149},
{fin = [(N 330)], trans = 149},
{fin = [(N 327)], trans = 0},
{fin = [(N 215)], trans = 0},
{fin = [(N 190),(N 215)], trans = 153},
{fin = [(N 190)], trans = 153},
{fin = [(N 215)], trans = 155},
{fin = [(N 213)], trans = 0},
{fin = [(N 195)], trans = 157},
{fin = [(N 195),(N 197)], trans = 158},
{fin = [(N 192)], trans = 0},
{fin = [(N 215)], trans = 160},
{fin = [(N 200),(N 213)], trans = 0},
{fin = [(N 204),(N 215)], trans = 0},
{fin = [(N 215)], trans = 163},
{fin = [(N 204)], trans = 0},
{fin = [], trans = 163},
{fin = [(N 206),(N 215)], trans = 166},
{fin = [(N 206)], trans = 166},
{fin = [(N 206),(N 215)], trans = 168},
{fin = [(N 206),(N 213)], trans = 166},
{fin = [(N 215)], trans = 170},
{fin = [], trans = 171},
{fin = [(N 210)], trans = 0},
{fin = [(N 187)], trans = 0},
{fin = [(N 177),(N 187)], trans = 174},
{fin = [(N 177)], trans = 174},
{fin = [(N 187)], trans = 176},
{fin = [(N 185)], trans = 0},
{fin = [(N 180),(N 187)], trans = 178},
{fin = [(N 180)], trans = 178},
{fin = [(N 182)], trans = 0}])
end
structure StartStates =
	struct
	datatype yystartstate = STARTSTATE of int

(* start state definitions *)

val A = STARTSTATE 3;
val AQ = STARTSTATE 11;
val F = STARTSTATE 7;
val IMP = STARTSTATE 21;
val INITIAL = STARTSTATE 1;
val L = STARTSTATE 13;
val LL = STARTSTATE 15;
val LLC = STARTSTATE 17;
val LLCQ = STARTSTATE 19;
val Q = STARTSTATE 9;
val S = STARTSTATE 5;

end
type result = UserDeclarations.lexresult
	exception LexerError (* raised if illegal leaf action tried *)
end

fun makeLexer yyinput = 
let 
	val yyb = ref "\n" 		(* buffer *)
	val yybl = ref 1		(*buffer length *)
	val yybufpos = ref 1		(* location of next character to use *)
	val yygone = ref 1		(* position in file of beginning of buffer *)
	val yydone = ref false		(* eof found yet? *)
	val yybegin = ref 1		(*Current 'start state' for lexer *)

	val YYBEGIN = fn (Internal.StartStates.STARTSTATE x) =>
		 yybegin := x

fun lex (yyarg as ({comLevel,sourceMap,err,charlist,stringstart,stringtype,brack_stack})) =
let fun continue() : Internal.result = 
  let fun scan (s,AcceptingLeaves : Internal.yyfinstate list list,l,i0) =
	let fun action (i,nil) = raise LexError
	| action (i,nil::l) = action (i-1,l)
	| action (i,(node::acts)::l) =
		case node of
		    Internal.N yyk => 
			(let val yytext = substring(!yyb,i0,i-i0)
			     val yypos = i0+ !yygone
			fun REJECT() = action(i,acts::l)
			open UserDeclarations Internal.StartStates
 in (yybufpos := i; case yyk of 

			(* Application actions *)

  10 => (Tokens.LBRACE(yypos,yypos+1))
| 101 => (Tokens.INT0(xtoi(yytext, 2),yypos,yypos+size yytext))
| 107 => (Tokens.INT0(IntInf.~(xtoi(yytext, 3)),yypos,yypos+size yytext))
| 112 => (Tokens.WORD(atoi(yytext, 2),yypos,yypos+size yytext))
| 118 => (Tokens.WORD(xtoi(yytext, 3),yypos,yypos+size yytext))
| 12 => (Tokens.RBRACE(yypos,yypos+1))
| 120 => (charlist := [""]; stringstart := yypos;
                    stringtype := true; YYBEGIN S; continue())
| 123 => (charlist := [""]; stringstart := yypos;
                    stringtype := false; YYBEGIN S; continue())
| 135 => (YYBEGIN L; stringstart := yypos; comLevel := 1; continue())
| 14 => (Tokens.LBRACKET(yypos,yypos+1))
| 149 => (YYBEGIN IMP; comLevel := 1; Tokens.IMPORT(yypos, yypos+9))
| 164 => (YYBEGIN IMP; comLevel := 1; Tokens.INCLUDE(yypos, yypos+10))
| 167 => (YYBEGIN A; stringstart := yypos; comLevel := 1; continue())
| 17 => (Tokens.VECTORSTART(yypos,yypos+1))
| 170 => (err (yypos,yypos+1) COMPLAIN "unmatched close comment"
		        nullErrorBody;
		    continue())
| 172 => (err (yypos,yypos) COMPLAIN "non-Ascii character"
		        nullErrorBody;
		    continue())
| 174 => (err (yypos,yypos) COMPLAIN "illegal token" nullErrorBody;
		    continue())
| 177 => (Tokens.STRING(yytext, yypos, yypos+size yytext))
| 180 => (continue())
| 182 => (SourceMap.newline sourceMap yypos; continue())
| 185 => (YYBEGIN INITIAL; comLevel := 0; continue())
| 187 => (err (yypos, yypos+1) COMPLAIN
			      "ill-formed (*$import...*) or (*$include...*)" nullErrorBody
		              ; YYBEGIN INITIAL; comLevel := 0; continue())
| 19 => (Tokens.RBRACKET(yypos,yypos+1))
| 190 => (YYBEGIN LL; charlist := [yytext]; continue())
| 192 => ((* cheat: take n > 0 dots *) continue())
| 195 => (YYBEGIN LLC; addString(charlist, yytext); continue())
| 197 => (YYBEGIN LLC; addString(charlist, "1");    continue()
		(* note hack, since ml-lex chokes on the empty string for 0* *))
| 2 => (continue())
| 200 => (YYBEGIN INITIAL; mysynch(sourceMap, yypos+2, !charlist); 
		              comLevel := 0; charlist := []; continue())
| 204 => (YYBEGIN LLCQ; continue())
| 206 => (addString(charlist, yytext); continue())
| 21 => (Tokens.SEMICOLON(yypos,yypos+1))
| 210 => (YYBEGIN INITIAL; mysynch(sourceMap, yypos+3, !charlist); 
		              comLevel := 0; charlist := []; continue())
| 213 => (err (!stringstart, yypos+1) WARN 
                       "ill-formed (*#line...*) taken as comment" nullErrorBody;
                     YYBEGIN INITIAL; comLevel := 0; charlist := []; continue())
| 215 => (err (!stringstart, yypos+1) WARN 
                       "ill-formed (*#line...*) taken as comment" nullErrorBody;
                     YYBEGIN A; continue())
| 218 => (inc comLevel; continue())
| 220 => (SourceMap.newline sourceMap yypos; continue())
| 223 => (dec comLevel; if !comLevel=0 then YYBEGIN INITIAL else (); continue())
| 225 => (continue())
| 227 => (let val s = makeString charlist
                        val s = if size s <> 1 andalso not(!stringtype)
                                 then (err(!stringstart,yypos) COMPLAIN
                                      "character constant not length 1"
                                       nullErrorBody;
                                       substring(s^"x",0,1))
                                 else s
                        val t = (s,!stringstart,yypos+1)
                    in YYBEGIN INITIAL;
                       if !stringtype then Tokens.STRING t else Tokens.CHAR t
                    end)
| 229 => (err (!stringstart,yypos) COMPLAIN "unclosed string"
		        nullErrorBody;
		    SourceMap.newline sourceMap yypos;
		    YYBEGIN INITIAL; Tokens.STRING(makeString charlist,!stringstart,yypos))
| 23 => (Tokens.DOLLAR(yypos,yypos+1))
| 232 => (SourceMap.newline sourceMap (yypos+1);
		    YYBEGIN F; continue())
| 236 => (YYBEGIN F; continue())
| 239 => (addString(charlist, "\007"); continue())
| 242 => (addString(charlist, "\008"); continue())
| 245 => (addString(charlist, "\012"); continue())
| 248 => (addString(charlist, "\010"); continue())
| 25 => (if (null(!brack_stack))
                    then ()
                    else inc (hd (!brack_stack));
                    Tokens.LPAREN(yypos,yypos+1))
| 251 => (addString(charlist, "\013"); continue())
| 254 => (addString(charlist, "\009"); continue())
| 257 => (addString(charlist, "\011"); continue())
| 260 => (addString(charlist, "\\"); continue())
| 263 => (addString(charlist, "\""); continue())
| 267 => (addChar(charlist,
			Char.chr(Char.ord(String.sub(yytext,2))-Char.ord #"@"));
		    continue())
| 27 => (if (null(!brack_stack))
                    then ()
                    else if (!(hd (!brack_stack)) = 1)
                         then ( brack_stack := tl (!brack_stack);
                                charlist := [];
                                YYBEGIN Q)
                         else dec (hd (!brack_stack));
                    Tokens.RPAREN(yypos,yypos+1))
| 271 => (err(yypos,yypos+2) COMPLAIN "illegal control escape; must be one of \
	  \@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_" nullErrorBody;
	 continue())
| 276 => (let val x = Char.ord(String.sub(yytext,1))*100
	     +Char.ord(String.sub(yytext,2))*10
	     +Char.ord(String.sub(yytext,3))
	     -((Char.ord #"0")*111)
  in (if x>255
      then err (yypos,yypos+4) COMPLAIN "illegal ascii escape" nullErrorBody
      else addChar(charlist, Char.chr x);
      continue())
  end)
| 278 => (err (yypos,yypos+1) COMPLAIN "illegal string escape"
		        nullErrorBody; 
		    continue())
| 280 => (err (yypos,yypos+1) COMPLAIN "illegal non-printing character in string" nullErrorBody;
                    continue())
| 29 => (Tokens.DOT(yypos,yypos+1))
| 302 => (addString(charlist,yytext); continue())
| 304 => (SourceMap.newline sourceMap yypos; continue())
| 307 => (continue())
| 309 => (YYBEGIN S; stringstart := yypos; continue())
| 311 => (err (!stringstart,yypos) COMPLAIN "unclosed string"
		        nullErrorBody; 
		    YYBEGIN INITIAL; Tokens.STRING(makeString charlist,!stringstart,yypos+1))
| 314 => (addString(charlist, "`"); continue())
| 317 => (addString(charlist, "^"); continue())
| 319 => (YYBEGIN AQ;
                    let val x = makeString charlist
                    in
                    Tokens.OBJL(x,yypos,yypos+(size x))
                    end)
| 321 => ((* a closing quote *)
                    YYBEGIN INITIAL;
                    let val x = makeString charlist
                    in
                    Tokens.ENDQ(x,yypos,yypos+(size x))
                    end)
| 323 => (SourceMap.newline sourceMap yypos; addString(charlist,"\n"); continue())
| 325 => (addString(charlist,yytext); continue())
| 327 => (SourceMap.newline sourceMap yypos; continue())
| 33 => (Tokens.DOTDOTDOT(yypos,yypos+3))
| 330 => (continue())
| 333 => (YYBEGIN Q; 
                    let val hash = StrgHash.hashString yytext
                    in
                    Tokens.AQID(FastSymbol.rawSymbol(hash,yytext),
				yypos,yypos+(size yytext))
                    end)
| 342 => (YYBEGIN Q; 
                    let val hash = StrgHash.hashString yytext
                    in
                    Tokens.AQID(FastSymbol.rawSymbol(hash,yytext),
				yypos,yypos+(size yytext))
                    end)
| 344 => (YYBEGIN INITIAL;
                    brack_stack := ((ref 1)::(!brack_stack));
                    Tokens.LPAREN(yypos,yypos+1))
| 346 => (err (yypos,yypos+1) COMPLAIN
		       ("ml lexer: bad character after antiquote "^yytext)
		       nullErrorBody;
                    Tokens.AQID(FastSymbol.rawSymbol(0,""),yypos,yypos))
| 4 => (SourceMap.newline sourceMap yypos; continue())
| 41 => (TokTable.checkTyvar(yytext,yypos))
| 44 => (TokTable.checkToken(yytext,yypos))
| 55 => (if (!Control.quotation)
                            then if (has_quote yytext)
                                 then REJECT()
                                 else TokTable.checkToken(yytext,yypos)
                            else TokTable.checkToken(yytext,yypos))
| 6 => (Tokens.WILD(yypos,yypos+1))
| 64 => (TokTable.checkToken(yytext,yypos))
| 66 => (if (!Control.quotation)
                            then (YYBEGIN Q;
                                  charlist := [];
                                  Tokens.BEGINQ(yypos,yypos+1))
                            else (err(yypos, yypos+1)
                                     COMPLAIN "quotation implementation error"
				     nullErrorBody;
                                  Tokens.BEGINQ(yypos,yypos+1)))
| 8 => (Tokens.COMMA(yypos,yypos+1))
| 86 => (Tokens.REAL(yytext,yypos,yypos+size yytext))
| 89 => (Tokens.INT(atoi(yytext, 0),yypos,yypos+size yytext))
| 92 => (Tokens.INT0(atoi(yytext, 0),yypos,yypos+size yytext))
| 96 => (Tokens.INT0(atoi(yytext, 0),yypos,yypos+size yytext))
| _ => raise Internal.LexerError

		) end )

	val {fin,trans} = Vector.sub(Internal.tab, s)
	val NewAcceptingLeaves = fin::AcceptingLeaves
	in if l = !yybl then
	     if trans = #trans(Vector.sub(Internal.tab,0))
	       then action(l,NewAcceptingLeaves
) else	    let val newchars= if !yydone then "" else yyinput 1024
	    in if (size newchars)=0
		  then (yydone := true;
		        if (l=i0) then UserDeclarations.eof yyarg
		                  else action(l,NewAcceptingLeaves))
		  else (if i0=l then yyb := newchars
		     else yyb := substring(!yyb,i0,l-i0)^newchars;
		     yygone := !yygone+i0;
		     yybl := size (!yyb);
		     scan (s,AcceptingLeaves,l-i0,0))
	    end
	  else let val NewChar = Char.ord(String.sub(!yyb,l))
		val NewState = if NewChar<128 then Char.ord(String.sub(trans,NewChar)) else Char.ord(String.sub(trans,128))
		in if NewState=0 then action(l,NewAcceptingLeaves)
		else scan(NewState,NewAcceptingLeaves,l+1,i0)
	end
	end
(*
	val start= if substring(!yyb,!yybufpos-1,1)="\n"
then !yybegin+1 else !yybegin
*)
	in scan(!yybegin (* start *),nil,!yybufpos,!yybufpos)
    end
in continue end
  in lex
  end
end
