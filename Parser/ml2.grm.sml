functor MLLrValsFun(structure Token : TOKEN)
 : sig structure ParserData : PARSER_DATA
       structure Tokens : ML_TOKENS
   end
 = 
struct
structure ParserData=
struct
structure Header = 
struct
(* ml.grm
 *
 * Copyright 1989,1992 by AT&T Bell Laboratories
 *)
(* See ml.grm's CVS revision 1.14 for PvalDec and PletExp. *)
(* Based on grammar in SML/NJ 110.0.7 *)

open Ast ErrorMsg Symbol FastSymbol AstUtil Fixity

type raw_symbol = FastSymbol.raw_symbol

fun markexp (e as MarkExp _, _, _) = e
  | markexp(e,a,b) = MarkExp(e,(a,b))

fun markdec(d as MarkDec _, _,_) = d
  | markdec(d,a,b) = MarkDec(d,(a,b))

fun marktop(t as MarkTop _, _,_) = t
  | marktop(t,a,b) = MarkTop(t,(a,b))

val asteriskHash = StrgHash.hashString "*"
val asteriskString = "*"
val equalHash = StrgHash.hashString "="
val equalString = "="
val bogusHash = StrgHash.hashString "BOGUS"
val bogusString = "BOGUS"
val quotedBogusHash = StrgHash.hashString "'BOGUS"
val quotedBogusString = "'BOGUS"
val quotedBogusHash = StrgHash.hashString "'BOGUS"
val quotedBogusString = "'BOGUS"

  
end
structure LrTable = Token.LrTable
structure Token = Token
local open LrTable in 
val table=let val actionRows =
"\
\\001\000\001\000\000\000\002\000\000\000\000\000\
\\001\000\001\000\076\002\002\000\076\002\003\000\076\002\012\000\076\002\
\\013\000\076\002\014\000\076\002\016\000\076\002\017\000\076\002\
\\019\000\076\002\021\000\076\002\022\000\076\002\023\000\076\002\
\\024\000\076\002\025\000\076\002\026\000\076\002\027\000\073\002\
\\028\000\076\002\030\000\076\002\031\000\076\002\032\000\076\002\
\\035\000\076\002\036\000\076\002\037\000\076\002\038\000\076\002\
\\040\000\076\002\041\000\076\002\042\000\076\002\044\000\076\002\
\\045\000\076\002\048\000\076\002\050\000\076\002\052\000\076\002\
\\053\000\076\002\054\000\076\002\055\000\076\002\056\000\076\002\
\\059\000\076\002\060\000\076\002\061\000\076\002\062\000\076\002\
\\063\000\076\002\064\000\076\002\065\000\076\002\068\000\073\002\
\\069\000\076\002\070\000\076\002\071\000\076\002\072\000\076\002\
\\073\000\076\002\074\000\076\002\000\000\
\\001\000\001\000\077\002\002\000\077\002\003\000\077\002\012\000\077\002\
\\013\000\077\002\014\000\077\002\016\000\077\002\017\000\077\002\
\\019\000\077\002\021\000\077\002\022\000\077\002\023\000\077\002\
\\024\000\077\002\025\000\077\002\026\000\077\002\027\000\074\002\
\\028\000\077\002\030\000\077\002\031\000\077\002\032\000\077\002\
\\035\000\077\002\036\000\077\002\037\000\077\002\038\000\077\002\
\\040\000\077\002\041\000\077\002\042\000\077\002\044\000\077\002\
\\045\000\077\002\048\000\077\002\050\000\077\002\052\000\077\002\
\\053\000\077\002\054\000\077\002\055\000\077\002\056\000\077\002\
\\059\000\077\002\060\000\077\002\061\000\077\002\062\000\077\002\
\\063\000\077\002\064\000\077\002\065\000\077\002\068\000\074\002\
\\069\000\077\002\070\000\077\002\071\000\077\002\072\000\077\002\
\\073\000\077\002\074\000\077\002\000\000\
\\001\000\003\000\044\000\000\000\
\\001\000\003\000\056\000\007\000\069\000\023\000\055\000\061\000\054\000\000\000\
\\001\000\003\000\056\000\007\000\071\000\023\000\055\000\061\000\054\000\000\000\
\\001\000\003\000\056\000\023\000\055\000\047\000\118\000\061\000\054\000\000\000\
\\001\000\003\000\056\000\023\000\055\000\047\000\028\002\061\000\054\000\000\000\
\\001\000\003\000\056\000\023\000\055\000\049\000\075\000\061\000\054\000\
\\068\000\074\000\000\000\
\\001\000\003\000\056\000\023\000\055\000\061\000\054\000\000\000\
\\001\000\003\000\064\000\023\000\055\000\039\000\171\001\051\000\170\001\
\\061\000\054\000\000\000\
\\001\000\003\000\064\000\023\000\055\000\054\000\063\000\061\000\054\000\000\000\
\\001\000\003\000\064\000\023\000\055\000\054\000\007\001\061\000\054\000\000\000\
\\001\000\003\000\064\000\023\000\055\000\061\000\054\000\000\000\
\\001\000\003\000\087\000\004\000\086\000\068\000\085\000\000\000\
\\001\000\003\000\090\000\000\000\
\\001\000\003\000\113\000\004\000\086\000\005\000\112\000\006\000\111\000\
\\007\000\110\000\008\000\109\000\010\000\108\000\011\000\107\000\
\\043\000\106\000\047\000\105\000\058\000\104\000\061\000\103\000\
\\066\000\102\000\067\000\101\000\068\000\100\000\000\000\
\\001\000\003\000\113\000\004\000\086\000\005\000\112\000\006\000\111\000\
\\007\000\110\000\008\000\109\000\010\000\108\000\011\000\107\000\
\\043\000\106\000\058\000\104\000\061\000\103\000\066\000\102\000\
\\067\000\101\000\068\000\100\000\000\000\
\\001\000\003\000\113\000\004\000\145\000\005\000\112\000\006\000\111\000\
\\007\000\110\000\008\000\109\000\010\000\108\000\011\000\107\000\
\\043\000\106\000\058\000\104\000\061\000\103\000\066\000\102\000\
\\067\000\101\000\068\000\186\000\071\000\193\000\000\000\
\\001\000\003\000\113\000\005\000\112\000\006\000\111\000\007\000\110\000\
\\008\000\109\000\010\000\108\000\011\000\107\000\043\000\106\000\
\\047\000\105\000\058\000\104\000\061\000\103\000\066\000\102\000\
\\067\000\101\000\068\000\186\000\000\000\
\\001\000\003\000\113\000\005\000\112\000\006\000\111\000\007\000\110\000\
\\008\000\109\000\010\000\108\000\011\000\107\000\043\000\106\000\
\\047\000\209\000\058\000\104\000\061\000\103\000\066\000\102\000\
\\067\000\101\000\068\000\186\000\000\000\
\\001\000\003\000\113\000\005\000\112\000\006\000\111\000\007\000\110\000\
\\008\000\109\000\010\000\108\000\011\000\107\000\043\000\106\000\
\\058\000\104\000\061\000\103\000\066\000\102\000\067\000\101\000\
\\068\000\186\000\000\000\
\\001\000\003\000\113\000\005\000\112\000\006\000\111\000\007\000\110\000\
\\008\000\109\000\010\000\108\000\011\000\107\000\043\000\106\000\
\\058\000\104\000\061\000\103\000\066\000\102\000\067\000\101\000\
\\068\000\186\000\070\000\196\000\000\000\
\\001\000\003\000\113\000\005\000\112\000\006\000\111\000\007\000\110\000\
\\008\000\109\000\010\000\108\000\011\000\107\000\043\000\106\000\
\\058\000\104\000\061\000\103\000\066\000\102\000\067\000\101\000\
\\068\000\186\000\071\000\193\000\000\000\
\\001\000\003\000\135\000\004\000\086\000\068\000\085\000\000\000\
\\001\000\003\000\137\000\004\000\086\000\068\000\085\000\000\000\
\\001\000\003\000\143\000\000\000\
\\001\000\003\000\178\000\000\000\
\\001\000\003\000\181\000\000\000\
\\001\000\003\000\205\000\005\000\204\000\007\000\203\000\020\000\202\000\
\\061\000\103\000\000\000\
\\001\000\003\000\205\000\005\000\204\000\007\000\203\000\020\000\202\000\
\\061\000\103\000\069\000\201\000\000\000\
\\001\000\003\000\212\000\000\000\
\\001\000\003\000\245\000\000\000\
\\001\000\003\000\245\000\004\000\244\000\066\000\243\000\068\000\242\000\000\000\
\\001\000\003\000\057\001\005\000\112\000\006\000\111\000\007\000\110\000\
\\008\000\056\001\009\000\055\001\010\000\054\001\011\000\053\001\
\\018\000\052\001\023\000\055\000\029\000\051\001\033\000\050\001\
\\034\000\049\001\039\000\048\001\043\000\047\001\046\000\046\001\
\\057\000\045\001\061\000\054\000\066\000\044\001\067\000\043\001\
\\068\000\042\001\070\000\143\001\075\000\041\001\000\000\
\\001\000\003\000\057\001\005\000\112\000\006\000\111\000\007\000\110\000\
\\008\000\056\001\009\000\055\001\010\000\054\001\011\000\053\001\
\\018\000\052\001\023\000\055\000\029\000\051\001\033\000\050\001\
\\034\000\049\001\039\000\048\001\043\000\047\001\046\000\046\001\
\\057\000\045\001\061\000\054\000\066\000\044\001\067\000\043\001\
\\068\000\042\001\071\000\140\001\075\000\041\001\000\000\
\\001\000\003\000\057\001\005\000\112\000\006\000\111\000\007\000\110\000\
\\008\000\056\001\009\000\055\001\010\000\054\001\011\000\053\001\
\\018\000\052\001\023\000\055\000\029\000\051\001\033\000\050\001\
\\034\000\049\001\039\000\048\001\043\000\047\001\046\000\046\001\
\\057\000\045\001\061\000\054\000\066\000\044\001\067\000\043\001\
\\068\000\042\001\075\000\041\001\000\000\
\\001\000\003\000\110\001\005\000\204\000\007\000\203\000\061\000\103\000\000\000\
\\001\000\003\000\110\001\005\000\204\000\007\000\203\000\061\000\103\000\
\\069\000\109\001\000\000\
\\001\000\003\000\110\001\005\000\204\000\007\000\203\000\061\000\103\000\
\\069\000\147\001\000\000\
\\001\000\003\000\189\001\000\000\
\\001\000\003\000\190\001\000\000\
\\001\000\003\000\037\002\000\000\
\\001\000\004\000\145\000\000\000\
\\001\000\013\000\180\000\059\000\235\000\060\000\234\000\000\000\
\\001\000\013\000\213\000\059\000\180\001\000\000\
\\001\000\014\000\099\001\016\000\115\001\000\000\
\\001\000\014\000\099\001\016\000\173\001\000\000\
\\001\000\014\000\099\001\065\000\193\001\071\000\192\001\000\000\
\\001\000\014\000\121\001\015\000\120\001\000\000\
\\001\000\016\000\191\000\023\000\190\000\062\000\189\000\000\000\
\\001\000\016\000\191\000\023\000\069\001\062\000\189\000\000\000\
\\001\000\016\000\191\000\028\000\224\001\062\000\189\000\000\000\
\\001\000\016\000\191\000\062\000\189\000\065\000\060\001\071\000\059\001\000\000\
\\001\000\016\000\067\001\023\000\061\002\062\000\066\001\065\000\158\002\
\\069\000\158\002\000\000\
\\001\000\021\000\041\002\032\000\134\001\062\000\133\001\072\000\132\001\
\\073\000\131\001\000\000\
\\001\000\022\000\014\001\000\000\
\\001\000\022\000\123\001\000\000\
\\001\000\022\000\174\001\000\000\
\\001\000\022\000\181\001\000\000\
\\001\000\022\000\025\002\000\000\
\\001\000\022\000\035\002\000\000\
\\001\000\022\000\040\002\000\000\
\\001\000\022\000\047\002\000\000\
\\001\000\022\000\051\002\062\000\233\001\063\000\232\001\064\000\231\001\000\000\
\\001\000\022\000\054\002\000\000\
\\001\000\023\000\149\000\000\000\
\\001\000\023\000\151\000\000\000\
\\001\000\023\000\183\000\000\000\
\\001\000\023\000\233\000\000\000\
\\001\000\023\000\236\000\000\000\
\\001\000\023\000\026\001\000\000\
\\001\000\023\000\065\001\000\000\
\\001\000\023\000\072\001\000\000\
\\001\000\023\000\075\001\000\000\
\\001\000\023\000\086\001\000\000\
\\001\000\023\000\117\001\000\000\
\\001\000\023\000\175\001\000\000\
\\001\000\023\000\220\001\000\000\
\\001\000\023\000\245\001\056\000\158\000\000\000\
\\001\000\023\000\002\002\000\000\
\\001\000\023\000\055\002\056\000\158\000\000\000\
\\001\000\026\000\221\001\032\000\134\001\062\000\133\001\072\000\132\001\
\\073\000\131\001\000\000\
\\001\000\027\000\103\001\068\000\102\001\000\000\
\\001\000\027\000\251\001\068\000\102\001\071\000\250\001\000\000\
\\001\000\029\000\166\001\000\000\
\\001\000\032\000\134\001\042\000\226\001\062\000\133\001\072\000\132\001\
\\073\000\131\001\000\000\
\\001\000\032\000\134\001\053\000\223\001\062\000\133\001\072\000\132\001\
\\073\000\131\001\000\000\
\\001\000\035\000\222\000\000\000\
\\001\000\035\000\222\001\000\000\
\\001\000\035\000\249\001\000\000\
\\001\000\035\000\033\002\000\000\
\\001\000\035\000\045\002\000\000\
\\001\000\056\000\158\000\071\000\010\001\000\000\
\\001\000\062\000\139\000\000\000\
\\001\000\062\000\147\000\000\000\
\\001\000\062\000\147\000\068\000\174\000\000\000\
\\001\000\062\000\154\000\000\000\
\\001\000\062\000\184\000\000\000\
\\001\000\062\000\220\000\000\000\
\\001\000\062\000\247\000\000\000\
\\001\000\062\000\012\001\000\000\
\\001\000\062\000\018\001\000\000\
\\001\000\062\000\079\001\000\000\
\\001\000\062\000\196\001\000\000\
\\001\000\062\000\233\001\063\000\232\001\064\000\231\001\071\000\043\002\000\000\
\\001\000\062\000\049\002\000\000\
\\001\000\068\000\174\000\000\000\
\\001\000\068\000\136\001\000\000\
\\001\000\069\000\063\001\000\000\
\\001\000\069\000\194\001\000\000\
\\001\000\069\000\218\001\000\000\
\\001\000\070\000\061\001\000\000\
\\001\000\070\000\216\001\000\000\
\\001\000\071\000\250\000\000\000\
\\001\000\071\000\009\001\000\000\
\\001\000\071\000\027\001\000\000\
\\001\000\071\000\125\001\000\000\
\\001\000\071\000\191\001\000\000\
\\001\000\071\000\212\001\000\000\
\\001\000\071\000\215\001\000\000\
\\001\000\071\000\228\001\000\000\
\\001\000\071\000\004\002\000\000\
\\001\000\071\000\042\002\000\000\
\\001\000\076\000\004\000\077\000\003\000\000\000\
\\058\002\000\000\
\\059\002\000\000\
\\060\002\000\000\
\\061\002\000\000\
\\061\002\027\000\211\000\000\000\
\\062\002\000\000\
\\063\002\000\000\
\\063\002\027\000\153\000\000\000\
\\063\002\027\000\158\001\000\000\
\\063\002\062\000\012\001\000\000\
\\064\002\000\000\
\\065\002\000\000\
\\066\002\000\000\
\\067\002\019\000\032\001\043\000\047\000\000\000\
\\067\002\019\000\093\001\043\000\047\000\000\000\
\\067\002\043\000\047\000\000\000\
\\068\002\000\000\
\\069\002\000\000\
\\070\002\000\000\
\\071\002\000\000\
\\072\002\000\000\
\\073\002\000\000\
\\074\002\000\000\
\\075\002\000\000\
\\078\002\014\000\099\001\000\000\
\\079\002\000\000\
\\080\002\065\000\195\001\000\000\
\\081\002\000\000\
\\082\002\000\000\
\\083\002\000\000\
\\084\002\000\000\
\\085\002\000\000\
\\086\002\000\000\
\\087\002\000\000\
\\088\002\000\000\
\\089\002\003\000\245\000\061\000\101\001\000\000\
\\090\002\000\000\
\\091\002\014\000\099\001\000\000\
\\092\002\003\000\245\000\061\000\101\001\000\000\
\\093\002\014\000\099\001\065\000\193\001\000\000\
\\094\002\000\000\
\\095\002\017\000\225\001\000\000\
\\096\002\000\000\
\\097\002\032\000\134\001\062\000\133\001\072\000\132\001\073\000\131\001\000\000\
\\098\002\032\000\134\001\062\000\133\001\072\000\132\001\073\000\131\001\000\000\
\\099\002\000\000\
\\100\002\065\000\219\001\000\000\
\\101\002\002\000\214\001\032\000\134\001\062\000\133\001\065\000\213\001\
\\072\000\132\001\073\000\131\001\000\000\
\\101\002\002\000\214\001\032\000\134\001\062\000\133\001\072\000\132\001\
\\073\000\131\001\000\000\
\\102\002\000\000\
\\103\002\000\000\
\\104\002\062\000\133\001\073\000\131\001\000\000\
\\105\002\062\000\133\001\000\000\
\\106\002\014\000\099\001\000\000\
\\107\002\000\000\
\\108\002\000\000\
\\109\002\000\000\
\\110\002\032\000\134\001\062\000\133\001\072\000\132\001\073\000\131\001\000\000\
\\111\002\032\000\134\001\062\000\133\001\072\000\132\001\073\000\131\001\000\000\
\\112\002\032\000\134\001\062\000\133\001\072\000\132\001\073\000\131\001\000\000\
\\113\002\000\000\
\\114\002\003\000\057\001\005\000\112\000\006\000\111\000\007\000\110\000\
\\008\000\056\001\009\000\055\001\010\000\054\001\011\000\053\001\
\\023\000\055\000\033\000\050\001\039\000\048\001\043\000\047\001\
\\061\000\054\000\066\000\044\001\067\000\043\001\068\000\042\001\000\000\
\\115\002\003\000\057\001\005\000\112\000\006\000\111\000\007\000\110\000\
\\008\000\056\001\009\000\055\001\010\000\054\001\011\000\053\001\
\\023\000\055\000\033\000\050\001\039\000\048\001\043\000\047\001\
\\061\000\054\000\066\000\044\001\067\000\043\001\068\000\042\001\000\000\
\\116\002\000\000\
\\117\002\000\000\
\\118\002\000\000\
\\119\002\000\000\
\\120\002\000\000\
\\121\002\000\000\
\\122\002\000\000\
\\123\002\000\000\
\\124\002\000\000\
\\125\002\000\000\
\\126\002\000\000\
\\127\002\000\000\
\\128\002\000\000\
\\129\002\000\000\
\\130\002\000\000\
\\131\002\000\000\
\\132\002\000\000\
\\133\002\000\000\
\\134\002\000\000\
\\135\002\032\000\134\001\062\000\133\001\065\000\213\001\072\000\132\001\
\\073\000\131\001\000\000\
\\136\002\032\000\134\001\062\000\133\001\065\000\217\001\072\000\132\001\
\\073\000\131\001\000\000\
\\137\002\000\000\
\\138\002\016\000\191\000\062\000\189\000\000\000\
\\139\002\014\000\099\001\000\000\
\\140\002\000\000\
\\141\002\000\000\
\\142\002\000\000\
\\143\002\000\000\
\\144\002\000\000\
\\145\002\000\000\
\\146\002\000\000\
\\147\002\000\000\
\\148\002\000\000\
\\149\002\000\000\
\\150\002\000\000\
\\151\002\000\000\
\\152\002\000\000\
\\153\002\000\000\
\\154\002\000\000\
\\155\002\000\000\
\\156\002\000\000\
\\157\002\016\000\191\000\062\000\189\000\000\000\
\\159\002\016\000\191\000\062\000\189\000\000\000\
\\160\002\014\000\099\001\016\000\229\001\000\000\
\\161\002\016\000\191\000\062\000\189\000\000\000\
\\162\002\000\000\
\\163\002\065\000\064\001\000\000\
\\164\002\000\000\
\\165\002\016\000\191\000\062\000\189\000\065\000\062\001\000\000\
\\166\002\000\000\
\\167\002\032\000\134\001\062\000\133\001\072\000\132\001\073\000\131\001\000\000\
\\168\002\013\000\187\000\000\000\
\\169\002\000\000\
\\170\002\000\000\
\\171\002\062\000\228\000\000\000\
\\172\002\014\000\099\001\000\000\
\\173\002\000\000\
\\174\002\013\000\068\001\000\000\
\\175\002\000\000\
\\176\002\000\000\
\\177\002\017\000\226\000\000\000\
\\178\002\000\000\
\\179\002\013\000\229\000\000\000\
\\180\002\000\000\
\\181\002\003\000\113\000\005\000\112\000\006\000\111\000\007\000\110\000\
\\008\000\109\000\010\000\108\000\011\000\107\000\043\000\106\000\
\\058\000\104\000\061\000\103\000\066\000\102\000\067\000\101\000\
\\068\000\186\000\000\000\
\\182\002\000\000\
\\183\002\032\000\134\001\062\000\133\001\072\000\132\001\073\000\131\001\000\000\
\\184\002\014\000\099\001\000\000\
\\185\002\013\000\213\000\000\000\
\\186\002\000\000\
\\187\002\000\000\
\\188\002\004\000\051\000\068\000\050\000\000\000\
\\189\002\000\000\
\\190\002\000\000\
\\191\002\065\000\251\000\000\000\
\\192\002\000\000\
\\193\002\013\000\180\000\000\000\
\\194\002\000\000\
\\195\002\000\000\
\\196\002\000\000\
\\197\002\017\000\127\001\000\000\
\\198\002\000\000\
\\199\002\042\000\206\001\000\000\
\\200\002\014\000\099\001\000\000\
\\201\002\023\000\091\001\042\000\090\001\000\000\
\\202\002\014\000\099\001\000\000\
\\203\002\000\000\
\\204\002\013\000\230\000\000\000\
\\205\002\003\000\064\000\023\000\055\000\061\000\054\000\000\000\
\\206\002\000\000\
\\207\002\003\000\056\000\023\000\055\000\061\000\054\000\000\000\
\\208\002\000\000\
\\209\002\000\000\
\\210\002\000\000\
\\211\002\000\000\
\\212\002\000\000\
\\213\002\000\000\
\\214\002\000\000\
\\215\002\000\000\
\\216\002\000\000\
\\217\002\000\000\
\\218\002\014\000\099\001\000\000\
\\219\002\013\000\213\000\000\000\
\\220\002\000\000\
\\221\002\013\000\180\000\060\000\232\000\000\000\
\\222\002\013\000\213\000\000\000\
\\223\002\000\000\
\\224\002\000\000\
\\225\002\013\000\230\000\000\000\
\\226\002\000\000\
\\227\002\000\000\
\\228\002\000\000\
\\229\002\013\000\001\002\032\000\134\001\062\000\133\001\072\000\132\001\
\\073\000\131\001\000\000\
\\230\002\000\000\
\\231\002\002\000\098\001\012\000\041\000\019\000\040\000\025\000\039\000\
\\030\000\038\000\037\000\018\000\038\000\017\000\040\000\097\001\
\\041\000\016\000\044\000\035\000\045\000\034\000\054\000\031\000\
\\055\000\030\000\074\000\029\000\000\000\
\\232\002\000\000\
\\233\002\000\000\
\\234\002\000\000\
\\235\002\002\000\168\000\003\000\167\000\019\000\023\000\023\000\055\000\
\\024\000\022\000\025\000\021\000\031\000\166\000\036\000\019\000\
\\048\000\014\000\049\000\075\000\052\000\012\000\054\000\011\000\
\\055\000\010\000\061\000\054\000\068\000\074\000\000\000\
\\235\002\002\000\168\000\003\000\020\001\019\000\023\000\024\000\022\000\
\\025\000\021\000\031\000\166\000\036\000\019\000\048\000\014\000\
\\052\000\012\000\054\000\011\000\055\000\010\000\000\000\
\\235\002\002\000\168\000\019\000\023\000\024\000\022\000\025\000\021\000\
\\031\000\166\000\036\000\019\000\047\000\170\000\048\000\014\000\
\\052\000\012\000\054\000\011\000\055\000\010\000\000\000\
\\235\002\002\000\168\000\019\000\023\000\024\000\022\000\025\000\021\000\
\\031\000\166\000\036\000\019\000\048\000\014\000\052\000\012\000\
\\054\000\011\000\055\000\010\000\000\000\
\\236\002\000\000\
\\237\002\000\000\
\\238\002\013\000\146\000\000\000\
\\239\002\013\000\146\000\000\000\
\\240\002\000\000\
\\241\002\013\000\180\000\060\000\179\000\000\000\
\\242\002\013\000\213\000\000\000\
\\243\002\013\000\142\000\000\000\
\\244\002\013\000\177\000\000\000\
\\245\002\013\000\140\000\000\000\
\\246\002\013\000\175\000\000\000\
\\247\002\013\000\150\000\000\000\
\\248\002\056\000\158\000\000\000\
\\249\002\000\000\
\\250\002\056\000\158\000\000\000\
\\251\002\013\000\171\000\000\000\
\\252\002\000\000\
\\253\002\000\000\
\\254\002\013\000\171\000\000\000\
\\255\002\013\000\148\000\000\000\
\\000\003\000\000\
\\001\003\000\000\
\\002\003\014\000\099\001\000\000\
\\003\003\002\000\024\000\019\000\023\000\024\000\022\000\025\000\021\000\
\\031\000\020\000\036\000\019\000\037\000\018\000\038\000\017\000\
\\041\000\016\000\045\000\015\000\048\000\014\000\050\000\013\000\
\\052\000\012\000\054\000\011\000\055\000\010\000\074\000\009\000\000\000\
\\004\003\000\000\
\\005\003\000\000\
\\006\003\003\000\056\000\023\000\055\000\061\000\054\000\000\000\
\\007\003\000\000\
\\008\003\013\000\146\000\000\000\
\\009\003\023\000\114\001\056\000\158\000\000\000\
\\010\003\000\000\
\\011\003\013\000\177\000\000\000\
\\012\003\000\000\
\\013\003\013\000\142\000\000\000\
\\014\003\023\000\249\000\000\000\
\\015\003\014\000\099\001\000\000\
\\016\003\013\000\140\000\000\000\
\\017\003\014\000\099\001\000\000\
\\018\003\013\000\175\000\000\000\
\\019\003\042\000\176\000\000\000\
\\020\003\014\000\099\001\000\000\
\\021\003\013\000\150\000\000\000\
\\022\003\000\000\
\\023\003\000\000\
\\024\003\023\000\151\000\000\000\
\\025\003\000\000\
\\026\003\013\000\116\001\000\000\
\\027\003\014\000\099\001\000\000\
\\028\003\000\000\
\\029\003\000\000\
\\030\003\000\000\
\\031\003\000\000\
\\031\003\003\000\056\000\023\000\055\000\061\000\054\000\000\000\
\\032\003\000\000\
\\033\003\000\000\
\\034\003\013\000\116\001\000\000\
\\035\003\056\000\158\000\000\000\
\\036\003\000\000\
\\037\003\062\000\218\000\063\000\217\000\064\000\216\000\000\000\
\\037\003\062\000\218\000\063\000\217\000\064\000\216\000\068\000\174\000\000\000\
\\038\003\056\000\158\000\000\000\
\\039\003\056\000\158\000\000\000\
\\040\003\056\000\158\000\000\000\
\\041\003\013\000\148\000\000\000\
\\042\003\056\000\158\000\000\000\
\\043\003\068\000\236\001\000\000\
\\044\003\000\000\
\\045\003\000\000\
\\046\003\000\000\
\\047\003\056\000\158\000\000\000\
\\048\003\056\000\158\000\000\000\
\\049\003\056\000\158\000\000\000\
\\050\003\068\000\236\001\000\000\
\\051\003\000\000\
\\052\003\000\000\
\\053\003\000\000\
\\054\003\000\000\
\\055\003\000\000\
\\056\003\002\000\243\001\003\000\064\000\012\000\041\000\019\000\040\000\
\\023\000\055\000\025\000\039\000\030\000\038\000\031\000\242\001\
\\037\000\018\000\038\000\017\000\039\000\171\001\040\000\241\001\
\\041\000\016\000\044\000\035\000\045\000\034\000\051\000\170\001\
\\052\000\240\001\054\000\031\000\055\000\030\000\061\000\054\000\
\\074\000\029\000\000\000\
\\056\003\002\000\243\001\012\000\041\000\019\000\040\000\025\000\039\000\
\\030\000\038\000\031\000\242\001\037\000\018\000\038\000\017\000\
\\040\000\241\001\041\000\016\000\044\000\035\000\045\000\034\000\
\\052\000\240\001\054\000\031\000\055\000\030\000\074\000\029\000\000\000\
\\057\003\000\000\
\\058\003\000\000\
\\059\003\002\000\042\000\012\000\041\000\019\000\040\000\025\000\039\000\
\\030\000\038\000\031\000\037\000\037\000\018\000\038\000\017\000\
\\040\000\036\000\041\000\016\000\044\000\035\000\045\000\034\000\
\\050\000\033\000\052\000\032\000\054\000\031\000\055\000\030\000\
\\074\000\029\000\000\000\
\\060\003\013\000\214\000\000\000\
\\061\003\000\000\
\\062\003\013\000\223\000\000\000\
\\063\003\013\000\214\000\000\000\
\\064\003\000\000\
\\065\003\062\000\233\001\063\000\232\001\064\000\231\001\000\000\
\\066\003\013\000\214\000\000\000\
\\067\003\013\000\148\000\000\000\
\\068\003\013\000\223\000\000\000\
\\069\003\013\000\214\000\000\000\
\\070\003\000\000\
\\071\003\000\000\
\\072\003\062\000\233\001\063\000\232\001\064\000\231\001\000\000\
\\073\003\062\000\233\001\063\000\232\001\064\000\231\001\000\000\
\\074\003\013\000\214\000\000\000\
\\075\003\056\000\158\000\000\000\
\\076\003\000\000\
\\077\003\068\000\174\000\000\000\
\\078\003\000\000\
\\079\003\062\000\233\001\063\000\232\001\064\000\231\001\000\000\
\\080\003\013\000\223\000\000\000\
\\081\003\000\000\
\\082\003\000\000\
\"
val actionRowNumbers =
"\124\000\077\001\136\001\077\001\
\\159\001\071\001\075\001\003\000\
\\140\000\003\001\009\000\009\000\
\\011\000\009\000\009\000\004\000\
\\005\000\008\000\009\000\009\000\
\\003\001\014\000\077\001\158\001\
\\136\001\148\001\042\001\015\000\
\\016\000\003\001\006\000\009\000\
\\009\000\013\000\136\001\009\000\
\\017\000\140\000\024\000\025\000\
\\136\001\078\001\094\000\063\001\
\\009\000\137\000\061\001\026\000\
\\043\000\001\001\056\001\095\000\
\\135\000\136\000\131\000\073\001\
\\066\000\097\001\065\001\067\000\
\\142\000\013\000\132\000\097\000\
\\028\001\022\001\026\001\009\000\
\\024\001\009\000\066\001\106\001\
\\050\001\052\001\072\001\057\001\
\\096\000\064\001\093\001\062\001\
\\027\000\059\001\028\000\043\000\
\\004\001\068\000\079\001\134\001\
\\098\000\019\000\212\000\029\001\
\\239\000\213\000\252\000\050\000\
\\220\000\215\000\018\000\022\000\
\\030\000\130\000\224\000\020\000\
\\009\000\223\000\222\000\221\000\
\\127\000\126\000\125\000\129\000\
\\031\000\034\001\143\001\112\001\
\\009\000\144\001\099\000\041\001\
\\020\001\088\000\145\001\146\001\
\\113\001\021\000\248\000\242\000\
\\031\001\250\000\040\001\009\000\
\\036\001\069\000\044\000\070\000\
\\135\001\033\000\140\000\100\000\
\\003\001\088\001\114\000\006\001\
\\009\000\008\000\009\000\008\000\
\\011\000\013\000\096\001\013\000\
\\033\000\023\001\027\001\025\001\
\\012\000\067\001\080\001\115\000\
\\093\000\053\001\153\001\105\001\
\\009\000\134\000\053\001\056\000\
\\053\001\009\000\102\000\070\001\
\\051\001\009\000\033\000\003\001\
\\086\001\003\001\025\000\071\000\
\\116\000\138\000\033\000\030\001\
\\023\000\019\000\253\000\033\000\
\\036\000\021\000\053\000\216\000\
\\112\000\236\000\225\000\109\000\
\\234\000\072\000\143\000\227\000\
\\235\000\145\000\144\000\054\000\
\\241\000\245\000\051\000\020\000\
\\218\000\013\000\073\000\003\001\
\\009\000\074\000\008\000\008\000\
\\008\000\103\000\033\000\021\001\
\\136\001\009\000\112\001\032\001\
\\021\000\075\000\033\000\021\000\
\\140\000\016\001\003\001\139\000\
\\003\001\046\001\140\000\076\001\
\\161\000\163\000\083\000\158\000\
\\033\000\038\000\152\000\001\000\
\\090\001\033\000\087\001\033\000\
\\002\001\043\000\082\001\083\001\
\\117\001\118\001\095\001\099\001\
\\098\001\141\000\046\000\109\001\
\\076\000\003\001\081\001\049\000\
\\111\001\054\001\008\000\055\001\
\\107\001\057\000\069\001\107\000\
\\008\000\117\000\101\000\092\001\
\\094\001\085\001\060\001\008\001\
\\140\000\005\001\012\001\011\001\
\\009\001\009\000\013\000\033\001\
\\240\000\211\000\186\000\179\000\
\\238\000\192\000\187\000\108\000\
\\035\000\034\000\039\000\036\000\
\\036\000\009\000\046\001\036\000\
\\037\000\021\000\036\000\196\000\
\\195\000\194\000\193\000\133\000\
\\210\000\214\000\021\000\226\000\
\\021\000\228\000\029\000\021\000\
\\033\000\021\000\020\000\085\000\
\\247\000\219\000\033\000\000\001\
\\151\001\010\000\116\001\115\001\
\\114\001\008\000\047\000\058\000\
\\157\001\107\000\077\000\249\000\
\\036\000\243\000\251\000\019\001\
\\033\000\013\000\037\001\013\000\
\\045\000\059\000\046\001\046\001\
\\046\001\033\000\157\000\033\000\
\\040\000\041\000\118\000\048\000\
\\110\000\151\000\104\000\154\000\
\\128\000\091\001\089\001\007\001\
\\013\000\036\000\012\000\013\000\
\\013\000\008\000\104\001\103\001\
\\152\001\108\001\068\001\154\001\
\\010\001\140\000\014\001\058\001\
\\188\000\036\000\036\000\033\000\
\\021\000\189\000\036\000\119\000\
\\172\000\120\000\200\000\113\000\
\\208\000\204\000\111\000\171\000\
\\078\000\199\000\082\000\184\000\
\\190\000\089\000\087\000\197\000\
\\052\000\166\000\180\000\086\000\
\\013\000\121\000\237\000\233\000\
\\229\000\231\000\230\000\246\000\
\\021\000\255\000\150\001\119\001\
\\133\001\133\001\079\000\036\000\
\\147\001\010\000\254\000\017\001\
\\018\001\035\001\046\001\038\001\
\\047\001\090\000\048\001\162\000\
\\159\000\160\000\084\000\146\000\
\\002\000\032\000\156\000\033\000\
\\153\000\037\000\033\000\084\001\
\\074\001\044\001\100\001\102\001\
\\080\000\110\001\155\001\013\001\
\\033\000\177\000\176\000\178\000\
\\175\000\122\000\202\000\036\000\
\\036\000\201\000\203\000\036\000\
\\198\000\037\000\036\000\036\000\
\\036\000\036\000\036\000\021\000\
\\021\000\191\000\217\000\021\000\
\\244\000\008\000\008\000\008\000\
\\126\001\120\001\132\001\060\000\
\\133\001\141\001\007\000\133\001\
\\009\000\133\001\091\000\010\000\
\\043\001\156\001\061\000\046\001\
\\148\000\042\000\155\000\165\000\
\\164\000\150\000\149\000\036\000\
\\033\000\015\001\185\000\206\000\
\\207\000\173\000\174\000\209\000\
\\170\000\169\000\182\000\062\000\
\\055\000\168\000\167\000\181\000\
\\232\000\125\001\124\001\123\001\
\\127\001\123\000\105\000\121\001\
\\130\001\137\001\009\000\092\000\
\\139\001\140\001\131\001\010\000\
\\149\001\039\001\063\000\147\000\
\\045\001\101\001\205\000\036\000\
\\129\001\128\001\106\000\133\001\
\\064\000\046\001\183\000\008\000\
\\065\000\122\001\049\001\081\000\
\\138\001\010\000\142\001\000\000"
val gotoT =
"\
\\085\000\055\002\000\000\
\\052\000\006\000\057\000\005\000\058\000\004\000\059\000\003\000\000\000\
\\052\000\026\000\053\000\025\000\079\000\024\000\080\000\023\000\000\000\
\\052\000\006\000\057\000\005\000\058\000\041\000\059\000\003\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\004\000\044\000\065\000\043\000\000\000\
\\042\000\047\000\063\000\046\000\000\000\
\\001\000\051\000\061\000\050\000\000\000\
\\001\000\056\000\072\000\055\000\000\000\
\\001\000\060\000\005\000\059\000\067\000\058\000\068\000\057\000\000\000\
\\001\000\063\000\000\000\
\\001\000\065\000\051\000\064\000\000\000\
\\001\000\065\000\051\000\066\000\000\000\
\\001\000\065\000\051\000\068\000\000\000\
\\001\000\071\000\070\000\070\000\000\000\
\\001\000\076\000\061\000\075\000\062\000\074\000\000\000\
\\001\000\078\000\066\000\077\000\000\000\
\\042\000\080\000\064\000\079\000\000\000\
\\043\000\082\000\045\000\081\000\000\000\
\\052\000\006\000\057\000\005\000\058\000\086\000\059\000\003\000\000\000\
\\000\000\
\\052\000\026\000\053\000\025\000\079\000\024\000\080\000\087\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\002\000\097\000\003\000\096\000\025\000\095\000\026\000\094\000\
\\027\000\093\000\032\000\092\000\033\000\091\000\039\000\090\000\
\\043\000\089\000\000\000\
\\041\000\113\000\042\000\112\000\000\000\
\\001\000\115\000\081\000\114\000\000\000\
\\001\000\056\000\072\000\117\000\000\000\
\\001\000\118\000\000\000\
\\001\000\060\000\005\000\120\000\050\000\119\000\000\000\
\\052\000\026\000\053\000\025\000\079\000\024\000\080\000\121\000\000\000\
\\001\000\124\000\081\000\123\000\084\000\122\000\000\000\
\\002\000\097\000\003\000\096\000\026\000\094\000\027\000\093\000\
\\037\000\129\000\038\000\128\000\039\000\127\000\040\000\126\000\
\\043\000\125\000\000\000\
\\004\000\131\000\049\000\130\000\000\000\
\\043\000\082\000\045\000\132\000\000\000\
\\043\000\082\000\045\000\134\000\000\000\
\\052\000\026\000\053\000\025\000\079\000\024\000\080\000\136\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\139\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\044\000\142\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\060\000\005\000\059\000\068\000\150\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\065\000\051\000\153\000\000\000\
\\000\000\
\\001\000\065\000\051\000\154\000\000\000\
\\000\000\
\\001\000\065\000\051\000\155\000\000\000\
\\000\000\
\\001\000\158\000\060\000\157\000\000\000\
\\001\000\163\000\056\000\162\000\057\000\161\000\070\000\160\000\
\\082\000\159\000\000\000\
\\056\000\167\000\057\000\161\000\000\000\
\\000\000\
\\000\000\
\\073\000\171\000\083\000\170\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\044\000\180\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\002\000\097\000\003\000\096\000\025\000\095\000\026\000\094\000\
\\027\000\093\000\032\000\092\000\033\000\183\000\039\000\090\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\002\000\097\000\003\000\096\000\026\000\094\000\027\000\093\000\
\\039\000\186\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\002\000\097\000\003\000\096\000\025\000\190\000\026\000\094\000\
\\027\000\093\000\039\000\090\000\044\000\180\000\000\000\
\\002\000\097\000\003\000\096\000\025\000\193\000\026\000\094\000\
\\027\000\093\000\031\000\192\000\039\000\090\000\000\000\
\\002\000\198\000\006\000\197\000\028\000\196\000\029\000\195\000\000\000\
\\000\000\
\\000\000\
\\002\000\097\000\003\000\096\000\025\000\206\000\026\000\094\000\
\\027\000\093\000\035\000\205\000\036\000\204\000\039\000\090\000\000\000\
\\001\000\208\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\071\000\213\000\000\000\
\\001\000\217\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\060\000\005\000\120\000\050\000\219\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\071\000\213\000\083\000\222\000\000\000\
\\002\000\097\000\003\000\096\000\026\000\094\000\027\000\093\000\
\\037\000\129\000\038\000\223\000\039\000\127\000\040\000\126\000\000\000\
\\000\000\
\\034\000\225\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\229\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\007\000\239\000\008\000\238\000\011\000\237\000\012\000\236\000\
\\013\000\235\000\000\000\
\\004\000\044\000\065\000\244\000\000\000\
\\000\000\
\\042\000\047\000\063\000\246\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\051\000\061\000\250\000\000\000\
\\001\000\163\000\070\000\251\000\000\000\
\\001\000\056\000\072\000\252\000\000\000\
\\001\000\163\000\070\000\253\000\000\000\
\\001\000\060\000\005\000\059\000\067\000\254\000\068\000\057\000\000\000\
\\001\000\060\000\005\000\000\001\068\000\255\000\000\000\
\\000\000\
\\001\000\060\000\005\000\001\001\000\000\
\\007\000\239\000\008\000\238\000\011\000\237\000\012\000\236\000\
\\013\000\002\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\060\000\005\000\004\001\069\000\003\001\000\000\
\\000\000\
\\001\000\158\000\060\000\006\001\000\000\
\\000\000\
\\000\000\
\\056\000\009\001\057\000\161\000\000\000\
\\000\000\
\\000\000\
\\001\000\051\000\061\000\075\000\000\000\
\\000\000\
\\056\000\011\001\057\000\161\000\000\000\
\\000\000\
\\056\000\013\001\057\000\161\000\000\000\
\\001\000\015\001\062\000\014\001\000\000\
\\000\000\
\\000\000\
\\056\000\162\000\057\000\161\000\082\000\017\001\000\000\
\\001\000\078\000\066\000\019\001\000\000\
\\007\000\239\000\008\000\238\000\011\000\237\000\012\000\236\000\
\\013\000\020\001\000\000\
\\042\000\080\000\064\000\021\001\000\000\
\\000\000\
\\041\000\022\001\042\000\112\000\000\000\
\\043\000\082\000\045\000\023\001\000\000\
\\000\000\
\\000\000\
\\004\000\029\001\046\000\028\001\047\000\027\001\048\000\026\001\000\000\
\\007\000\239\000\008\000\238\000\011\000\237\000\012\000\236\000\
\\013\000\031\001\000\000\
\\000\000\
\\002\000\097\000\003\000\096\000\025\000\190\000\026\000\094\000\
\\027\000\093\000\039\000\090\000\000\000\
\\002\000\097\000\003\000\096\000\025\000\095\000\026\000\094\000\
\\027\000\093\000\032\000\092\000\033\000\032\001\039\000\090\000\000\000\
\\000\000\
\\007\000\239\000\008\000\238\000\011\000\237\000\012\000\236\000\
\\013\000\033\001\000\000\
\\001\000\038\001\003\000\037\001\020\000\036\001\021\000\035\001\
\\022\000\034\001\000\000\
\\002\000\097\000\003\000\096\000\025\000\056\001\026\000\094\000\
\\027\000\093\000\039\000\090\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\002\000\097\000\003\000\096\000\025\000\206\000\026\000\094\000\
\\027\000\093\000\035\000\205\000\036\000\068\001\039\000\090\000\000\000\
\\000\000\
\\001\000\060\000\005\000\069\001\000\000\
\\000\000\
\\041\000\071\001\042\000\112\000\000\000\
\\001\000\115\000\081\000\072\001\000\000\
\\000\000\
\\001\000\163\000\070\000\074\001\000\000\
\\001\000\163\000\070\000\075\001\000\000\
\\001\000\163\000\070\000\076\001\000\000\
\\000\000\
\\007\000\239\000\008\000\238\000\011\000\237\000\012\000\236\000\
\\013\000\078\001\000\000\
\\000\000\
\\052\000\026\000\053\000\025\000\079\000\024\000\080\000\079\001\000\000\
\\001\000\081\001\084\000\080\001\000\000\
\\071\000\082\001\000\000\
\\000\000\
\\002\000\097\000\003\000\096\000\026\000\094\000\027\000\093\000\
\\037\000\083\001\039\000\127\000\040\000\126\000\000\000\
\\000\000\
\\007\000\239\000\008\000\238\000\011\000\237\000\012\000\236\000\
\\013\000\085\001\000\000\
\\002\000\097\000\003\000\096\000\026\000\094\000\027\000\093\000\
\\037\000\129\000\038\000\086\001\039\000\127\000\040\000\126\000\000\000\
\\004\000\131\000\049\000\087\001\000\000\
\\000\000\
\\041\000\090\001\042\000\112\000\000\000\
\\004\000\029\001\046\000\028\001\047\000\027\001\048\000\026\001\000\000\
\\041\000\092\001\042\000\112\000\000\000\
\\052\000\026\000\053\000\094\001\055\000\093\001\000\000\
\\004\000\029\001\046\000\028\001\047\000\027\001\048\000\026\001\000\000\
\\000\000\
\\000\000\
\\007\000\098\001\008\000\238\000\000\000\
\\000\000\
\\000\000\
\\007\000\239\000\008\000\238\000\011\000\237\000\012\000\236\000\
\\013\000\103\001\014\000\102\001\000\000\
\\002\000\198\000\006\000\106\001\009\000\105\001\010\000\104\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\007\000\239\000\008\000\238\000\011\000\237\000\012\000\236\000\
\\013\000\109\001\000\000\
\\000\000\
\\007\000\239\000\008\000\238\000\011\000\237\000\012\000\236\000\
\\013\000\110\001\000\000\
\\000\000\
\\044\000\111\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\042\000\116\001\000\000\
\\000\000\
\\086\000\117\001\000\000\
\\000\000\
\\000\000\
\\001\000\163\000\070\000\120\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\073\000\171\000\083\000\170\000\000\000\
\\001\000\163\000\070\000\122\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\004\000\029\001\046\000\124\001\047\000\027\001\048\000\026\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\126\001\000\000\
\\001\000\060\000\005\000\127\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\038\001\003\000\037\001\021\000\128\001\022\000\034\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\038\001\003\000\037\001\021\000\133\001\022\000\034\001\000\000\
\\000\000\
\\001\000\038\001\003\000\037\001\019\000\137\001\020\000\136\001\
\\021\000\035\001\022\000\034\001\024\000\135\001\000\000\
\\001\000\038\001\003\000\037\001\020\000\140\001\021\000\035\001\
\\022\000\034\001\023\000\139\001\000\000\
\\002\000\198\000\006\000\144\001\017\000\143\001\018\000\142\001\000\000\
\\001\000\038\001\003\000\037\001\020\000\146\001\021\000\035\001\
\\022\000\034\001\000\000\
\\001\000\038\001\003\000\037\001\020\000\147\001\021\000\035\001\
\\022\000\034\001\000\000\
\\001\000\148\001\000\000\
\\052\000\026\000\053\000\094\001\055\000\149\001\000\000\
\\001\000\038\001\003\000\037\001\020\000\150\001\021\000\035\001\
\\022\000\034\001\000\000\
\\002\000\198\000\006\000\151\001\000\000\
\\002\000\097\000\003\000\096\000\015\000\154\001\016\000\153\001\
\\025\000\152\001\026\000\094\000\027\000\093\000\039\000\090\000\000\000\
\\001\000\038\001\003\000\037\001\020\000\155\001\021\000\035\001\
\\022\000\034\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\002\000\097\000\003\000\096\000\025\000\193\000\026\000\094\000\
\\027\000\093\000\031\000\157\001\039\000\090\000\000\000\
\\000\000\
\\002\000\097\000\003\000\096\000\025\000\193\000\026\000\094\000\
\\027\000\093\000\031\000\158\001\039\000\090\000\000\000\
\\000\000\
\\002\000\198\000\006\000\197\000\028\000\196\000\029\000\159\001\000\000\
\\002\000\097\000\003\000\096\000\025\000\160\001\026\000\094\000\
\\027\000\093\000\039\000\090\000\000\000\
\\007\000\239\000\008\000\238\000\011\000\237\000\012\000\236\000\
\\013\000\161\001\000\000\
\\002\000\097\000\003\000\096\000\025\000\162\001\026\000\094\000\
\\027\000\093\000\039\000\090\000\000\000\
\\002\000\097\000\003\000\096\000\025\000\206\000\026\000\094\000\
\\027\000\093\000\035\000\205\000\036\000\163\001\039\000\090\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\007\000\239\000\008\000\238\000\011\000\237\000\012\000\236\000\
\\013\000\165\001\000\000\
\\000\000\
\\000\000\
\\001\000\060\000\005\000\167\001\074\000\166\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\163\000\070\000\170\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\083\000\222\000\000\000\
\\000\000\
\\000\000\
\\001\000\038\001\003\000\037\001\020\000\174\001\021\000\035\001\
\\022\000\034\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\007\000\239\000\008\000\238\000\011\000\237\000\012\000\236\000\
\\013\000\175\001\000\000\
\\001\000\060\000\005\000\176\001\000\000\
\\000\000\
\\001\000\060\000\005\000\177\001\000\000\
\\000\000\
\\000\000\
\\052\000\026\000\053\000\094\001\055\000\180\001\000\000\
\\052\000\026\000\053\000\094\001\055\000\181\001\000\000\
\\052\000\026\000\053\000\094\001\055\000\182\001\000\000\
\\007\000\239\000\008\000\238\000\011\000\237\000\012\000\236\000\
\\013\000\183\001\000\000\
\\000\000\
\\007\000\239\000\008\000\238\000\011\000\185\001\012\000\184\001\000\000\
\\008\000\186\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\060\000\005\000\195\001\000\000\
\\001\000\038\001\003\000\037\001\020\000\197\001\021\000\035\001\
\\022\000\034\001\054\000\196\001\000\000\
\\001\000\060\000\005\000\004\001\069\000\198\001\000\000\
\\001\000\060\000\005\000\199\001\000\000\
\\001\000\060\000\005\000\200\001\000\000\
\\001\000\163\000\070\000\201\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\083\000\202\001\000\000\
\\000\000\
\\004\000\029\001\047\000\203\001\048\000\026\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\038\001\003\000\037\001\020\000\205\001\021\000\035\001\
\\022\000\034\001\000\000\
\\001\000\038\001\003\000\037\001\020\000\206\001\021\000\035\001\
\\022\000\034\001\000\000\
\\007\000\239\000\008\000\238\000\011\000\237\000\012\000\236\000\
\\013\000\207\001\000\000\
\\002\000\097\000\003\000\096\000\015\000\208\001\016\000\153\001\
\\025\000\152\001\026\000\094\000\027\000\093\000\039\000\090\000\000\000\
\\000\000\
\\001\000\038\001\003\000\037\001\020\000\140\001\021\000\035\001\
\\022\000\034\001\023\000\209\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\060\000\005\000\225\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\002\000\097\000\003\000\096\000\015\000\228\001\016\000\153\001\
\\025\000\152\001\026\000\094\000\027\000\093\000\039\000\090\000\000\000\
\\000\000\
\\000\000\
\\075\000\233\001\076\000\232\001\000\000\
\\052\000\026\000\053\000\237\001\077\000\236\001\078\000\235\001\000\000\
\\052\000\026\000\053\000\237\001\077\000\236\001\078\000\242\001\000\000\
\\000\000\
\\001\000\038\001\003\000\037\001\020\000\197\001\021\000\035\001\
\\022\000\034\001\054\000\244\001\000\000\
\\000\000\
\\001\000\060\000\005\000\167\001\074\000\245\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\052\000\026\000\053\000\094\001\055\000\246\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\007\000\098\001\008\000\238\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\007\000\250\001\008\000\238\000\000\000\
\\000\000\
\\007\000\239\000\008\000\238\000\011\000\237\000\012\000\236\000\
\\013\000\252\001\014\000\251\001\000\000\
\\000\000\
\\002\000\198\000\006\000\106\001\009\000\105\001\010\000\253\001\000\000\
\\007\000\239\000\008\000\238\000\011\000\237\000\012\000\236\000\
\\013\000\254\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\007\000\239\000\008\000\238\000\011\000\237\000\012\000\236\000\
\\013\000\001\002\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\038\001\003\000\037\001\020\000\004\002\021\000\035\001\
\\022\000\034\001\024\000\003\002\000\000\
\\001\000\038\001\003\000\037\001\019\000\006\002\020\000\005\002\
\\021\000\035\001\022\000\034\001\000\000\
\\000\000\
\\000\000\
\\001\000\038\001\003\000\037\001\020\000\140\001\021\000\035\001\
\\022\000\034\001\023\000\007\002\000\000\
\\000\000\
\\002\000\198\000\006\000\144\001\017\000\143\001\018\000\008\002\000\000\
\\001\000\038\001\003\000\037\001\020\000\009\002\021\000\035\001\
\\022\000\034\001\000\000\
\\001\000\038\001\003\000\037\001\020\000\010\002\021\000\035\001\
\\022\000\034\001\000\000\
\\001\000\038\001\003\000\037\001\019\000\011\002\020\000\005\002\
\\021\000\035\001\022\000\034\001\000\000\
\\001\000\038\001\003\000\037\001\020\000\012\002\021\000\035\001\
\\022\000\034\001\000\000\
\\001\000\038\001\003\000\037\001\020\000\013\002\021\000\035\001\
\\022\000\034\001\000\000\
\\002\000\097\000\003\000\096\000\015\000\014\002\016\000\153\001\
\\025\000\152\001\026\000\094\000\027\000\093\000\039\000\090\000\000\000\
\\002\000\097\000\003\000\096\000\015\000\015\002\016\000\153\001\
\\025\000\152\001\026\000\094\000\027\000\093\000\039\000\090\000\000\000\
\\000\000\
\\000\000\
\\002\000\097\000\003\000\096\000\025\000\016\002\026\000\094\000\
\\027\000\093\000\039\000\090\000\000\000\
\\000\000\
\\001\000\163\000\070\000\017\002\000\000\
\\001\000\163\000\070\000\018\002\000\000\
\\001\000\163\000\070\000\019\002\000\000\
\\075\000\020\002\076\000\232\001\000\000\
\\000\000\
\\001\000\060\000\005\000\167\001\052\000\026\000\053\000\237\001\
\\074\000\022\002\077\000\236\001\078\000\021\002\000\000\
\\000\000\
\\052\000\026\000\053\000\237\001\077\000\236\001\078\000\024\002\000\000\
\\000\000\
\\001\000\115\000\081\000\025\002\000\000\
\\052\000\026\000\053\000\237\001\077\000\236\001\078\000\027\002\000\000\
\\001\000\124\000\081\000\029\002\084\000\028\002\000\000\
\\052\000\026\000\053\000\237\001\077\000\236\001\078\000\030\002\000\000\
\\000\000\
\\001\000\060\000\005\000\167\001\074\000\032\002\000\000\
\\000\000\
\\000\000\
\\000\000\
\\052\000\026\000\053\000\094\001\055\000\034\002\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\038\001\003\000\037\001\020\000\197\001\021\000\035\001\
\\022\000\034\001\054\000\036\002\000\000\
\\007\000\239\000\008\000\238\000\011\000\237\000\012\000\236\000\
\\013\000\037\002\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\042\002\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\060\000\005\000\167\001\074\000\044\002\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\038\001\003\000\037\001\020\000\046\002\021\000\035\001\
\\022\000\034\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\052\000\026\000\053\000\237\001\077\000\236\001\078\000\048\002\000\000\
\\000\000\
\\052\000\026\000\053\000\094\001\055\000\050\002\000\000\
\\000\000\
\\001\000\163\000\070\000\051\002\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\060\000\005\000\167\001\074\000\054\002\000\000\
\\000\000\
\\000\000\
\"
val numstates = 568
val numrules = 281
val s = ref "" and index = ref 0
val string_to_int = fn () => 
let val i = !index
in index := i+2; Char.ord(String.sub(!s,i)) + Char.ord(String.sub(!s,i+1)) * 256
end
val string_to_list = fn s' =>
    let val len = String.size s'
        fun f () =
           if !index < len then string_to_int() :: f()
           else nil
   in index := 0; s := s'; f ()
   end
val string_to_pairlist = fn (conv_key,conv_entry) =>
     let fun f () =
         case string_to_int()
         of 0 => EMPTY
          | n => PAIR(conv_key (n-1),conv_entry (string_to_int()),f())
     in f
     end
val string_to_pairlist_default = fn (conv_key,conv_entry) =>
    let val conv_row = string_to_pairlist(conv_key,conv_entry)
    in fn () =>
       let val default = conv_entry(string_to_int())
           val row = conv_row()
       in (row,default)
       end
   end
val string_to_table = fn (convert_row,s') =>
    let val len = String.size s'
        fun f ()=
           if !index < len then convert_row() :: f()
           else nil
     in (s := s'; index := 0; f ())
     end
local
  val memo = Array.array(numstates+numrules,ERROR)
  val _ =let fun g i=(Array.update(memo,i,REDUCE(i-numstates)); g(i+1))
       fun f i =
            if i=numstates then g i
            else (Array.update(memo,i,SHIFT (STATE i)); f (i+1))
          in f 0 handle Subscript => ()
          end
in
val entry_to_action = fn 0 => ACCEPT | 1 => ERROR | j => Array.sub(memo,(j-2))
end
val gotoT=Array.fromList(string_to_table(string_to_pairlist(NT,STATE),gotoT))
val actionRows=string_to_table(string_to_pairlist_default(T,entry_to_action),actionRows)
val actionRowNumbers = string_to_list actionRowNumbers
val actionT = let val actionRowLookUp=
let val a=Array.fromList(actionRows) in fn i=>Array.sub(a,i) end
in Array.fromList(map actionRowLookUp actionRowNumbers)
end
in LrTable.mkLrTable {actions=actionT,gotos=gotoT,numRules=numrules,
numStates=numstates,initialState=STATE 0}
end
end
local open Header in
type pos = int
type arg = pos*pos -> ErrorMsg.complainer
structure MlyValue = 
struct
datatype svalue = VOID | ntVOID of unit ->  unit
 | CHAR of unit ->  (string) | STRING of unit ->  (string)
 | REAL of unit ->  (string) | WORD of unit ->  (TilWord64.word)
 | DIGIT of unit ->  (int) | INT0 of unit ->  (TilWord64.word)
 | INT of unit ->  (TilWord64.word)
 | TYVAR of unit ->  (FastSymbol.raw_symbol)
 | ID of unit ->  (FastSymbol.raw_symbol)
 | functorarrow of unit ->  (functorarrow) | top of unit ->  (top)
 | fctb of unit ->  (strb list)
 | fparamList of unit ->  ( ( symbol option * sigexp )  list)
 | fparam of unit ->  (symbol option*sigexp)
 | strb of unit ->  (strb list) | sdecs of unit ->  (dec)
 | sdec of unit ->  (dec) | strdecs of unit ->  (dec)
 | strdec of unit ->  (dec) | arg_fct of unit ->  (strexp*bool)
 | arg_fcts of unit ->  ( ( strexp * bool )  list)
 | str of unit ->  (strexp) | fsig of unit ->  (sigexp)
 | sigb of unit ->  (sigb list)
 | sigconstraint_op of unit ->  (sigexp sigConst)
 | sign of unit ->  (sigexp) | whspec of unit ->  (wherespec list)
 | patheqn of unit ->  ( ( FastSymbol.raw_symbol ->symbol )  -> symbol list list)
 | sharespec of unit ->  (spec list)
 | exnspec of unit ->  ( ( symbol * ty option )  list)
 | valspec of unit ->  ( ( symbol * ty )  list)
 | etyspec of unit ->  ( ( symbol * tyvar list * ty option )  list)
 | tyspec of unit ->  ( ( symbol * tyvar list * ty option )  list)
 | fctspec of unit ->  ( ( symbol * sigexp )  list)
 | strspec of unit ->  ( ( symbol * sigexp * path option )  list)
 | idents of unit ->  (spec list) | topspec of unit ->  (topspec)
 | topspec_s of unit ->  (topspec) | spec of unit ->  (spec list)
 | spec_s of unit ->  (spec list) | ldecs of unit ->  (dec)
 | exp_pa of unit ->  (exp list) | ldec of unit ->  (dec)
 | fixity of unit ->  ({ fixity:fixity,ops:symbol list } )
 | ops of unit ->  (symbol list)
 | qid_p of unit ->  (Symbol.symbol list list)
 | eb of unit ->  (eb list) | constr of unit ->  (symbol*ty option)
 | constrs of unit ->  ( ( symbol * ty option )  list)
 | dbrhs of unit ->  (dbrhs) | db of unit ->  (db list)
 | tyvar_pc of unit ->  (tyvar list)
 | tyvarseq of unit ->  (tyvar list) | tyvars of unit ->  (tyvar list)
 | tb of unit ->  (tb list) | clause of unit ->  (clause)
 | apats of unit ->  (pat fixitem list) | fb of unit ->  (fb list)
 | fb' of unit ->  (clause list) | rvb of unit ->  (vb list)
 | vbm of unit ->  (vb) | constraint of unit ->  (ty option)
 | vb of unit ->  (vb list*vb list) | vbpe of unit ->  (vb)
 | pat_list of unit ->  (pat list) | pat_2c of unit ->  (pat list)
 | plabels of unit ->  ( ( (symbol * pat) list * bool ) )
 | plabel of unit ->  ( ( symbol * pat ) ) | apat' of unit ->  (pat)
 | apat of unit ->  (pat fixitem) | pat of unit ->  (pat)
 | exp_2c of unit ->  (exp list) | exp_list of unit ->  (exp list)
 | aexp of unit ->  (exp) | app_exp of unit ->  (exp fixitem list)
 | exp of unit ->  (exp) | exp_ps of unit ->  (exp list)
 | elabels of unit ->  ( ( symbol * exp )  list)
 | elabel of unit ->  ( ( symbol * exp ) ) | rule of unit ->  (rule)
 | match of unit ->  (rule list) | ty0_pc of unit ->  (ty list)
 | ty of unit ->  (ty) | tuple_ty of unit ->  (ty list)
 | ty' of unit ->  (ty) | tlabels of unit ->  ( ( symbol * ty )  list)
 | tlabel of unit ->  ( ( symbol * ty ) )
 | modpath of unit ->  (typath) | tycon of unit ->  (typath)
 | selector of unit ->  (symbol)
 | qid of unit ->  ( ( FastSymbol.raw_symbol ->symbol )  -> symbol list)
 | op_op of unit ->  (unit) | int of unit ->  (TilWord64.word)
 | id of unit ->  (FastSymbol.raw_symbol)
 | ident of unit ->  (FastSymbol.raw_symbol)
end
type svalue = MlyValue.svalue
type result = top
end
structure EC=
struct
open LrTable
val is_keyword =
fn (T 11) => true | (T 12) => true | (T 15) => true | (T 17) => true
 | (T 18) => true | (T 19) => true | (T 20) => true | (T 21) => true
 | (T 23) => true | (T 24) => true | (T 25) => true | (T 27) => true
 | (T 28) => true | (T 29) => true | (T 30) => true | (T 31) => true
 | (T 33) => true | (T 34) => true | (T 35) => true | (T 36) => true
 | (T 37) => true | (T 38) => true | (T 39) => true | (T 40) => true
 | (T 41) => true | (T 42) => true | (T 43) => true | (T 44) => true
 | (T 45) => true | (T 46) => true | (T 47) => true | (T 48) => true
 | (T 49) => true | (T 50) => true | (T 51) => true | (T 52) => true
 | (T 53) => true | (T 54) => true | (T 56) => true | (T 55) => true
 | (T 58) => true | (T 59) => true | (T 71) => true | (T 72) => true
 | (T 74) => true | (T 73) => true | _ => false
val preferred_change = 
(nil
,(T 54) :: nil
)::
(nil
,(T 52) :: nil
)::
(nil
,(T 20) :: nil
)::
(nil
,(T 67) :: nil
)::
(nil
,(T 1) :: nil
)::
((T 27) :: nil
,(T 22) :: nil
)::
((T 22) :: nil
,(T 27) :: nil
)::
((T 12) :: nil
,(T 72) :: nil
)::
((T 61) :: nil
,(T 41) :: nil
)::
((T 1) :: nil
,(T 64) :: nil
)::
((T 64) :: nil
,(T 1) :: nil
)::
(nil
,(T 34) :: (T 2) :: (T 21) :: nil
)::
(nil
,(T 20) :: (T 2) :: nil
)::
nil
val noShift = 
fn (T 0) => true | _ => false
val showTerminal =
fn (T 0) => "EOF"
  | (T 1) => "SEMICOLON"
  | (T 2) => "ID"
  | (T 3) => "TYVAR"
  | (T 4) => "INT"
  | (T 5) => "INT0"
  | (T 6) => "DIGIT"
  | (T 7) => "WORD"
  | (T 8) => "REAL"
  | (T 9) => "STRING"
  | (T 10) => "CHAR"
  | (T 11) => "ABSTYPE"
  | (T 12) => "AND"
  | (T 13) => "ARROW"
  | (T 14) => "ARROWG"
  | (T 15) => "AS"
  | (T 16) => "BAR"
  | (T 17) => "CASE"
  | (T 18) => "DATATYPE"
  | (T 19) => "DOTDOTDOT"
  | (T 20) => "ELSE"
  | (T 21) => "END"
  | (T 22) => "EQUALOP"
  | (T 23) => "EQTYPE"
  | (T 24) => "EXCEPTION"
  | (T 25) => "DO"
  | (T 26) => "DOT"
  | (T 27) => "DARROW"
  | (T 28) => "FN"
  | (T 29) => "FUN"
  | (T 30) => "FUNCTOR"
  | (T 31) => "HANDLE"
  | (T 32) => "HASH"
  | (T 33) => "IF"
  | (T 34) => "IN"
  | (T 35) => "INCLUDE"
  | (T 36) => "INFIX"
  | (T 37) => "INFIXR"
  | (T 38) => "LET"
  | (T 39) => "LOCAL"
  | (T 40) => "NONFIX"
  | (T 41) => "OF"
  | (T 42) => "OP"
  | (T 43) => "OPEN"
  | (T 44) => "OVERLOAD"
  | (T 45) => "RAISE"
  | (T 46) => "REC"
  | (T 47) => "SHARING"
  | (T 48) => "SIG"
  | (T 49) => "SIGNATURE"
  | (T 50) => "STRUCT"
  | (T 51) => "STRUCTURE"
  | (T 52) => "THEN"
  | (T 53) => "TYPE"
  | (T 54) => "VAL"
  | (T 55) => "WHERE"
  | (T 56) => "WHILE"
  | (T 57) => "WILD"
  | (T 58) => "WITH"
  | (T 59) => "WITHTYPE"
  | (T 60) => "ASTERISK"
  | (T 61) => "COLON"
  | (T 62) => "STRONGSEAL"
  | (T 63) => "WEAKSEAL"
  | (T 64) => "COMMA"
  | (T 65) => "LBRACE"
  | (T 66) => "LBRACKET"
  | (T 67) => "LPAREN"
  | (T 68) => "RBRACE"
  | (T 69) => "RBRACKET"
  | (T 70) => "RPAREN"
  | (T 71) => "ORELSE"
  | (T 72) => "ANDALSO"
  | (T 73) => "EXTERN"
  | (T 74) => "CCALL"
  | (T 75) => "IMPL"
  | (T 76) => "INTER"
  | _ => "bogus-term"
local open Header in
val errtermvalue=
fn (T 2) => MlyValue.ID(fn () => (rawSymbol(bogusHash,bogusString))) | 
(T 3) => MlyValue.TYVAR(fn () => (
rawSymbol(quotedBogusHash,quotedBogusString))) | 
(T 4) => MlyValue.INT(fn () => (TilWord64.fromInt 1)) | 
(T 5) => MlyValue.INT0(fn () => (TilWord64.fromInt 0)) | 
(T 6) => MlyValue.DIGIT(fn () => (0)) | 
(T 7) => MlyValue.WORD(fn () => (TilWord64.fromInt 0)) | 
(T 8) => MlyValue.REAL(fn () => ("0.0")) | 
(T 9) => MlyValue.STRING(fn () => ("")) | 
(T 10) => MlyValue.CHAR(fn () => ("a")) | 
_ => MlyValue.VOID
end
val terms = (T 0) :: (T 1) :: (T 11) :: (T 12) :: (T 13) :: (T 14) :: 
(T 15) :: (T 16) :: (T 17) :: (T 18) :: (T 19) :: (T 20) :: (T 21) :: 
(T 22) :: (T 23) :: (T 24) :: (T 25) :: (T 26) :: (T 27) :: (T 28) :: 
(T 29) :: (T 30) :: (T 31) :: (T 32) :: (T 33) :: (T 34) :: (T 35) :: 
(T 36) :: (T 37) :: (T 38) :: (T 39) :: (T 40) :: (T 41) :: (T 42) :: 
(T 43) :: (T 44) :: (T 45) :: (T 46) :: (T 47) :: (T 48) :: (T 49) :: 
(T 50) :: (T 51) :: (T 52) :: (T 53) :: (T 54) :: (T 55) :: (T 56) :: 
(T 57) :: (T 58) :: (T 59) :: (T 60) :: (T 61) :: (T 62) :: (T 63) :: 
(T 64) :: (T 65) :: (T 66) :: (T 67) :: (T 68) :: (T 69) :: (T 70) :: 
(T 71) :: (T 72) :: (T 73) :: (T 74) :: (T 75) :: (T 76) :: nil
end
structure Actions =
struct 
exception mlyAction of int
local open Header in
val actions = 
fn (i392,defaultPos,stack,
    (error):arg) =>
case (i392,stack)
of (0,(_,(MlyValue.INT INT1,INT1left,INT1right))::rest671) => let val 
result=MlyValue.int(fn _ => let val INT as INT1=INT1 ()
 in (INT) end
)
 in (LrTable.NT 2,(result,INT1left,INT1right),rest671) end
| (1,(_,(MlyValue.INT0 INT01,INT01left,INT01right))::rest671) => let 
val result=MlyValue.int(fn _ => let val INT0 as INT01=INT01 ()
 in (INT0) end
)
 in (LrTable.NT 2,(result,INT01left,INT01right),rest671) end
| (2,(_,(MlyValue.DIGIT DIGIT1,DIGIT1left,DIGIT1right))::rest671) => 
let val result=MlyValue.int(fn _ => let val DIGIT as DIGIT1=DIGIT1 ()
 in (TilWord64.fromInt DIGIT) end
)
 in (LrTable.NT 2,(result,DIGIT1left,DIGIT1right),rest671) end
| (3,(_,(MlyValue.ID ID1,ID1left,ID1right))::rest671) => let val 
result=MlyValue.id(fn _ => let val ID as ID1=ID1 ()
 in (ID) end
)
 in (LrTable.NT 1,(result,ID1left,ID1right),rest671) end
| (4,(_,(_,ASTERISK1left,ASTERISK1right))::rest671) => let val result=
MlyValue.id(fn _ => (rawSymbol (asteriskHash,asteriskString)))
 in (LrTable.NT 1,(result,ASTERISK1left,ASTERISK1right),rest671) end
| (5,(_,(MlyValue.ID ID1,ID1left,ID1right))::rest671) => let val 
result=MlyValue.ident(fn _ => let val ID as ID1=ID1 ()
 in (ID) end
)
 in (LrTable.NT 0,(result,ID1left,ID1right),rest671) end
| (6,(_,(_,ASTERISK1left,ASTERISK1right))::rest671) => let val result=
MlyValue.ident(fn _ => (rawSymbol (asteriskHash,asteriskString)))
 in (LrTable.NT 0,(result,ASTERISK1left,ASTERISK1right),rest671) end
| (7,(_,(_,EQUALOP1left,EQUALOP1right))::rest671) => let val result=
MlyValue.ident(fn _ => (rawSymbol (equalHash,equalString)))
 in (LrTable.NT 0,(result,EQUALOP1left,EQUALOP1right),rest671) end
| (8,(_,(_,OPleft as OP1left,OPright as OP1right))::rest671) => let 
val result=MlyValue.op_op(fn _ => (
error (OPleft,OPright) WARN "unnecessary `op'"
			       nullErrorBody
))
 in (LrTable.NT 3,(result,OP1left,OP1right),rest671) end
| (9,rest671) => let val result=MlyValue.op_op(fn _ => ())
 in (LrTable.NT 3,(result,defaultPos,defaultPos),rest671) end
| (10,(_,(MlyValue.qid qid1,_,qid1right))::_::(_,(MlyValue.ID ID1,
ID1left,_))::rest671) => let val result=MlyValue.qid(fn _ => let val 
ID as ID1=ID1 ()
val qid as qid1=qid1 ()
 in (fn kind => strSymbol ID :: qid kind) end
)
 in (LrTable.NT 4,(result,ID1left,qid1right),rest671) end
| (11,(_,(MlyValue.ident ident1,ident1left,ident1right))::rest671) => 
let val result=MlyValue.qid(fn _ => let val ident as ident1=ident1 ()
 in (fn kind => [kind ident]) end
)
 in (LrTable.NT 4,(result,ident1left,ident1right),rest671) end
| (12,(_,(MlyValue.id id1,id1left,id1right))::rest671) => let val 
result=MlyValue.selector(fn _ => let val id as id1=id1 ()
 in (labSymbol id) end
)
 in (LrTable.NT 5,(result,id1left,id1right),rest671) end
| (13,(_,(MlyValue.INT INT1,INT1left,INT1right))::rest671) => let val 
result=MlyValue.selector(fn _ => let val INT as INT1=INT1 ()
 in (Symbol.labSymbol (TilWord64.toDecimalString INT)) end
)
 in (LrTable.NT 5,(result,INT1left,INT1right),rest671) end
| (14,(_,(MlyValue.DIGIT DIGIT1,DIGIT1left,DIGIT1right))::rest671) => 
let val result=MlyValue.selector(fn _ => let val DIGIT as DIGIT1=
DIGIT1 ()
 in (Symbol.labSymbol (Int.toString DIGIT)) end
)
 in (LrTable.NT 5,(result,DIGIT1left,DIGIT1right),rest671) end
| (15,(_,(MlyValue.ID ID1,ID1left,ID1right))::rest671) => let val 
result=MlyValue.modpath(fn _ => let val ID as ID1=ID1 ()
 in (TypathHead(strSymbol ID)) end
)
 in (LrTable.NT 7,(result,ID1left,ID1right),rest671) end
| (16,(_,(MlyValue.ID ID1,_,ID1right))::_::(_,(MlyValue.modpath 
modpath1,modpath1left,_))::rest671) => let val result=MlyValue.modpath
(fn _ => let val modpath as modpath1=modpath1 ()
val ID as ID1=ID1 ()
 in (TypathProj(modpath, strSymbol ID)) end
)
 in (LrTable.NT 7,(result,modpath1left,ID1right),rest671) end
| (17,(_,(_,_,RPAREN1right))::(_,(MlyValue.modpath modpath2,_,_))::_::
(_,(MlyValue.modpath modpath1,modpath1left,_))::rest671) => let val 
result=MlyValue.modpath(fn _ => let val modpath1=modpath1 ()
val modpath2=modpath2 ()
 in (TypathApp(modpath1,modpath2)) end
)
 in (LrTable.NT 7,(result,modpath1left,RPAREN1right),rest671) end
| (18,(_,(MlyValue.ID ID1,ID1left,ID1right))::rest671) => let val 
result=MlyValue.tycon(fn _ => let val ID as ID1=ID1 ()
 in (TypathHead(tycSymbol ID)) end
)
 in (LrTable.NT 6,(result,ID1left,ID1right),rest671) end
| (19,(_,(MlyValue.ID ID1,_,ID1right))::_::(_,(MlyValue.modpath 
modpath1,modpath1left,_))::rest671) => let val result=MlyValue.tycon(
fn _ => let val modpath as modpath1=modpath1 ()
val ID as ID1=ID1 ()
 in (TypathProj(modpath, tycSymbol ID)) end
)
 in (LrTable.NT 6,(result,modpath1left,ID1right),rest671) end
| (20,(_,(MlyValue.ty ty1,_,ty1right))::_::(_,(MlyValue.selector 
selector1,selector1left,_))::rest671) => let val result=
MlyValue.tlabel(fn _ => let val selector as selector1=selector1 ()
val ty as ty1=ty1 ()
 in (selector,ty) end
)
 in (LrTable.NT 8,(result,selector1left,ty1right),rest671) end
| (21,(_,(MlyValue.tlabels tlabels1,_,tlabels1right))::_::(_,(
MlyValue.tlabel tlabel1,tlabel1left,_))::rest671) => let val result=
MlyValue.tlabels(fn _ => let val tlabel as tlabel1=tlabel1 ()
val tlabels as tlabels1=tlabels1 ()
 in (tlabel :: tlabels) end
)
 in (LrTable.NT 9,(result,tlabel1left,tlabels1right),rest671) end
| (22,(_,(MlyValue.tlabel tlabel1,tlabel1left,tlabel1right))::rest671)
 => let val result=MlyValue.tlabels(fn _ => let val tlabel as tlabel1=
tlabel1 ()
 in ([tlabel]) end
)
 in (LrTable.NT 9,(result,tlabel1left,tlabel1right),rest671) end
| (23,(_,(MlyValue.TYVAR TYVAR1,TYVARleft as TYVAR1left,TYVARright as 
TYVAR1right))::rest671) => let val result=MlyValue.ty'(fn _ => let 
val TYVAR as TYVAR1=TYVAR1 ()
 in (MarkTy (VarTy(Tyv(tyvSymbol TYVAR)),
				 (TYVARleft,TYVARright))
) end
)
 in (LrTable.NT 10,(result,TYVAR1left,TYVAR1right),rest671) end
| (24,(_,(_,_,RBRACEright as RBRACE1right))::(_,(MlyValue.tlabels 
tlabels1,_,_))::(_,(_,LBRACEleft as LBRACE1left,_))::rest671) => let 
val result=MlyValue.ty'(fn _ => let val tlabels as tlabels1=tlabels1 
()
 in (MarkTy(RecordTy tlabels,(LBRACEleft,RBRACEright))) end
)
 in (LrTable.NT 10,(result,LBRACE1left,RBRACE1right),rest671) end
| (25,(_,(_,_,RBRACE1right))::(_,(_,LBRACE1left,_))::rest671) => let 
val result=MlyValue.ty'(fn _ => (RecordTy []))
 in (LrTable.NT 10,(result,LBRACE1left,RBRACE1right),rest671) end
| (26,(_,(MlyValue.tycon tycon1,tyconleft,tyconright as tycon1right))
::_::(_,(MlyValue.ty0_pc ty0_pc1,_,_))::(_,(_,LPAREN1left,_))::rest671
) => let val result=MlyValue.ty'(fn _ => let val ty0_pc as ty0_pc1=
ty0_pc1 ()
val tycon as tycon1=tycon1 ()
 in (MarkTy(ConTy(tycon,ty0_pc),(tyconleft,tyconright))) end
)
 in (LrTable.NT 10,(result,LPAREN1left,tycon1right),rest671) end
| (27,(_,(_,_,RPAREN1right))::(_,(MlyValue.ty ty1,_,_))::(_,(_,
LPAREN1left,_))::rest671) => let val result=MlyValue.ty'(fn _ => let 
val ty as ty1=ty1 ()
 in (ty) end
)
 in (LrTable.NT 10,(result,LPAREN1left,RPAREN1right),rest671) end
| (28,(_,(MlyValue.tycon tycon1,tyconleft,tyconright as tycon1right))
::(_,(MlyValue.ty' ty'1,ty'1left,_))::rest671) => let val result=
MlyValue.ty'(fn _ => let val ty' as ty'1=ty'1 ()
val tycon as tycon1=tycon1 ()
 in (MarkTy(ConTy(tycon,[ty']),(tyconleft,tyconright))) end
)
 in (LrTable.NT 10,(result,ty'1left,tycon1right),rest671) end
| (29,(_,(MlyValue.tycon tycon1,tyconleft as tycon1left,tyconright as 
tycon1right))::rest671) => let val result=MlyValue.ty'(fn _ => let 
val tycon as tycon1=tycon1 ()
 in (MarkTy(ConTy(tycon,[]),(tyconleft,tyconright))) end
)
 in (LrTable.NT 10,(result,tycon1left,tycon1right),rest671) end
| (30,(_,(MlyValue.tuple_ty tuple_ty1,_,tuple_ty1right))::_::(_,(
MlyValue.ty' ty'1,ty'1left,_))::rest671) => let val result=
MlyValue.tuple_ty(fn _ => let val ty' as ty'1=ty'1 ()
val tuple_ty as tuple_ty1=tuple_ty1 ()
 in (ty' :: tuple_ty) end
)
 in (LrTable.NT 11,(result,ty'1left,tuple_ty1right),rest671) end
| (31,(_,(MlyValue.ty' ty'2,_,ty'2right))::_::(_,(MlyValue.ty' ty'1,
ty'1left,_))::rest671) => let val result=MlyValue.tuple_ty(fn _ => 
let val ty'1=ty'1 ()
val ty'2=ty'2 ()
 in ([ty'1,ty'2]) end
)
 in (LrTable.NT 11,(result,ty'1left,ty'2right),rest671) end
| (32,(_,(MlyValue.tuple_ty tuple_ty1,tuple_ty1left,tuple_ty1right))::
rest671) => let val result=MlyValue.ty(fn _ => let val tuple_ty as 
tuple_ty1=tuple_ty1 ()
 in (TupleTy(tuple_ty)) end
)
 in (LrTable.NT 12,(result,tuple_ty1left,tuple_ty1right),rest671) end
| (33,(_,(MlyValue.ty ty2,_,ty2right))::_::(_,(MlyValue.ty ty1,ty1left
,_))::rest671) => let val result=MlyValue.ty(fn _ => let val ty1=ty1 
()
val ty2=ty2 ()
 in (ConTy(TypathHead(arrowTycon), [ty1,ty2])) end
)
 in (LrTable.NT 12,(result,ty1left,ty2right),rest671) end
| (34,(_,(MlyValue.ty' ty'1,ty'1left,ty'1right))::rest671) => let val 
result=MlyValue.ty(fn _ => let val ty' as ty'1=ty'1 ()
 in (ty') end
)
 in (LrTable.NT 12,(result,ty'1left,ty'1right),rest671) end
| (35,(_,(MlyValue.ty ty2,_,ty2right))::_::(_,(MlyValue.ty ty1,ty1left
,_))::rest671) => let val result=MlyValue.ty0_pc(fn _ => let val ty1=
ty1 ()
val ty2=ty2 ()
 in ([ty1,ty2]) end
)
 in (LrTable.NT 13,(result,ty1left,ty2right),rest671) end
| (36,(_,(MlyValue.ty0_pc ty0_pc1,_,ty0_pc1right))::_::(_,(MlyValue.ty
 ty1,ty1left,_))::rest671) => let val result=MlyValue.ty0_pc(fn _ => 
let val ty as ty1=ty1 ()
val ty0_pc as ty0_pc1=ty0_pc1 ()
 in (ty :: ty0_pc) end
)
 in (LrTable.NT 13,(result,ty1left,ty0_pc1right),rest671) end
| (37,(_,(MlyValue.rule rule1,rule1left,rule1right))::rest671) => let 
val result=MlyValue.match(fn _ => let val rule as rule1=rule1 ()
 in ([rule]) end
)
 in (LrTable.NT 14,(result,rule1left,rule1right),rest671) end
| (38,(_,(MlyValue.match match1,_,match1right))::_::(_,(MlyValue.rule 
rule1,rule1left,_))::rest671) => let val result=MlyValue.match(fn _
 => let val rule as rule1=rule1 ()
val match as match1=match1 ()
 in (rule :: match) end
)
 in (LrTable.NT 14,(result,rule1left,match1right),rest671) end
| (39,(_,(MlyValue.exp exp1,expleft,expright as exp1right))::_::(_,(
MlyValue.pat pat1,pat1left,_))::rest671) => let val result=
MlyValue.rule(fn _ => let val pat as pat1=pat1 ()
val exp as exp1=exp1 ()
 in (Rule{pat=pat,
				      exp=markexp(exp,expleft,expright)}) end
)
 in (LrTable.NT 15,(result,pat1left,exp1right),rest671) end
| (40,(_,(MlyValue.exp exp1,_,exp1right))::_::(_,(MlyValue.selector 
selector1,selector1left,_))::rest671) => let val result=
MlyValue.elabel(fn _ => let val selector as selector1=selector1 ()
val exp as exp1=exp1 ()
 in (selector,exp) end
)
 in (LrTable.NT 16,(result,selector1left,exp1right),rest671) end
| (41,(_,(MlyValue.elabels elabels1,_,elabels1right))::_::(_,(
MlyValue.elabel elabel1,elabel1left,_))::rest671) => let val result=
MlyValue.elabels(fn _ => let val elabel as elabel1=elabel1 ()
val elabels as elabels1=elabels1 ()
 in (elabel :: elabels) end
)
 in (LrTable.NT 17,(result,elabel1left,elabels1right),rest671) end
| (42,(_,(MlyValue.elabel elabel1,elabel1left,elabel1right))::rest671)
 => let val result=MlyValue.elabels(fn _ => let val elabel as elabel1=
elabel1 ()
 in ([elabel]) end
)
 in (LrTable.NT 17,(result,elabel1left,elabel1right),rest671) end
| (43,(_,(MlyValue.exp exp1,exp1left,exp1right))::rest671) => let val 
result=MlyValue.exp_ps(fn _ => let val exp as exp1=exp1 ()
 in ([exp]) end
)
 in (LrTable.NT 18,(result,exp1left,exp1right),rest671) end
| (44,(_,(MlyValue.exp_ps exp_ps1,_,exp_ps1right))::_::(_,(
MlyValue.exp exp1,exp1left,_))::rest671) => let val result=
MlyValue.exp_ps(fn _ => let val exp as exp1=exp1 ()
val exp_ps as exp_ps1=exp_ps1 ()
 in (exp :: exp_ps) end
)
 in (LrTable.NT 18,(result,exp1left,exp_ps1right),rest671) end
| (45,(_,(MlyValue.match match1,_,match1right))::_::(_,(MlyValue.exp 
exp1,exp1left,_))::rest671) => let val result=MlyValue.exp(fn _ => 
let val exp as exp1=exp1 ()
val match as match1=match1 ()
 in (HandleExp{expr=exp,rules=match}) end
)
 in (LrTable.NT 19,(result,exp1left,match1right),rest671) end
| (46,(_,(MlyValue.exp exp2,exp2left,exp2right))::_::(_,(MlyValue.exp 
exp1,exp1left,exp1right))::rest671) => let val result=MlyValue.exp(fn 
_ => let val exp1=exp1 ()
val exp2=exp2 ()
 in (
OrelseExp(markexp(exp1,exp1left,exp1right),
					   markexp(exp2,exp2left,exp2right))
) end
)
 in (LrTable.NT 19,(result,exp1left,exp2right),rest671) end
| (47,(_,(MlyValue.exp exp2,exp2left,exp2right))::_::(_,(MlyValue.exp 
exp1,exp1left,exp1right))::rest671) => let val result=MlyValue.exp(fn 
_ => let val exp1=exp1 ()
val exp2=exp2 ()
 in (
AndalsoExp(markexp(exp1,exp1left,exp1right),
					    markexp(exp2,exp2left,exp2right))
) end
)
 in (LrTable.NT 19,(result,exp1left,exp2right),rest671) end
| (48,(_,(MlyValue.ty ty1,_,ty1right))::_::(_,(MlyValue.exp exp1,
exp1left,_))::rest671) => let val result=MlyValue.exp(fn _ => let val 
exp as exp1=exp1 ()
val ty as ty1=ty1 ()
 in (ConstraintExp{expr=exp,constraint=ty}) end
)
 in (LrTable.NT 19,(result,exp1left,ty1right),rest671) end
| (49,(_,(MlyValue.app_exp app_exp1,app_exp1left,app_exp1right))::
rest671) => let val result=MlyValue.exp(fn _ => let val app_exp as 
app_exp1=app_exp1 ()
 in (FlatAppExp(app_exp)) end
)
 in (LrTable.NT 19,(result,app_exp1left,app_exp1right),rest671) end
| (50,(_,(MlyValue.match match1,_,matchright as match1right))::(_,(_,
FNleft as FN1left,_))::rest671) => let val result=MlyValue.exp(fn _
 => let val match as match1=match1 ()
 in (markexp(FnExp match, FNleft,matchright)) end
)
 in (LrTable.NT 19,(result,FN1left,match1right),rest671) end
| (51,(_,(MlyValue.match match1,_,matchright as match1right))::_::(_,(
MlyValue.exp exp1,_,_))::(_,(_,CASEleft as CASE1left,_))::rest671) => 
let val result=MlyValue.exp(fn _ => let val exp as exp1=exp1 ()
val match as match1=match1 ()
 in (
markexp(CaseExp{expr=exp, rules=match},
					 CASEleft,matchright))
 end
)
 in (LrTable.NT 19,(result,CASE1left,match1right),rest671) end
| (52,(_,(MlyValue.exp exp2,exp2left,exp2right))::_::(_,(MlyValue.exp 
exp1,exp1left,exp1right))::(_,(_,WHILE1left,_))::rest671) => let val 
result=MlyValue.exp(fn _ => let val exp1=exp1 ()
val exp2=exp2 ()
 in (
WhileExp
                                   {test=markexp(exp1, exp1left, exp1right),
				    expr=markexp(exp2, exp2left, exp2right)}
) end
)
 in (LrTable.NT 19,(result,WHILE1left,exp2right),rest671) end
| (53,(_,(MlyValue.exp exp3,exp3left,exp3right))::_::(_,(MlyValue.exp 
exp2,exp2left,exp2right))::_::(_,(MlyValue.exp exp1,_,_))::(_,(_,
IF1left,_))::rest671) => let val result=MlyValue.exp(fn _ => let val 
exp1=exp1 ()
val exp2=exp2 ()
val exp3=exp3 ()
 in (
IfExp{test=exp1,
				   thenCase=markexp(exp2,exp2left,exp2right),
				   elseCase=markexp(exp3,exp3left,exp3right)}
) end
)
 in (LrTable.NT 19,(result,IF1left,exp3right),rest671) end
| (54,(_,(MlyValue.exp exp1,expleft,expright as exp1right))::(_,(_,
RAISEleft as RAISE1left,_))::rest671) => let val result=MlyValue.exp(
fn _ => let val exp as exp1=exp1 ()
 in (
markexp(markexp(RaiseExp exp, expleft,expright),
				      RAISEleft,expright)
) end
)
 in (LrTable.NT 19,(result,RAISE1left,exp1right),rest671) end
| (55,(_,(_,_,RPAREN1right))::(_,(MlyValue.exp_list exp_list1,_,_))::_
::(_,(_,CCALL1left,_))::rest671) => let val result=MlyValue.exp(fn _
 => let val exp_list as exp_list1=exp_list1 ()
 in (CcallExp (hd exp_list, tl exp_list)) end
)
 in (LrTable.NT 19,(result,CCALL1left,RPAREN1right),rest671) end
| (56,(_,(MlyValue.aexp aexp1,aexpleft as aexp1left,aexpright as 
aexp1right))::rest671) => let val result=MlyValue.app_exp(fn _ => let 
val aexp as aexp1=aexp1 ()
 in (
[{item=markexp(aexp,aexpleft,aexpright),
			   region=(aexpleft,aexpright), fixity=NONE}]
) end
)
 in (LrTable.NT 20,(result,aexp1left,aexp1right),rest671) end
| (57,(_,(MlyValue.ident ident1,identleft as ident1left,identright as 
ident1right))::rest671) => let val result=MlyValue.app_exp(fn _ => 
let val ident as ident1=ident1 ()
 in (
[let val (v,f) = var'n'fix ident
			    in {item=markexp(VarExp [v],identleft,identright),
				region=(identleft,identright),
				fixity=SOME f}
			    end]
) end
)
 in (LrTable.NT 20,(result,ident1left,ident1right),rest671) end
| (58,(_,(MlyValue.app_exp app_exp1,_,app_exp1right))::(_,(
MlyValue.aexp aexp1,aexpleft as aexp1left,aexpright))::rest671) => 
let val result=MlyValue.app_exp(fn _ => let val aexp as aexp1=aexp1 ()
val app_exp as app_exp1=app_exp1 ()
 in (
{item=markexp(aexp,aexpleft,aexpright),
			  region=(aexpleft,aexpright), fixity=NONE}
                            :: app_exp
) end
)
 in (LrTable.NT 20,(result,aexp1left,app_exp1right),rest671) end
| (59,(_,(MlyValue.app_exp app_exp1,_,app_exp1right))::(_,(
MlyValue.ident ident1,identleft as ident1left,identright))::rest671)
 => let val result=MlyValue.app_exp(fn _ => let val ident as ident1=
ident1 ()
val app_exp as app_exp1=app_exp1 ()
 in (
let val (v,f) = var'n'fix ident
			  in {item=markexp(VarExp [v],identleft,identright),
			      region=(identleft,identright),
				fixity=SOME f} :: app_exp
			 end
) end
)
 in (LrTable.NT 20,(result,ident1left,app_exp1right),rest671) end
| (60,(_,(MlyValue.ident ident1,_,ident1right))::(_,(_,OP1left,_))::
rest671) => let val result=MlyValue.aexp(fn _ => let val ident as 
ident1=ident1 ()
 in (VarExp [varSymbol ident]) end
)
 in (LrTable.NT 21,(result,OP1left,ident1right),rest671) end
| (61,(_,(MlyValue.qid qid1,_,qid1right))::_::(_,(MlyValue.ID ID1,
ID1left,_))::rest671) => let val result=MlyValue.aexp(fn _ => let val 
ID as ID1=ID1 ()
val qid as qid1=qid1 ()
 in (VarExp (strSymbol ID :: qid varSymbol)) end
)
 in (LrTable.NT 21,(result,ID1left,qid1right),rest671) end
| (62,(_,(MlyValue.int int1,int1left,int1right))::rest671) => let val 
result=MlyValue.aexp(fn _ => let val int as int1=int1 ()
 in (IntExp int) end
)
 in (LrTable.NT 21,(result,int1left,int1right),rest671) end
| (63,(_,(MlyValue.WORD WORD1,WORD1left,WORD1right))::rest671) => let 
val result=MlyValue.aexp(fn _ => let val WORD as WORD1=WORD1 ()
 in (WordExp WORD) end
)
 in (LrTable.NT 21,(result,WORD1left,WORD1right),rest671) end
| (64,(_,(MlyValue.REAL REAL1,REAL1left,REAL1right))::rest671) => let 
val result=MlyValue.aexp(fn _ => let val REAL as REAL1=REAL1 ()
 in (RealExp REAL) end
)
 in (LrTable.NT 21,(result,REAL1left,REAL1right),rest671) end
| (65,(_,(MlyValue.STRING STRING1,STRING1left,STRING1right))::rest671)
 => let val result=MlyValue.aexp(fn _ => let val STRING as STRING1=
STRING1 ()
 in (StringExp STRING) end
)
 in (LrTable.NT 21,(result,STRING1left,STRING1right),rest671) end
| (66,(_,(MlyValue.CHAR CHAR1,CHAR1left,CHAR1right))::rest671) => let 
val result=MlyValue.aexp(fn _ => let val CHAR as CHAR1=CHAR1 ()
 in (CharExp CHAR) end
)
 in (LrTable.NT 21,(result,CHAR1left,CHAR1right),rest671) end
| (67,(_,(MlyValue.selector selector1,_,selectorright as 
selector1right))::(_,(_,HASHleft as HASH1left,_))::rest671) => let 
val result=MlyValue.aexp(fn _ => let val selector as selector1=
selector1 ()
 in (markexp(SelectorExp selector,
						   HASHleft, selectorright))
 end
)
 in (LrTable.NT 21,(result,HASH1left,selector1right),rest671) end
| (68,(_,(_,_,RBRACEright as RBRACE1right))::(_,(MlyValue.elabels 
elabels1,_,_))::(_,(_,LBRACEleft as LBRACE1left,_))::rest671) => let 
val result=MlyValue.aexp(fn _ => let val elabels as elabels1=elabels1 
()
 in (markexp(RecordExp elabels,
					 LBRACEleft,RBRACEright)) end
)
 in (LrTable.NT 21,(result,LBRACE1left,RBRACE1right),rest671) end
| (69,(_,(_,_,RBRACE1right))::(_,(_,LBRACE1left,_))::rest671) => let 
val result=MlyValue.aexp(fn _ => (RecordExp nil))
 in (LrTable.NT 21,(result,LBRACE1left,RBRACE1right),rest671) end
| (70,(_,(_,_,RPAREN1right))::(_,(_,LPAREN1left,_))::rest671) => let 
val result=MlyValue.aexp(fn _ => (unitExp))
 in (LrTable.NT 21,(result,LPAREN1left,RPAREN1right),rest671) end
| (71,(_,(_,_,RPAREN1right))::(_,(MlyValue.exp_ps exp_ps1,_,_))::(_,(_
,LPAREN1left,_))::rest671) => let val result=MlyValue.aexp(fn _ => 
let val exp_ps as exp_ps1=exp_ps1 ()
 in (SeqExp exp_ps) end
)
 in (LrTable.NT 21,(result,LPAREN1left,RPAREN1right),rest671) end
| (72,(_,(_,_,RPAREN1right))::(_,(MlyValue.exp_2c exp_2c1,_,_))::(_,(_
,LPAREN1left,_))::rest671) => let val result=MlyValue.aexp(fn _ => 
let val exp_2c as exp_2c1=exp_2c1 ()
 in (TupleExp exp_2c) end
)
 in (LrTable.NT 21,(result,LPAREN1left,RPAREN1right),rest671) end
| (73,(_,(_,_,RBRACKET1right))::(_,(MlyValue.exp_list exp_list1,_,_))
::(_,(_,LBRACKET1left,_))::rest671) => let val result=MlyValue.aexp(
fn _ => let val exp_list as exp_list1=exp_list1 ()
 in (ListExp exp_list) end
)
 in (LrTable.NT 21,(result,LBRACKET1left,RBRACKET1right),rest671) end
| (74,(_,(_,_,RBRACKET1right))::(_,(_,LBRACKET1left,_))::rest671) => 
let val result=MlyValue.aexp(fn _ => (ListExp nil))
 in (LrTable.NT 21,(result,LBRACKET1left,RBRACKET1right),rest671) end
| (75,(_,(_,_,ENDright as END1right))::(_,(MlyValue.exp_ps exp_ps1,_,_
))::_::(_,(MlyValue.ldecs ldecs1,ldecsleft,ldecsright))::(_,(_,LETleft
 as LET1left,_))::rest671) => let val result=MlyValue.aexp(fn _ => 
let val ldecs as ldecs1=ldecs1 ()
val exp_ps as exp_ps1=exp_ps1 ()
 in (
markexp (LetExp{dec=markdec(ldecs,ldecsleft,
							     ldecsright),
						 expr=SeqExp exp_ps},
					  LETleft,ENDright)
) end
)
 in (LrTable.NT 21,(result,LET1left,END1right),rest671) end
| (76,(_,(MlyValue.exp_2c exp_2c1,_,exp_2c1right))::_::(_,(
MlyValue.exp exp1,exp1left,_))::rest671) => let val result=
MlyValue.exp_2c(fn _ => let val exp as exp1=exp1 ()
val exp_2c as exp_2c1=exp_2c1 ()
 in (exp :: exp_2c) end
)
 in (LrTable.NT 23,(result,exp1left,exp_2c1right),rest671) end
| (77,(_,(MlyValue.exp exp2,_,exp2right))::_::(_,(MlyValue.exp exp1,
exp1left,_))::rest671) => let val result=MlyValue.exp_2c(fn _ => let 
val exp1=exp1 ()
val exp2=exp2 ()
 in ([exp1, exp2]) end
)
 in (LrTable.NT 23,(result,exp1left,exp2right),rest671) end
| (78,(_,(MlyValue.exp exp1,exp1left,exp1right))::rest671) => let val 
result=MlyValue.exp_list(fn _ => let val exp as exp1=exp1 ()
 in ([exp]) end
)
 in (LrTable.NT 22,(result,exp1left,exp1right),rest671) end
| (79,(_,(MlyValue.exp_list exp_list1,_,exp_list1right))::_::(_,(
MlyValue.exp exp1,exp1left,_))::rest671) => let val result=
MlyValue.exp_list(fn _ => let val exp as exp1=exp1 ()
val exp_list as exp_list1=exp_list1 ()
 in (exp :: exp_list) end
)
 in (LrTable.NT 22,(result,exp1left,exp_list1right),rest671) end
| (80,(_,(MlyValue.pat pat2,_,pat2right))::_::(_,(MlyValue.pat pat1,
pat1left,_))::rest671) => let val result=MlyValue.pat(fn _ => let val 
pat1=pat1 ()
val pat2=pat2 ()
 in (layered(pat1, pat2,
					 error(pat1left,pat2right))) end
)
 in (LrTable.NT 24,(result,pat1left,pat2right),rest671) end
| (81,(_,(MlyValue.ty ty1,_,ty1right))::_::(_,(MlyValue.pat pat1,
pat1left,_))::rest671) => let val result=MlyValue.pat(fn _ => let val 
pat as pat1=pat1 ()
val ty as ty1=ty1 ()
 in (ConstraintPat{pattern=pat, constraint=ty}) end
)
 in (LrTable.NT 24,(result,pat1left,ty1right),rest671) end
| (82,(_,(MlyValue.apats apats1,apats1left,apats1right))::rest671) => 
let val result=MlyValue.pat(fn _ => let val apats as apats1=apats1 ()
 in (FlatAppPat apats) end
)
 in (LrTable.NT 24,(result,apats1left,apats1right),rest671) end
| (83,(_,(MlyValue.apat' apat'1,apat'left as apat'1left,apat'right as 
apat'1right))::rest671) => let val result=MlyValue.apat(fn _ => let 
val apat' as apat'1=apat'1 ()
 in ({item=apat', region=(apat'left,apat'right),
			  fixity=NONE})
 end
)
 in (LrTable.NT 25,(result,apat'1left,apat'1right),rest671) end
| (84,(_,(_,_,RPARENright as RPAREN1right))::(_,(MlyValue.pat pat1,_,_
))::(_,(_,LPARENleft as LPAREN1left,_))::rest671) => let val result=
MlyValue.apat(fn _ => let val pat as pat1=pat1 ()
 in (
{item=pat,
				  region=(LPARENleft,RPARENright),
				  fixity=NONE})
 end
)
 in (LrTable.NT 25,(result,LPAREN1left,RPAREN1right),rest671) end
| (85,(_,(MlyValue.id id1,idleft as id1left,idright as id1right))::
rest671) => let val result=MlyValue.apat(fn _ => let val id as id1=id1
 ()
 in (
let val (v,f) = var'n'fix id
				 in {item=VarPat [v],
				     region=(idleft,idright),
				     fixity=SOME f} end
) end
)
 in (LrTable.NT 25,(result,id1left,id1right),rest671) end
| (86,(_,(_,_,RPARENright as RPAREN1right))::(_,(_,LPARENleft as 
LPAREN1left,_))::rest671) => let val result=MlyValue.apat(fn _ => (
{item=unitPat,fixity=NONE,
				  region=(LPARENleft,RPARENright)}))
 in (LrTable.NT 25,(result,LPAREN1left,RPAREN1right),rest671) end
| (87,(_,(_,_,RPARENright as RPAREN1right))::(_,(MlyValue.pat_list 
pat_list1,_,_))::_::(_,(MlyValue.pat pat1,_,_))::(_,(_,LPARENleft as 
LPAREN1left,_))::rest671) => let val result=MlyValue.apat(fn _ => let 
val pat as pat1=pat1 ()
val pat_list as pat_list1=pat_list1 ()
 in (
{item=TuplePat(pat :: pat_list),
				  region=(LPARENleft,RPARENright),
				  fixity=NONE}
) end
)
 in (LrTable.NT 25,(result,LPAREN1left,RPAREN1right),rest671) end
| (88,(_,(MlyValue.ident ident1,_,ident1right))::(_,(_,OP1left,_))::
rest671) => let val result=MlyValue.apat'(fn _ => let val ident as 
ident1=ident1 ()
 in (VarPat [varSymbol ident]) end
)
 in (LrTable.NT 26,(result,OP1left,ident1right),rest671) end
| (89,(_,(MlyValue.qid qid1,_,qid1right))::_::(_,(MlyValue.ID ID1,
ID1left,_))::rest671) => let val result=MlyValue.apat'(fn _ => let 
val ID as ID1=ID1 ()
val qid as qid1=qid1 ()
 in (VarPat (strSymbol ID :: qid varSymbol)) end
)
 in (LrTable.NT 26,(result,ID1left,qid1right),rest671) end
| (90,(_,(MlyValue.int int1,int1left,int1right))::rest671) => let val 
result=MlyValue.apat'(fn _ => let val int as int1=int1 ()
 in (IntPat int) end
)
 in (LrTable.NT 26,(result,int1left,int1right),rest671) end
| (91,(_,(MlyValue.WORD WORD1,WORD1left,WORD1right))::rest671) => let 
val result=MlyValue.apat'(fn _ => let val WORD as WORD1=WORD1 ()
 in (WordPat WORD) end
)
 in (LrTable.NT 26,(result,WORD1left,WORD1right),rest671) end
| (92,(_,(MlyValue.STRING STRING1,STRING1left,STRING1right))::rest671)
 => let val result=MlyValue.apat'(fn _ => let val STRING as STRING1=
STRING1 ()
 in (StringPat STRING) end
)
 in (LrTable.NT 26,(result,STRING1left,STRING1right),rest671) end
| (93,(_,(MlyValue.CHAR CHAR1,CHAR1left,CHAR1right))::rest671) => let 
val result=MlyValue.apat'(fn _ => let val CHAR as CHAR1=CHAR1 ()
 in (CharPat CHAR) end
)
 in (LrTable.NT 26,(result,CHAR1left,CHAR1right),rest671) end
| (94,(_,(_,WILD1left,WILD1right))::rest671) => let val result=
MlyValue.apat'(fn _ => (WildPat))
 in (LrTable.NT 26,(result,WILD1left,WILD1right),rest671) end
| (95,(_,(_,_,RBRACKET1right))::(_,(_,LBRACKET1left,_))::rest671) => 
let val result=MlyValue.apat'(fn _ => (ListPat nil))
 in (LrTable.NT 26,(result,LBRACKET1left,RBRACKET1right),rest671) end
| (96,(_,(_,_,RBRACKET1right))::(_,(MlyValue.pat_list pat_list1,_,_))
::(_,(_,LBRACKET1left,_))::rest671) => let val result=MlyValue.apat'(
fn _ => let val pat_list as pat_list1=pat_list1 ()
 in (ListPat pat_list) end
)
 in (LrTable.NT 26,(result,LBRACKET1left,RBRACKET1right),rest671) end
| (97,(_,(_,_,RBRACE1right))::(_,(_,LBRACE1left,_))::rest671) => let 
val result=MlyValue.apat'(fn _ => (unitPat))
 in (LrTable.NT 26,(result,LBRACE1left,RBRACE1right),rest671) end
| (98,(_,(_,_,RBRACEright as RBRACE1right))::(_,(MlyValue.plabels 
plabels1,_,_))::(_,(_,LBRACEleft as LBRACE1left,_))::rest671) => let 
val result=MlyValue.apat'(fn _ => let val plabels as plabels1=plabels1
 ()
 in (
let val (d,f) = plabels
			     in MarkPat(RecordPat{def=d,flexibility=f},
					(LBRACEleft,RBRACEright)) end
) end
)
 in (LrTable.NT 26,(result,LBRACE1left,RBRACE1right),rest671) end
| (99,(_,(MlyValue.pat pat1,_,pat1right))::_::(_,(MlyValue.selector 
selector1,selector1left,_))::rest671) => let val result=
MlyValue.plabel(fn _ => let val selector as selector1=selector1 ()
val pat as pat1=pat1 ()
 in ((selector,pat)) end
)
 in (LrTable.NT 27,(result,selector1left,pat1right),rest671) end
| (100,(_,(MlyValue.ID ID1,ID1left,ID1right))::rest671) => let val 
result=MlyValue.plabel(fn _ => let val ID as ID1=ID1 ()
 in (labSymbol ID, VarPat [varSymbol ID]) end
)
 in (LrTable.NT 27,(result,ID1left,ID1right),rest671) end
| (101,(_,(MlyValue.pat pat1,_,pat1right))::_::(_,(MlyValue.ID ID1,
ID1left,_))::rest671) => let val result=MlyValue.plabel(fn _ => let 
val ID as ID1=ID1 ()
val pat as pat1=pat1 ()
 in (
labSymbol ID,
				 LayeredPat{varPat=VarPat [varSymbol ID],
					    expPat=pat}
) end
)
 in (LrTable.NT 27,(result,ID1left,pat1right),rest671) end
| (102,(_,(MlyValue.ty ty1,_,ty1right))::_::(_,(MlyValue.ID ID1,
ID1left,_))::rest671) => let val result=MlyValue.plabel(fn _ => let 
val ID as ID1=ID1 ()
val ty as ty1=ty1 ()
 in (
labSymbol ID,
				 ConstraintPat{pattern=VarPat [varSymbol ID],
					       constraint=ty}
) end
)
 in (LrTable.NT 27,(result,ID1left,ty1right),rest671) end
| (103,(_,(MlyValue.pat pat1,_,pat1right))::_::(_,(MlyValue.ty ty1,_,_
))::_::(_,(MlyValue.ID ID1,ID1left,_))::rest671) => let val result=
MlyValue.plabel(fn _ => let val ID as ID1=ID1 ()
val ty as ty1=ty1 ()
val pat as pat1=pat1 ()
 in (
labSymbol ID,
				 LayeredPat
				 {varPat=ConstraintPat{pattern=VarPat [varSymbol ID],
						       constraint=ty},
				  expPat=pat}
) end
)
 in (LrTable.NT 27,(result,ID1left,pat1right),rest671) end
| (104,(_,(MlyValue.plabels plabels1,_,plabels1right))::_::(_,(
MlyValue.plabel plabel1,plabel1left,_))::rest671) => let val result=
MlyValue.plabels(fn _ => let val plabel as plabel1=plabel1 ()
val plabels as plabels1=plabels1 ()
 in (let val (a,(b,fx))=(plabel, plabels)
				 in (a::b, fx) end) end
)
 in (LrTable.NT 28,(result,plabel1left,plabels1right),rest671) end
| (105,(_,(MlyValue.plabel plabel1,plabel1left,plabel1right))::rest671
) => let val result=MlyValue.plabels(fn _ => let val plabel as plabel1
=plabel1 ()
 in ([plabel],false) end
)
 in (LrTable.NT 28,(result,plabel1left,plabel1right),rest671) end
| (106,(_,(_,DOTDOTDOT1left,DOTDOTDOT1right))::rest671) => let val 
result=MlyValue.plabels(fn _ => (nil, true))
 in (LrTable.NT 28,(result,DOTDOTDOT1left,DOTDOTDOT1right),rest671)
 end
| (107,(_,(MlyValue.pat pat1,pat1left,pat1right))::rest671) => let 
val result=MlyValue.pat_list(fn _ => let val pat as pat1=pat1 ()
 in ([pat]) end
)
 in (LrTable.NT 30,(result,pat1left,pat1right),rest671) end
| (108,(_,(MlyValue.pat_list pat_list1,_,pat_list1right))::_::(_,(
MlyValue.pat pat1,pat1left,_))::rest671) => let val result=
MlyValue.pat_list(fn _ => let val pat as pat1=pat1 ()
val pat_list as pat_list1=pat_list1 ()
 in (pat :: pat_list) end
)
 in (LrTable.NT 30,(result,pat1left,pat_list1right),rest671) end
| (109,(_,(MlyValue.exp exp1,_,expright as exp1right))::_::(_,(
MlyValue.pat pat1,patleft as pat1left,_))::rest671) => let val result=
MlyValue.vbpe(fn _ => let val pat as pat1=pat1 ()
val exp as exp1=exp1 ()
 in (MarkVb(Vb{exp=exp,pat=pat},(patleft,expright))) end
)
 in (LrTable.NT 31,(result,pat1left,exp1right),rest671) end
| (110,(_,(MlyValue.vbpe vbpe1,vbpe1left,vbpe1right))::rest671) => 
let val result=MlyValue.vb(fn _ => let val vbpe as vbpe1=vbpe1 ()
 in (([vbpe],nil)) end
)
 in (LrTable.NT 32,(result,vbpe1left,vbpe1right),rest671) end
| (111,(_,(MlyValue.vb vb1,_,vb1right))::_::(_,(MlyValue.vbpe vbpe1,
vbpe1left,_))::rest671) => let val result=MlyValue.vb(fn _ => let val 
vbpe as vbpe1=vbpe1 ()
val vb as vb1=vb1 ()
 in ((vbpe :: #1 vb, #2 vb)) end
)
 in (LrTable.NT 32,(result,vbpe1left,vb1right),rest671) end
| (112,(_,(MlyValue.rvb rvb1,_,rvb1right))::(_,(_,REC1left,_))::
rest671) => let val result=MlyValue.vb(fn _ => let val rvb as rvb1=
rvb1 ()
 in ((nil, rvb)) end
)
 in (LrTable.NT 32,(result,REC1left,rvb1right),rest671) end
| (113,rest671) => let val result=MlyValue.constraint(fn _ => (NONE))
 in (LrTable.NT 33,(result,defaultPos,defaultPos),rest671) end
| (114,(_,(MlyValue.ty ty1,_,ty1right))::(_,(_,COLON1left,_))::rest671
) => let val result=MlyValue.constraint(fn _ => let val ty as ty1=ty1 
()
 in (SOME ty) end
)
 in (LrTable.NT 33,(result,COLON1left,ty1right),rest671) end
| (115,(_,(MlyValue.match match1,_,matchright as match1right))::_::_::
(_,(MlyValue.pat pat1,patleft as pat1left,_))::rest671) => let val 
result=MlyValue.vbm(fn _ => let val pat as pat1=pat1 ()
val match as match1=match1 ()
 in (MarkVb(Vb{exp=FnExp match,pat=pat},(patleft,matchright))) end
)
 in (LrTable.NT 34,(result,pat1left,match1right),rest671) end
| (116,(_,(MlyValue.vbm vbm1,vbm1left,vbm1right))::rest671) => let 
val result=MlyValue.rvb(fn _ => let val vbm as vbm1=vbm1 ()
 in ([vbm]) end
)
 in (LrTable.NT 35,(result,vbm1left,vbm1right),rest671) end
| (117,(_,(MlyValue.rvb rvb1,_,rvb1right))::_::(_,(MlyValue.vbm vbm1,
vbm1left,_))::rest671) => let val result=MlyValue.rvb(fn _ => let val 
vbm as vbm1=vbm1 ()
val rvb as rvb1=rvb1 ()
 in (vbm :: rvb) end
)
 in (LrTable.NT 35,(result,vbm1left,rvb1right),rest671) end
| (118,(_,(MlyValue.rvb rvb1,_,rvb1right))::(_,(_,REC1left,_))::
rest671) => let val result=MlyValue.rvb(fn _ => let val rvb as rvb1=
rvb1 ()
 in (rvb) end
)
 in (LrTable.NT 35,(result,REC1left,rvb1right),rest671) end
| (119,(_,(MlyValue.clause clause1,clause1left,clause1right))::rest671
) => let val result=MlyValue.fb'(fn _ => let val clause as clause1=
clause1 ()
 in ([clause]) end
)
 in (LrTable.NT 36,(result,clause1left,clause1right),rest671) end
| (120,(_,(MlyValue.fb' fb'1,_,fb'1right))::_::(_,(MlyValue.clause 
clause1,clause1left,_))::rest671) => let val result=MlyValue.fb'(fn _
 => let val clause as clause1=clause1 ()
val fb' as fb'1=fb'1 ()
 in (clause :: fb') end
)
 in (LrTable.NT 36,(result,clause1left,fb'1right),rest671) end
| (121,(_,(MlyValue.fb' fb'1,fb'left as fb'1left,fb'right as fb'1right
))::rest671) => let val result=MlyValue.fb(fn _ => let val fb' as fb'1
=fb'1 ()
 in ([MarkFb(Fb fb', (fb'left,fb'right))]) end
)
 in (LrTable.NT 37,(result,fb'1left,fb'1right),rest671) end
| (122,(_,(MlyValue.fb fb1,_,fb1right))::_::(_,(MlyValue.fb' fb'1,
fb'left as fb'1left,fb'right))::rest671) => let val result=MlyValue.fb
(fn _ => let val fb' as fb'1=fb'1 ()
val fb as fb1=fb1 ()
 in (MarkFb(Fb fb', (fb'left,fb'right)) :: fb) end
)
 in (LrTable.NT 37,(result,fb'1left,fb1right),rest671) end
| (123,(_,(MlyValue.apat apat1,apat1left,apat1right))::rest671) => 
let val result=MlyValue.apats(fn _ => let val apat as apat1=apat1 ()
 in ([apat]) end
)
 in (LrTable.NT 38,(result,apat1left,apat1right),rest671) end
| (124,(_,(MlyValue.apats apats1,_,apats1right))::(_,(MlyValue.apat 
apat1,apat1left,_))::rest671) => let val result=MlyValue.apats(fn _
 => let val apat as apat1=apat1 ()
val apats as apats1=apats1 ()
 in (apat :: apats) end
)
 in (LrTable.NT 38,(result,apat1left,apats1right),rest671) end
| (125,(_,(MlyValue.exp exp1,expleft,expright as exp1right))::_::(_,(
MlyValue.constraint constraint1,_,_))::(_,(MlyValue.apats apats1,
apats1left,_))::rest671) => let val result=MlyValue.clause(fn _ => 
let val apats as apats1=apats1 ()
val constraint as constraint1=constraint1 ()
val exp as exp1=exp1 ()
 in (
Clause{pats=apats,
			resultty=constraint,
			exp=markexp(exp,expleft,expright)}
) end
)
 in (LrTable.NT 39,(result,apats1left,exp1right),rest671) end
| (126,(_,(MlyValue.ty ty1,tyleft,tyright as ty1right))::_::(_,(
MlyValue.ID ID1,_,_))::(_,(MlyValue.tyvars tyvars1,tyvars1left,_))::
rest671) => let val result=MlyValue.tb(fn _ => let val tyvars as 
tyvars1=tyvars1 ()
val ID as ID1=ID1 ()
val ty as ty1=ty1 ()
 in (
[MarkTb(
				   Tb{tyvars=tyvars,tyc=tycSymbol ID,def=ty},
				   (tyleft,tyright))]
) end
)
 in (LrTable.NT 40,(result,tyvars1left,ty1right),rest671) end
| (127,(_,(MlyValue.tb tb2,_,tb2right))::_::(_,(MlyValue.tb tb1,
tb1left,_))::rest671) => let val result=MlyValue.tb(fn _ => let val 
tb1=tb1 ()
val tb2=tb2 ()
 in (tb1 @ tb2) end
)
 in (LrTable.NT 40,(result,tb1left,tb2right),rest671) end
| (128,(_,(MlyValue.TYVAR TYVAR1,TYVARleft as TYVAR1left,TYVARright
 as TYVAR1right))::rest671) => let val result=MlyValue.tyvars(fn _ => 
let val TYVAR as TYVAR1=TYVAR1 ()
 in ([MarkTyv(Tyv(tyvSymbol TYVAR),
					 (TYVARleft,TYVARright))])
 end
)
 in (LrTable.NT 41,(result,TYVAR1left,TYVAR1right),rest671) end
| (129,(_,(_,_,RPAREN1right))::(_,(MlyValue.tyvar_pc tyvar_pc1,_,_))::
(_,(_,LPAREN1left,_))::rest671) => let val result=MlyValue.tyvars(fn _
 => let val tyvar_pc as tyvar_pc1=tyvar_pc1 ()
 in (tyvar_pc) end
)
 in (LrTable.NT 41,(result,LPAREN1left,RPAREN1right),rest671) end
| (130,rest671) => let val result=MlyValue.tyvars(fn _ => (nil))
 in (LrTable.NT 41,(result,defaultPos,defaultPos),rest671) end
| (131,(_,(MlyValue.TYVAR TYVAR1,TYVARleft as TYVAR1left,TYVARright
 as TYVAR1right))::rest671) => let val result=MlyValue.tyvarseq(fn _
 => let val TYVAR as TYVAR1=TYVAR1 ()
 in ([MarkTyv(Tyv(tyvSymbol TYVAR),
					 (TYVARleft,TYVARright))])
 end
)
 in (LrTable.NT 42,(result,TYVAR1left,TYVAR1right),rest671) end
| (132,(_,(_,_,RPAREN1right))::(_,(MlyValue.tyvar_pc tyvar_pc1,_,_))::
(_,(_,LPAREN1left,_))::rest671) => let val result=MlyValue.tyvarseq(
fn _ => let val tyvar_pc as tyvar_pc1=tyvar_pc1 ()
 in (tyvar_pc) end
)
 in (LrTable.NT 42,(result,LPAREN1left,RPAREN1right),rest671) end
| (133,(_,(MlyValue.TYVAR TYVAR1,TYVARleft as TYVAR1left,TYVARright
 as TYVAR1right))::rest671) => let val result=MlyValue.tyvar_pc(fn _
 => let val TYVAR as TYVAR1=TYVAR1 ()
 in ([MarkTyv(Tyv(tyvSymbol TYVAR), (TYVARleft,TYVARright))]) end
)
 in (LrTable.NT 43,(result,TYVAR1left,TYVAR1right),rest671) end
| (134,(_,(MlyValue.tyvar_pc tyvar_pc1,_,tyvar_pc1right))::_::(_,(
MlyValue.TYVAR TYVAR1,TYVARleft as TYVAR1left,TYVARright))::rest671)
 => let val result=MlyValue.tyvar_pc(fn _ => let val TYVAR as TYVAR1=
TYVAR1 ()
val tyvar_pc as tyvar_pc1=tyvar_pc1 ()
 in (
MarkTyv(Tyv(tyvSymbol TYVAR),(TYVARleft,TYVARright))
		 :: tyvar_pc)
 end
)
 in (LrTable.NT 43,(result,TYVAR1left,tyvar_pc1right),rest671) end
| (135,(_,(MlyValue.db db2,_,db2right))::_::(_,(MlyValue.db db1,
db1left,_))::rest671) => let val result=MlyValue.db(fn _ => let val 
db1=db1 ()
val db2=db2 ()
 in (db1 @ db2) end
)
 in (LrTable.NT 44,(result,db1left,db2right),rest671) end
| (136,(_,(MlyValue.dbrhs dbrhs1,_,dbrhs1right))::_::(_,(MlyValue.ID 
ID1,ID1left,_))::rest671) => let val result=MlyValue.db(fn _ => let 
val ID as ID1=ID1 ()
val dbrhs as dbrhs1=dbrhs1 ()
 in ([Db{tyc=tycSymbol ID,tyvars=[],rhs=dbrhs}]) end
)
 in (LrTable.NT 44,(result,ID1left,dbrhs1right),rest671) end
| (137,(_,(MlyValue.dbrhs dbrhs1,_,dbrhs1right))::_::(_,(MlyValue.ID 
ID1,_,_))::(_,(MlyValue.tyvarseq tyvarseq1,tyvarseq1left,_))::rest671)
 => let val result=MlyValue.db(fn _ => let val tyvarseq as tyvarseq1=
tyvarseq1 ()
val ID as ID1=ID1 ()
val dbrhs as dbrhs1=dbrhs1 ()
 in ([Db{tyc=tycSymbol ID,tyvars=tyvarseq,rhs=dbrhs}]) end
)
 in (LrTable.NT 44,(result,tyvarseq1left,dbrhs1right),rest671) end
| (138,(_,(MlyValue.constrs constrs1,constrs1left,constrs1right))::
rest671) => let val result=MlyValue.dbrhs(fn _ => let val constrs as 
constrs1=constrs1 ()
 in (Constrs constrs) end
)
 in (LrTable.NT 45,(result,constrs1left,constrs1right),rest671) end
| (139,(_,(MlyValue.constr constr1,constr1left,constr1right))::rest671
) => let val result=MlyValue.constrs(fn _ => let val constr as constr1
=constr1 ()
 in ([constr]) end
)
 in (LrTable.NT 46,(result,constr1left,constr1right),rest671) end
| (140,(_,(MlyValue.constrs constrs1,_,constrs1right))::_::(_,(
MlyValue.constr constr1,constr1left,_))::rest671) => let val result=
MlyValue.constrs(fn _ => let val constr as constr1=constr1 ()
val constrs as constrs1=constrs1 ()
 in (constr :: constrs) end
)
 in (LrTable.NT 46,(result,constr1left,constrs1right),rest671) end
| (141,(_,(MlyValue.ident ident1,_,ident1right))::(_,(MlyValue.op_op 
op_op1,op_op1left,_))::rest671) => let val result=MlyValue.constr(fn _
 => let val op_op1=op_op1 ()
val ident as ident1=ident1 ()
 in (varSymbol ident, NONE) end
)
 in (LrTable.NT 47,(result,op_op1left,ident1right),rest671) end
| (142,(_,(MlyValue.ty ty1,_,ty1right))::_::(_,(MlyValue.ident ident1,
_,_))::(_,(MlyValue.op_op op_op1,op_op1left,_))::rest671) => let val 
result=MlyValue.constr(fn _ => let val op_op1=op_op1 ()
val ident as ident1=ident1 ()
val ty as ty1=ty1 ()
 in (varSymbol ident, SOME ty) end
)
 in (LrTable.NT 47,(result,op_op1left,ty1right),rest671) end
| (143,(_,(MlyValue.ident ident1,_,ident1right))::(_,(MlyValue.op_op 
op_op1,op_op1left,_))::rest671) => let val result=MlyValue.eb(fn _ => 
let val op_op1=op_op1 ()
val ident as ident1=ident1 ()
 in ([EbGen{exn=(varSymbol ident),etype=NONE}]) end
)
 in (LrTable.NT 48,(result,op_op1left,ident1right),rest671) end
| (144,(_,(MlyValue.ty ty1,_,ty1right))::_::(_,(MlyValue.ident ident1,
_,_))::(_,(MlyValue.op_op op_op1,op_op1left,_))::rest671) => let val 
result=MlyValue.eb(fn _ => let val op_op1=op_op1 ()
val ident as ident1=ident1 ()
val ty as ty1=ty1 ()
 in ([EbGen{exn=(varSymbol ident),etype=SOME ty}]) end
)
 in (LrTable.NT 48,(result,op_op1left,ty1right),rest671) end
| (145,(_,(MlyValue.qid qid1,_,qid1right))::_::(_,(MlyValue.ident 
ident1,_,_))::(_,(MlyValue.op_op op_op1,op_op1left,_))::rest671) => 
let val result=MlyValue.eb(fn _ => let val op_op1=op_op1 ()
val ident as ident1=ident1 ()
val qid as qid1=qid1 ()
 in ([EbDef{exn=varSymbol ident,
					edef=qid varSymbol}]) end
)
 in (LrTable.NT 48,(result,op_op1left,qid1right),rest671) end
| (146,(_,(MlyValue.eb eb2,_,eb2right))::_::(_,(MlyValue.eb eb1,
eb1left,_))::rest671) => let val result=MlyValue.eb(fn _ => let val 
eb1=eb1 ()
val eb2=eb2 ()
 in (eb1 @ eb2) end
)
 in (LrTable.NT 48,(result,eb1left,eb2right),rest671) end
| (147,(_,(MlyValue.qid qid1,qid1left,qid1right))::rest671) => let 
val result=MlyValue.qid_p(fn _ => let val qid as qid1=qid1 ()
 in ([qid strSymbol]) end
)
 in (LrTable.NT 49,(result,qid1left,qid1right),rest671) end
| (148,(_,(MlyValue.qid_p qid_p1,_,qid_p1right))::(_,(MlyValue.qid 
qid1,qid1left,_))::rest671) => let val result=MlyValue.qid_p(fn _ => 
let val qid as qid1=qid1 ()
val qid_p as qid_p1=qid_p1 ()
 in (qid strSymbol :: qid_p) end
)
 in (LrTable.NT 49,(result,qid1left,qid_p1right),rest671) end
| (149,(_,(MlyValue.ident ident1,ident1left,ident1right))::rest671)
 => let val result=MlyValue.ops(fn _ => let val ident as ident1=ident1
 ()
 in ([fixSymbol ident]) end
)
 in (LrTable.NT 50,(result,ident1left,ident1right),rest671) end
| (150,(_,(MlyValue.ops ops1,_,ops1right))::(_,(MlyValue.ident ident1,
ident1left,_))::rest671) => let val result=MlyValue.ops(fn _ => let 
val ident as ident1=ident1 ()
val ops as ops1=ops1 ()
 in (fixSymbol ident :: ops) end
)
 in (LrTable.NT 50,(result,ident1left,ops1right),rest671) end
| (151,(_,(MlyValue.ops ops1,_,ops1right))::(_,(_,INFIX1left,_))::
rest671) => let val result=MlyValue.fixity(fn _ => let val ops as ops1
=ops1 ()
 in ({fixity=infixleft 0, ops=ops}) end
)
 in (LrTable.NT 51,(result,INFIX1left,ops1right),rest671) end
| (152,(_,(MlyValue.ops ops1,_,ops1right))::(_,(MlyValue.DIGIT DIGIT1,
_,_))::(_,(_,INFIX1left,_))::rest671) => let val result=
MlyValue.fixity(fn _ => let val DIGIT as DIGIT1=DIGIT1 ()
val ops as ops1=ops1 ()
 in ({fixity=infixleft DIGIT, ops=ops}) end
)
 in (LrTable.NT 51,(result,INFIX1left,ops1right),rest671) end
| (153,(_,(MlyValue.ops ops1,_,ops1right))::(_,(_,INFIXR1left,_))::
rest671) => let val result=MlyValue.fixity(fn _ => let val ops as ops1
=ops1 ()
 in ({fixity=infixright 0, ops=ops}) end
)
 in (LrTable.NT 51,(result,INFIXR1left,ops1right),rest671) end
| (154,(_,(MlyValue.ops ops1,_,ops1right))::(_,(MlyValue.DIGIT DIGIT1,
_,_))::(_,(_,INFIXR1left,_))::rest671) => let val result=
MlyValue.fixity(fn _ => let val DIGIT as DIGIT1=DIGIT1 ()
val ops as ops1=ops1 ()
 in ({fixity=infixright DIGIT, ops=ops}) end
)
 in (LrTable.NT 51,(result,INFIXR1left,ops1right),rest671) end
| (155,(_,(MlyValue.ops ops1,_,ops1right))::(_,(_,NONFIX1left,_))::
rest671) => let val result=MlyValue.fixity(fn _ => let val ops as ops1
=ops1 ()
 in ({fixity=NONfix,ops=ops}) end
)
 in (LrTable.NT 51,(result,NONFIX1left,ops1right),rest671) end
| (156,(_,(MlyValue.vb vb1,_,vb1right))::(_,(_,VAL1left,_))::rest671)
 => let val result=MlyValue.ldec(fn _ => let val vb as vb1=vb1 ()
 in (ValDec(#1 vb, #2 vb,ref [])) end
)
 in (LrTable.NT 52,(result,VAL1left,vb1right),rest671) end
| (157,(_,(MlyValue.vb vb1,_,vb1right))::(_,(MlyValue.tyvarseq 
tyvarseq1,_,_))::(_,(_,VAL1left,_))::rest671) => let val result=
MlyValue.ldec(fn _ => let val tyvarseq as tyvarseq1=tyvarseq1 ()
val vb as vb1=vb1 ()
 in (ValDec(#1 vb, #2 vb,ref tyvarseq)) end
)
 in (LrTable.NT 52,(result,VAL1left,vb1right),rest671) end
| (158,(_,(MlyValue.fb fb1,_,fb1right))::(_,(_,FUN1left,_))::rest671)
 => let val result=MlyValue.ldec(fn _ => let val fb as fb1=fb1 ()
 in (FunDec (fb,ref [])) end
)
 in (LrTable.NT 52,(result,FUN1left,fb1right),rest671) end
| (159,(_,(MlyValue.fb fb1,_,fb1right))::(_,(MlyValue.tyvarseq 
tyvarseq1,_,_))::(_,(_,FUN1left,_))::rest671) => let val result=
MlyValue.ldec(fn _ => let val tyvarseq as tyvarseq1=tyvarseq1 ()
val fb as fb1=fb1 ()
 in (FunDec(fb,ref tyvarseq)) end
)
 in (LrTable.NT 52,(result,FUN1left,fb1right),rest671) end
| (160,(_,(MlyValue.ty ty1,_,ty1right))::_::(_,(MlyValue.ID ID1,_,_))
::(_,(_,EXTERN1left,_))::rest671) => let val result=MlyValue.ldec(fn _
 => let val ID as ID1=ID1 ()
val ty as ty1=ty1 ()
 in (ExternDec(varSymbol ID,ty)) end
)
 in (LrTable.NT 52,(result,EXTERN1left,ty1right),rest671) end
| (161,(_,(MlyValue.tb tb1,_,tb1right))::(_,(_,TYPE1left,_))::rest671)
 => let val result=MlyValue.ldec(fn _ => let val tb as tb1=tb1 ()
 in (TypeDec tb) end
)
 in (LrTable.NT 52,(result,TYPE1left,tb1right),rest671) end
| (162,(_,(MlyValue.qid qid1,_,qid1right))::_::_::(_,(MlyValue.ID ID1,
_,_))::(_,(_,DATATYPE1left,_))::rest671) => let val result=
MlyValue.ldec(fn _ => let val ID as ID1=ID1 ()
val qid as qid1=qid1 ()
 in (
DatatypeDec{datatycs=[Db{tyc=tycSymbol ID,tyvars=[],rhs=Repl (qid tycSymbol)}],
					     withtycs=[]}
) end
)
 in (LrTable.NT 52,(result,DATATYPE1left,qid1right),rest671) end
| (163,(_,(MlyValue.db db1,_,db1right))::(_,(_,DATATYPE1left,_))::
rest671) => let val result=MlyValue.ldec(fn _ => let val db as db1=db1
 ()
 in (DatatypeDec{datatycs=db,withtycs=[]}) end
)
 in (LrTable.NT 52,(result,DATATYPE1left,db1right),rest671) end
| (164,(_,(MlyValue.tb tb1,_,tb1right))::_::(_,(MlyValue.db db1,_,_))
::(_,(_,DATATYPE1left,_))::rest671) => let val result=MlyValue.ldec(
fn _ => let val db as db1=db1 ()
val tb as tb1=tb1 ()
 in (DatatypeDec{datatycs=db,withtycs=tb}) end
)
 in (LrTable.NT 52,(result,DATATYPE1left,tb1right),rest671) end
| (165,(_,(_,_,END1right))::(_,(MlyValue.ldecs ldecs1,_,_))::_::(_,(
MlyValue.db db1,_,_))::(_,(_,ABSTYPE1left,_))::rest671) => let val 
result=MlyValue.ldec(fn _ => let val db as db1=db1 ()
val ldecs as ldecs1=ldecs1 ()
 in (AbstypeDec{abstycs=db,withtycs=[],
						body=ldecs}) end
)
 in (LrTable.NT 52,(result,ABSTYPE1left,END1right),rest671) end
| (166,(_,(_,_,END1right))::(_,(MlyValue.ldecs ldecs1,_,_))::_::(_,(
MlyValue.tb tb1,_,_))::_::(_,(MlyValue.db db1,_,_))::(_,(_,
ABSTYPE1left,_))::rest671) => let val result=MlyValue.ldec(fn _ => 
let val db as db1=db1 ()
val tb as tb1=tb1 ()
val ldecs as ldecs1=ldecs1 ()
 in (
AbstypeDec{abstycs=db,
							     withtycs=tb,
							     body=ldecs}
) end
)
 in (LrTable.NT 52,(result,ABSTYPE1left,END1right),rest671) end
| (167,(_,(MlyValue.eb eb1,_,eb1right))::(_,(_,EXCEPTION1left,_))::
rest671) => let val result=MlyValue.ldec(fn _ => let val eb as eb1=eb1
 ()
 in (ExceptionDec eb) end
)
 in (LrTable.NT 52,(result,EXCEPTION1left,eb1right),rest671) end
| (168,(_,(MlyValue.qid_p qid_p1,_,qid_p1right))::(_,(_,OPEN1left,_))
::rest671) => let val result=MlyValue.ldec(fn _ => let val qid_p as 
qid_p1=qid_p1 ()
 in (OpenDec qid_p) end
)
 in (LrTable.NT 52,(result,OPEN1left,qid_p1right),rest671) end
| (169,(_,(MlyValue.fixity fixity1,fixity1left,fixity1right))::rest671
) => let val result=MlyValue.ldec(fn _ => let val fixity as fixity1=
fixity1 ()
 in (FixDec fixity) end
)
 in (LrTable.NT 52,(result,fixity1left,fixity1right),rest671) end
| (170,(_,(MlyValue.exp_pa exp_pa1,_,exp_pa1right))::_::(_,(
MlyValue.ty ty1,_,_))::_::(_,(MlyValue.ident ident1,_,_))::(_,(_,
OVERLOAD1left,_))::rest671) => let val result=MlyValue.ldec(fn _ => 
let val ident as ident1=ident1 ()
val ty as ty1=ty1 ()
val exp_pa as exp_pa1=exp_pa1 ()
 in (OvldDec(varSymbol ident,ty,exp_pa)) end
)
 in (LrTable.NT 52,(result,OVERLOAD1left,exp_pa1right),rest671) end
| (171,(_,(MlyValue.exp exp1,exp1left,exp1right))::rest671) => let 
val result=MlyValue.exp_pa(fn _ => let val exp as exp1=exp1 ()
 in ([exp]) end
)
 in (LrTable.NT 53,(result,exp1left,exp1right),rest671) end
| (172,(_,(MlyValue.exp_pa exp_pa1,_,exp_pa1right))::_::(_,(
MlyValue.exp exp1,exp1left,_))::rest671) => let val result=
MlyValue.exp_pa(fn _ => let val exp as exp1=exp1 ()
val exp_pa as exp_pa1=exp_pa1 ()
 in (exp :: exp_pa) end
)
 in (LrTable.NT 53,(result,exp1left,exp_pa1right),rest671) end
| (173,rest671) => let val result=MlyValue.ldecs(fn _ => (SeqDec nil))
 in (LrTable.NT 54,(result,defaultPos,defaultPos),rest671) end
| (174,(_,(MlyValue.ldecs ldecs1,_,ldecs1right))::(_,(MlyValue.ldec 
ldec1,ldecleft as ldec1left,ldecright))::rest671) => let val result=
MlyValue.ldecs(fn _ => let val ldec as ldec1=ldec1 ()
val ldecs as ldecs1=ldecs1 ()
 in (makeSEQdec
				 (markdec(ldec,ldecleft,ldecright), ldecs)) end
)
 in (LrTable.NT 54,(result,ldec1left,ldecs1right),rest671) end
| (175,(_,(MlyValue.ldecs ldecs1,_,ldecs1right))::(_,(_,SEMICOLON1left
,_))::rest671) => let val result=MlyValue.ldecs(fn _ => let val ldecs
 as ldecs1=ldecs1 ()
 in (ldecs) end
)
 in (LrTable.NT 54,(result,SEMICOLON1left,ldecs1right),rest671) end
| (176,(_,(MlyValue.ldecs ldecs3,_,ldecs3right))::(_,(_,_,ENDright))::
(_,(MlyValue.ldecs ldecs2,ldecs2left,ldecs2right))::_::(_,(
MlyValue.ldecs ldecs1,ldecs1left,ldecs1right))::(_,(_,LOCALleft as 
LOCAL1left,_))::rest671) => let val result=MlyValue.ldecs(fn _ => let 
val ldecs1=ldecs1 ()
val ldecs2=ldecs2 ()
val ldecs3=ldecs3 ()
 in (
makeSEQdec
 		   (markdec(LocalDec(markdec(ldecs1,ldecs1left,ldecs1right),
				     markdec(ldecs2,ldecs2left,ldecs2right)),
			    LOCALleft,ENDright),
 	            ldecs3)
) end
)
 in (LrTable.NT 54,(result,LOCAL1left,ldecs3right),rest671) end
| (177,rest671) => let val result=MlyValue.spec_s(fn _ => ([]))
 in (LrTable.NT 55,(result,defaultPos,defaultPos),rest671) end
| (178,(_,(MlyValue.spec_s spec_s1,_,spec_s1right))::(_,(MlyValue.spec
 spec1,spec1left,_))::rest671) => let val result=MlyValue.spec_s(fn _
 => let val spec as spec1=spec1 ()
val spec_s as spec_s1=spec_s1 ()
 in (spec @ spec_s) end
)
 in (LrTable.NT 55,(result,spec1left,spec_s1right),rest671) end
| (179,(_,(MlyValue.spec_s spec_s1,_,spec_s1right))::(_,(_,
SEMICOLON1left,_))::rest671) => let val result=MlyValue.spec_s(fn _
 => let val spec_s as spec_s1=spec_s1 ()
 in (spec_s) end
)
 in (LrTable.NT 55,(result,SEMICOLON1left,spec_s1right),rest671) end
| (180,(_,(MlyValue.strspec strspec1,_,strspec1right))::(_,(_,
STRUCTURE1left,_))::rest671) => let val result=MlyValue.spec(fn _ => 
let val strspec as strspec1=strspec1 ()
 in ([StrSpec strspec]) end
)
 in (LrTable.NT 56,(result,STRUCTURE1left,strspec1right),rest671) end
| (181,(_,(MlyValue.strspec strspec1,_,strspec1right))::(_,(_,
FUNCTOR1left,_))::rest671) => let val result=MlyValue.spec(fn _ => 
let val strspec as strspec1=strspec1 ()
 in ([StrSpec strspec]) end
)
 in (LrTable.NT 56,(result,FUNCTOR1left,strspec1right),rest671) end
| (182,(_,(MlyValue.qid qid1,_,qid1right))::_::_::(_,(MlyValue.ID ID1,
_,_))::(_,(_,DATATYPE1left,_))::rest671) => let val result=
MlyValue.spec(fn _ => let val ID as ID1=ID1 ()
val qid as qid1=qid1 ()
 in (
[DataSpec{datatycs=[Db{tyc=tycSymbol ID,tyvars=[],rhs=Repl (qid tycSymbol)}],
					     withtycs=[]}]
) end
)
 in (LrTable.NT 56,(result,DATATYPE1left,qid1right),rest671) end
| (183,(_,(MlyValue.db db1,_,db1right))::(_,(_,DATATYPE1left,_))::
rest671) => let val result=MlyValue.spec(fn _ => let val db as db1=db1
 ()
 in ([DataSpec{datatycs=db,withtycs=nil}]) end
)
 in (LrTable.NT 56,(result,DATATYPE1left,db1right),rest671) end
| (184,(_,(MlyValue.tb tb1,_,tb1right))::_::(_,(MlyValue.db db1,_,_))
::(_,(_,DATATYPE1left,_))::rest671) => let val result=MlyValue.spec(
fn _ => let val db as db1=db1 ()
val tb as tb1=tb1 ()
 in ([DataSpec{datatycs=db,withtycs=tb}]) end
)
 in (LrTable.NT 56,(result,DATATYPE1left,tb1right),rest671) end
| (185,(_,(MlyValue.tyspec tyspec1,_,tyspec1right))::(_,(_,TYPE1left,_
))::rest671) => let val result=MlyValue.spec(fn _ => let val tyspec
 as tyspec1=tyspec1 ()
 in ([TycSpec(tyspec,false)]) end
)
 in (LrTable.NT 56,(result,TYPE1left,tyspec1right),rest671) end
| (186,(_,(MlyValue.etyspec etyspec1,_,etyspec1right))::(_,(_,
EQTYPE1left,_))::rest671) => let val result=MlyValue.spec(fn _ => let 
val etyspec as etyspec1=etyspec1 ()
 in ([TycSpec(etyspec,true)]) end
)
 in (LrTable.NT 56,(result,EQTYPE1left,etyspec1right),rest671) end
| (187,(_,(MlyValue.valspec valspec1,_,valspec1right))::(_,(_,VAL1left
,_))::rest671) => let val result=MlyValue.spec(fn _ => let val valspec
 as valspec1=valspec1 ()
 in ([ValSpec valspec]) end
)
 in (LrTable.NT 56,(result,VAL1left,valspec1right),rest671) end
| (188,(_,(MlyValue.exnspec exnspec1,_,exnspec1right))::(_,(_,
EXCEPTION1left,_))::rest671) => let val result=MlyValue.spec(fn _ => 
let val exnspec as exnspec1=exnspec1 ()
 in ([ExceSpec exnspec]) end
)
 in (LrTable.NT 56,(result,EXCEPTION1left,exnspec1right),rest671) end
| (189,(_,(MlyValue.sharespec sharespec1,_,sharespec1right))::(_,(_,
SHARING1left,_))::rest671) => let val result=MlyValue.spec(fn _ => 
let val sharespec as sharespec1=sharespec1 ()
 in (sharespec) end
)
 in (LrTable.NT 56,(result,SHARING1left,sharespec1right),rest671) end
| (190,(_,(MlyValue.sign sign1,_,sign1right))::(_,(_,INCLUDE1left,_))
::rest671) => let val result=MlyValue.spec(fn _ => let val sign as 
sign1=sign1 ()
 in ([IncludeSpec sign]) end
)
 in (LrTable.NT 56,(result,INCLUDE1left,sign1right),rest671) end
| (191,(_,(MlyValue.idents idents1,_,idents1right))::(_,(
MlyValue.ident ident1,_,_))::(_,(_,INCLUDE1left,_))::rest671) => let 
val result=MlyValue.spec(fn _ => let val ident as ident1=ident1 ()
val idents as idents1=idents1 ()
 in (IncludeSpec(VarSig(FastSymbol.sigSymbol ident))
				:: idents)
 end
)
 in (LrTable.NT 56,(result,INCLUDE1left,idents1right),rest671) end
| (192,(_,(MlyValue.sign sign1,_,sign1right))::_::(_,(
MlyValue.fparamList fparamList1,fparamList1left,_))::rest671) => let 
val result=MlyValue.fsig(fn _ => let val fparamList as fparamList1=
fparamList1 ()
val sign as sign1=sign1 ()
 in (foldr (fn (x,s) => FunSig(x,s,Generative)) sign fparamList) end
)
 in (LrTable.NT 72,(result,fparamList1left,sign1right),rest671) end
| (193,(_,(MlyValue.fctspec fctspec2,_,fctspec2right))::_::(_,(
MlyValue.fctspec fctspec1,fctspec1left,_))::rest671) => let val result
=MlyValue.fctspec(fn _ => let val fctspec1=fctspec1 ()
val fctspec2=fctspec2 ()
 in (fctspec1 @ fctspec2) end
)
 in (LrTable.NT 61,(result,fctspec1left,fctspec2right),rest671) end
| (194,(_,(MlyValue.fsig fsig1,_,fsig1right))::(_,(MlyValue.ident 
ident1,ident1left,_))::rest671) => let val result=MlyValue.fctspec(fn 
_ => let val ident as ident1=ident1 ()
val fsig as fsig1=fsig1 ()
 in ([(strSymbol ident, fsig)]) end
)
 in (LrTable.NT 61,(result,ident1left,fsig1right),rest671) end
| (195,(_,(MlyValue.spec spec1,spec1left,spec1right))::rest671) => 
let val result=MlyValue.topspec(fn _ => let val spec as spec1=spec1 ()
 in (TopSpec spec) end
)
 in (LrTable.NT 58,(result,spec1left,spec1right),rest671) end
| (196,(_,(MlyValue.fctspec fctspec1,_,fctspec1right))::(_,(_,
FUNCTOR1left,_))::rest671) => let val result=MlyValue.topspec(fn _ => 
let val fctspec as fctspec1=fctspec1 ()
 in (TopSpec [FctSpec fctspec]) end
)
 in (LrTable.NT 58,(result,FUNCTOR1left,fctspec1right),rest671) end
| (197,(_,(MlyValue.sigb sigb1,_,sigb1right))::(_,(_,SIGNATURE1left,_)
)::rest671) => let val result=MlyValue.topspec(fn _ => let val sigb
 as sigb1=sigb1 ()
 in (SigSpec sigb) end
)
 in (LrTable.NT 58,(result,SIGNATURE1left,sigb1right),rest671) end
| (198,(_,(MlyValue.exp_pa exp_pa1,_,exp_pa1right))::_::(_,(
MlyValue.ty ty1,_,_))::_::(_,(MlyValue.ident ident1,_,_))::(_,(_,
OVERLOAD1left,_))::rest671) => let val result=MlyValue.topspec(fn _
 => let val ident as ident1=ident1 ()
val ty as ty1=ty1 ()
val exp_pa as exp_pa1=exp_pa1 ()
 in (OvldSpec (varSymbol ident,ty,exp_pa)) end
)
 in (LrTable.NT 58,(result,OVERLOAD1left,exp_pa1right),rest671) end
| (199,(_,(MlyValue.fixity fixity1,fixity1left,fixity1right))::rest671
) => let val result=MlyValue.topspec(fn _ => let val fixity as fixity1
=fixity1 ()
 in (FixSpec fixity) end
)
 in (LrTable.NT 58,(result,fixity1left,fixity1right),rest671) end
| (200,(_,(MlyValue.ty ty1,_,ty1right))::_::(_,(MlyValue.ID ID1,_,_))
::(_,(_,EXTERN1left,_))::rest671) => let val result=MlyValue.topspec(
fn _ => let val ID as ID1=ID1 ()
val ty as ty1=ty1 ()
 in (ExternSpec(varSymbol ID,ty)) end
)
 in (LrTable.NT 58,(result,EXTERN1left,ty1right),rest671) end
| (201,rest671) => let val result=MlyValue.topspec_s(fn _ => (
SeqSpec[]))
 in (LrTable.NT 57,(result,defaultPos,defaultPos),rest671) end
| (202,(_,(MlyValue.topspec_s topspec_s1,_,topspec_s1right))::(_,(
MlyValue.topspec topspec1,topspec1left,_))::rest671) => let val result
=MlyValue.topspec_s(fn _ => let val topspec as topspec1=topspec1 ()
val topspec_s as topspec_s1=topspec_s1 ()
 in (makeSEQtopspec (topspec,topspec_s)) end
)
 in (LrTable.NT 57,(result,topspec1left,topspec_s1right),rest671) end
| (203,(_,(MlyValue.topspec_s topspec_s1,_,topspec_s1right))::(_,(_,
SEMICOLON1left,_))::rest671) => let val result=MlyValue.topspec_s(fn _
 => let val topspec_s as topspec_s1=topspec_s1 ()
 in (topspec_s) end
)
 in (LrTable.NT 57,(result,SEMICOLON1left,topspec_s1right),rest671)
 end
| (204,(_,(MlyValue.ident ident1,ident1left,ident1right))::rest671)
 => let val result=MlyValue.idents(fn _ => let val ident as ident1=
ident1 ()
 in ([IncludeSpec(VarSig(FastSymbol.sigSymbol ident))]) end
)
 in (LrTable.NT 59,(result,ident1left,ident1right),rest671) end
| (205,(_,(MlyValue.idents idents1,_,idents1right))::(_,(
MlyValue.ident ident1,ident1left,_))::rest671) => let val result=
MlyValue.idents(fn _ => let val ident as ident1=ident1 ()
val idents as idents1=idents1 ()
 in (IncludeSpec(VarSig(FastSymbol.sigSymbol ident))
				 :: idents)
 end
)
 in (LrTable.NT 59,(result,ident1left,idents1right),rest671) end
| (206,(_,(MlyValue.strspec strspec2,_,strspec2right))::_::(_,(
MlyValue.strspec strspec1,strspec1left,_))::rest671) => let val result
=MlyValue.strspec(fn _ => let val strspec1=strspec1 ()
val strspec2=strspec2 ()
 in (strspec1 @ strspec2) end
)
 in (LrTable.NT 60,(result,strspec1left,strspec2right),rest671) end
| (207,(_,(MlyValue.sign sign1,_,sign1right))::_::(_,(MlyValue.ident 
ident1,ident1left,_))::rest671) => let val result=MlyValue.strspec(fn 
_ => let val ident as ident1=ident1 ()
val sign as sign1=sign1 ()
 in ([(strSymbol ident, sign, NONE)]) end
)
 in (LrTable.NT 60,(result,ident1left,sign1right),rest671) end
| (208,(_,(MlyValue.qid qid1,_,qid1right))::_::(_,(MlyValue.sign sign1
,_,_))::_::(_,(MlyValue.ident ident1,ident1left,_))::rest671) => let 
val result=MlyValue.strspec(fn _ => let val ident as ident1=ident1 ()
val sign as sign1=sign1 ()
val qid as qid1=qid1 ()
 in ([(strSymbol ident, sign, SOME(qid strSymbol))]) end
)
 in (LrTable.NT 60,(result,ident1left,qid1right),rest671) end
| (209,(_,(MlyValue.etyspec etyspec2,_,etyspec2right))::_::(_,(
MlyValue.etyspec etyspec1,etyspec1left,_))::rest671) => let val result
=MlyValue.etyspec(fn _ => let val etyspec1=etyspec1 ()
val etyspec2=etyspec2 ()
 in (etyspec1 @ etyspec2) end
)
 in (LrTable.NT 63,(result,etyspec1left,etyspec2right),rest671) end
| (210,(_,(MlyValue.ID ID1,_,ID1right))::(_,(MlyValue.tyvars tyvars1,
tyvars1left,_))::rest671) => let val result=MlyValue.etyspec(fn _ => 
let val tyvars as tyvars1=tyvars1 ()
val ID as ID1=ID1 ()
 in ([(tycSymbol ID,tyvars,NONE)]) end
)
 in (LrTable.NT 63,(result,tyvars1left,ID1right),rest671) end
| (211,(_,(MlyValue.tyspec tyspec2,_,tyspec2right))::_::(_,(
MlyValue.tyspec tyspec1,tyspec1left,_))::rest671) => let val result=
MlyValue.tyspec(fn _ => let val tyspec1=tyspec1 ()
val tyspec2=tyspec2 ()
 in (tyspec1 @ tyspec2) end
)
 in (LrTable.NT 62,(result,tyspec1left,tyspec2right),rest671) end
| (212,(_,(MlyValue.ID ID1,_,ID1right))::(_,(MlyValue.tyvars tyvars1,
tyvars1left,_))::rest671) => let val result=MlyValue.tyspec(fn _ => 
let val tyvars as tyvars1=tyvars1 ()
val ID as ID1=ID1 ()
 in ([(tycSymbol ID,tyvars,NONE)]) end
)
 in (LrTable.NT 62,(result,tyvars1left,ID1right),rest671) end
| (213,(_,(MlyValue.ty ty1,_,ty1right))::_::(_,(MlyValue.ID ID1,_,_))
::(_,(MlyValue.tyvars tyvars1,tyvars1left,_))::rest671) => let val 
result=MlyValue.tyspec(fn _ => let val tyvars as tyvars1=tyvars1 ()
val ID as ID1=ID1 ()
val ty as ty1=ty1 ()
 in ([(tycSymbol ID,tyvars,SOME ty)]) end
)
 in (LrTable.NT 62,(result,tyvars1left,ty1right),rest671) end
| (214,(_,(MlyValue.valspec valspec2,_,valspec2right))::_::(_,(
MlyValue.valspec valspec1,valspec1left,_))::rest671) => let val result
=MlyValue.valspec(fn _ => let val valspec1=valspec1 ()
val valspec2=valspec2 ()
 in (valspec1 @ valspec2) end
)
 in (LrTable.NT 64,(result,valspec1left,valspec2right),rest671) end
| (215,(_,(MlyValue.ty ty1,_,ty1right))::_::(_,(MlyValue.ident ident1,
_,_))::(_,(MlyValue.op_op op_op1,op_op1left,_))::rest671) => let val 
result=MlyValue.valspec(fn _ => let val op_op1=op_op1 ()
val ident as ident1=ident1 ()
val ty as ty1=ty1 ()
 in ([(varSymbol ident,ty)]) end
)
 in (LrTable.NT 64,(result,op_op1left,ty1right),rest671) end
| (216,(_,(MlyValue.exnspec exnspec2,_,exnspec2right))::_::(_,(
MlyValue.exnspec exnspec1,exnspec1left,_))::rest671) => let val result
=MlyValue.exnspec(fn _ => let val exnspec1=exnspec1 ()
val exnspec2=exnspec2 ()
 in (exnspec1 @ exnspec2) end
)
 in (LrTable.NT 65,(result,exnspec1left,exnspec2right),rest671) end
| (217,(_,(MlyValue.ident ident1,ident1left,ident1right))::rest671)
 => let val result=MlyValue.exnspec(fn _ => let val ident as ident1=
ident1 ()
 in ([(varSymbol ident,NONE)]) end
)
 in (LrTable.NT 65,(result,ident1left,ident1right),rest671) end
| (218,(_,(MlyValue.ty ty1,_,ty1right))::_::(_,(MlyValue.ident ident1,
ident1left,_))::rest671) => let val result=MlyValue.exnspec(fn _ => 
let val ident as ident1=ident1 ()
val ty as ty1=ty1 ()
 in ([(varSymbol ident,SOME ty)]) end
)
 in (LrTable.NT 65,(result,ident1left,ty1right),rest671) end
| (219,(_,(MlyValue.sharespec sharespec2,_,sharespec2right))::_::(_,(
MlyValue.sharespec sharespec1,sharespec1left,_))::rest671) => let val 
result=MlyValue.sharespec(fn _ => let val sharespec1=sharespec1 ()
val sharespec2=sharespec2 ()
 in (sharespec1 @ sharespec2) end
)
 in (LrTable.NT 66,(result,sharespec1left,sharespec2right),rest671)
 end
| (220,(_,(MlyValue.patheqn patheqn1,patheqnleft,patheqnright as 
patheqn1right))::(_,(_,TYPE1left,_))::rest671) => let val result=
MlyValue.sharespec(fn _ => let val patheqn as patheqn1=patheqn1 ()
 in (
[MarkSpec (ShareTycSpec(patheqn tycSymbol),
				    (patheqnleft,patheqnright))]
) end
)
 in (LrTable.NT 66,(result,TYPE1left,patheqn1right),rest671) end
| (221,(_,(MlyValue.patheqn patheqn1,patheqnleft as patheqn1left,
patheqnright as patheqn1right))::rest671) => let val result=
MlyValue.sharespec(fn _ => let val patheqn as patheqn1=patheqn1 ()
 in (
[MarkSpec (ShareStrSpec (patheqn strSymbol),
				    (patheqnleft,patheqnright))]
) end
)
 in (LrTable.NT 66,(result,patheqn1left,patheqn1right),rest671) end
| (222,(_,(MlyValue.qid qid2,_,qid2right))::_::(_,(MlyValue.qid qid1,
qid1left,_))::rest671) => let val result=MlyValue.patheqn(fn _ => let 
val qid1=qid1 ()
val qid2=qid2 ()
 in (fn kind => [qid1 kind, qid2 kind]) end
)
 in (LrTable.NT 67,(result,qid1left,qid2right),rest671) end
| (223,(_,(MlyValue.patheqn patheqn1,_,patheqn1right))::_::(_,(
MlyValue.qid qid1,qid1left,_))::rest671) => let val result=
MlyValue.patheqn(fn _ => let val qid as qid1=qid1 ()
val patheqn as patheqn1=patheqn1 ()
 in (fn kind => qid kind :: patheqn kind) end
)
 in (LrTable.NT 67,(result,qid1left,patheqn1right),rest671) end
| (224,(_,(MlyValue.whspec whspec2,_,whspec2right))::_::(_,(
MlyValue.whspec whspec1,whspec1left,_))::rest671) => let val result=
MlyValue.whspec(fn _ => let val whspec1=whspec1 ()
val whspec2=whspec2 ()
 in (whspec1 @ whspec2) end
)
 in (LrTable.NT 68,(result,whspec1left,whspec2right),rest671) end
| (225,(_,(MlyValue.ty ty1,_,ty1right))::_::(_,(MlyValue.qid qid1,_,_)
)::(_,(MlyValue.tyvars tyvars1,_,_))::(_,(_,TYPE1left,_))::rest671)
 => let val result=MlyValue.whspec(fn _ => let val tyvars as tyvars1=
tyvars1 ()
val qid as qid1=qid1 ()
val ty as ty1=ty1 ()
 in ([WhType(qid tycSymbol,tyvars,ty)]) end
)
 in (LrTable.NT 68,(result,TYPE1left,ty1right),rest671) end
| (226,(_,(MlyValue.qid qid2,_,qid2right))::_::(_,(MlyValue.qid qid1,
qid1left,_))::rest671) => let val result=MlyValue.whspec(fn _ => let 
val qid1=qid1 ()
val qid2=qid2 ()
 in ([WhStruct(qid1 strSymbol,qid2 strSymbol)]) end
)
 in (LrTable.NT 68,(result,qid1left,qid2right),rest671) end
| (227,(_,(_,ARROW1left,ARROW1right))::rest671) => let val result=
MlyValue.functorarrow(fn _ => (Applicative))
 in (LrTable.NT 85,(result,ARROW1left,ARROW1right),rest671) end
| (228,(_,(_,ARROWG1left,ARROWG1right))::rest671) => let val result=
MlyValue.functorarrow(fn _ => (Generative))
 in (LrTable.NT 85,(result,ARROWG1left,ARROWG1right),rest671) end
| (229,(_,(MlyValue.ident ident1,identleft as ident1left,identright
 as ident1right))::rest671) => let val result=MlyValue.sign(fn _ => 
let val ident as ident1=ident1 ()
 in (
MarkSig(VarSig (sigSymbol ident),
				         (identleft,identright))
) end
)
 in (LrTable.NT 69,(result,ident1left,ident1right),rest671) end
| (230,(_,(_,_,ENDright as END1right))::(_,(MlyValue.spec_s spec_s1,_,
_))::(_,(_,SIGleft as SIG1left,_))::rest671) => let val result=
MlyValue.sign(fn _ => let val spec_s as spec_s1=spec_s1 ()
 in (MarkSig(BaseSig(spec_s),(SIGleft,ENDright))) end
)
 in (LrTable.NT 69,(result,SIG1left,END1right),rest671) end
| (231,(_,(_,_,ENDright as END1right))::(_,(MlyValue.spec_s spec_s1,_,
_))::_::(_,(_,SIGleft as SIG1left,_))::rest671) => let val result=
MlyValue.sign(fn _ => let val spec_s as spec_s1=spec_s1 ()
 in (MarkSig(RdsSig(spec_s),(SIGleft,ENDright))) end
)
 in (LrTable.NT 69,(result,SIG1left,END1right),rest671) end
| (232,(_,(MlyValue.whspec whspec1,_,whspecright as whspec1right))::_
::(_,(MlyValue.sign sign1,signleft as sign1left,_))::rest671) => let 
val result=MlyValue.sign(fn _ => let val sign as sign1=sign1 ()
val whspec as whspec1=whspec1 ()
 in (MarkSig(AugSig(sign,whspec),(signleft,whspecright))) end
)
 in (LrTable.NT 69,(result,sign1left,whspec1right),rest671) end
| (233,(_,(MlyValue.sign sign1,_,signright as sign1right))::(_,(
MlyValue.functorarrow functorarrow1,_,_))::_::(_,(MlyValue.fparam 
fparam1,_,_))::(_,(_,LPARENleft as LPAREN1left,_))::rest671) => let 
val result=MlyValue.sign(fn _ => let val fparam as fparam1=fparam1 ()
val functorarrow as functorarrow1=functorarrow1 ()
val sign as sign1=sign1 ()
 in (MarkSig(FunSig(fparam,sign,functorarrow),(LPARENleft,signright)))
 end
)
 in (LrTable.NT 69,(result,LPAREN1left,sign1right),rest671) end
| (234,(_,(_,_,RPAREN1right))::(_,(MlyValue.sign sign1,_,_))::(_,(_,
LPAREN1left,_))::rest671) => let val result=MlyValue.sign(fn _ => let 
val sign as sign1=sign1 ()
 in (sign) end
)
 in (LrTable.NT 69,(result,LPAREN1left,RPAREN1right),rest671) end
| (235,rest671) => let val result=MlyValue.sigconstraint_op(fn _ => (
NoSig))
 in (LrTable.NT 70,(result,defaultPos,defaultPos),rest671) end
| (236,(_,(MlyValue.sign sign1,_,sign1right))::(_,(_,COLON1left,_))::
rest671) => let val result=MlyValue.sigconstraint_op(fn _ => let val 
sign as sign1=sign1 ()
 in (Transparent(sign)) end
)
 in (LrTable.NT 70,(result,COLON1left,sign1right),rest671) end
| (237,(_,(MlyValue.sign sign1,_,sign1right))::(_,(_,STRONGSEAL1left,_
))::rest671) => let val result=MlyValue.sigconstraint_op(fn _ => let 
val sign as sign1=sign1 ()
 in (StrongOpaque(sign)) end
)
 in (LrTable.NT 70,(result,STRONGSEAL1left,sign1right),rest671) end
| (238,(_,(MlyValue.sign sign1,_,sign1right))::(_,(_,WEAKSEAL1left,_))
::rest671) => let val result=MlyValue.sigconstraint_op(fn _ => let 
val sign as sign1=sign1 ()
 in (WeakOpaque(sign)) end
)
 in (LrTable.NT 70,(result,WEAKSEAL1left,sign1right),rest671) end
| (239,(_,(MlyValue.sigb sigb2,_,sigb2right))::_::(_,(MlyValue.sigb 
sigb1,sigb1left,_))::rest671) => let val result=MlyValue.sigb(fn _ => 
let val sigb1=sigb1 ()
val sigb2=sigb2 ()
 in (sigb1 @ sigb2) end
)
 in (LrTable.NT 71,(result,sigb1left,sigb2right),rest671) end
| (240,(_,(MlyValue.sign sign1,_,sign1right))::_::(_,(MlyValue.ident 
ident1,ident1left,_))::rest671) => let val result=MlyValue.sigb(fn _
 => let val ident as ident1=ident1 ()
val sign as sign1=sign1 ()
 in ([Sigb{name=sigSymbol ident,def=sign}]) end
)
 in (LrTable.NT 71,(result,ident1left,sign1right),rest671) end
| (241,(_,(MlyValue.qid qid1,qidleft as qid1left,qidright as qid1right
))::rest671) => let val result=MlyValue.str(fn _ => let val qid as 
qid1=qid1 ()
 in (MarkStr(VarStr(qid strSymbol),(qidleft,qidright))) end
)
 in (LrTable.NT 73,(result,qid1left,qid1right),rest671) end
| (242,(_,(MlyValue.arg_fcts arg_fcts1,_,arg_fctsright as 
arg_fcts1right))::(_,(MlyValue.qid qid1,qidleft as qid1left,_))::
rest671) => let val result=MlyValue.str(fn _ => let val qid as qid1=
qid1 ()
val arg_fcts as arg_fcts1=arg_fcts1 ()
 in (MarkStr(AppStr(qid strSymbol, arg_fcts),(qidleft,arg_fctsright)))
 end
)
 in (LrTable.NT 73,(result,qid1left,arg_fcts1right),rest671) end
| (243,(_,(_,_,ENDright as END1right))::(_,(MlyValue.strdecs strdecs1,
_,_))::(_,(_,STRUCTleft as STRUCT1left,_))::rest671) => let val result
=MlyValue.str(fn _ => let val strdecs as strdecs1=strdecs1 ()
 in (MarkStr(BaseStr strdecs,(STRUCTleft,ENDright))) end
)
 in (LrTable.NT 73,(result,STRUCT1left,END1right),rest671) end
| (244,(_,(_,_,ENDright as END1right))::(_,(MlyValue.str str1,_,_))::_
::(_,(MlyValue.strdecs strdecs1,_,_))::(_,(_,LETleft as LET1left,_))::
rest671) => let val result=MlyValue.str(fn _ => let val strdecs as 
strdecs1=strdecs1 ()
val str as str1=str1 ()
 in (MarkStr(LetStr(strdecs, str), (LETleft,ENDright))) end
)
 in (LrTable.NT 73,(result,LET1left,END1right),rest671) end
| (245,(_,(MlyValue.sign sign1,_,signright as sign1right))::_::(_,(
MlyValue.str str1,strleft as str1left,_))::rest671) => let val result=
MlyValue.str(fn _ => let val str as str1=str1 ()
val sign as sign1=sign1 ()
 in (
MarkStr(ConstrainedStr(str,Transparent sign),
		         (strleft,signright))
) end
)
 in (LrTable.NT 73,(result,str1left,sign1right),rest671) end
| (246,(_,(MlyValue.sign sign1,_,signright as sign1right))::_::(_,(
MlyValue.str str1,strleft as str1left,_))::rest671) => let val result=
MlyValue.str(fn _ => let val str as str1=str1 ()
val sign as sign1=sign1 ()
 in (
MarkStr(ConstrainedStr(str,StrongOpaque sign),
		         (strleft,signright))
) end
)
 in (LrTable.NT 73,(result,str1left,sign1right),rest671) end
| (247,(_,(MlyValue.sign sign1,_,signright as sign1right))::_::(_,(
MlyValue.str str1,strleft as str1left,_))::rest671) => let val result=
MlyValue.str(fn _ => let val str as str1=str1 ()
val sign as sign1=sign1 ()
 in (
MarkStr(ConstrainedStr(str,WeakOpaque sign),
		         (strleft,signright))
) end
)
 in (LrTable.NT 73,(result,str1left,sign1right),rest671) end
| (248,(_,(MlyValue.arg_fct arg_fct1,arg_fct1left,arg_fct1right))::
rest671) => let val result=MlyValue.arg_fcts(fn _ => let val arg_fct
 as arg_fct1=arg_fct1 ()
 in ([arg_fct]) end
)
 in (LrTable.NT 74,(result,arg_fct1left,arg_fct1right),rest671) end
| (249,(_,(MlyValue.arg_fcts arg_fcts1,_,arg_fcts1right))::(_,(
MlyValue.arg_fct arg_fct1,arg_fct1left,_))::rest671) => let val result
=MlyValue.arg_fcts(fn _ => let val arg_fct as arg_fct1=arg_fct1 ()
val arg_fcts as arg_fcts1=arg_fcts1 ()
 in (arg_fct::arg_fcts) end
)
 in (LrTable.NT 74,(result,arg_fct1left,arg_fcts1right),rest671) end
| (250,(_,(_,_,RPAREN1right))::(_,(MlyValue.str str1,_,_))::(_,(_,
LPAREN1left,_))::rest671) => let val result=MlyValue.arg_fct(fn _ => 
let val str as str1=str1 ()
 in ((str, true)) end
)
 in (LrTable.NT 75,(result,LPAREN1left,RPAREN1right),rest671) end
| (251,(_,(_,_,RPAREN1right))::(_,(MlyValue.strdecs strdecs1,
strdecsleft,strdecsright))::(_,(_,LPAREN1left,_))::rest671) => let 
val result=MlyValue.arg_fct(fn _ => let val strdecs as strdecs1=
strdecs1 ()
 in (
(MarkStr(BaseStr strdecs,
						   (strdecsleft,strdecsright)),
					   false)
) end
)
 in (LrTable.NT 75,(result,LPAREN1left,RPAREN1right),rest671) end
| (252,(_,(MlyValue.strdecs strdecs1,_,strdecs1right))::(_,(
MlyValue.strdec strdec1,strdecleft as strdec1left,strdecright))::
rest671) => let val result=MlyValue.strdecs(fn _ => let val strdec as 
strdec1=strdec1 ()
val strdecs as strdecs1=strdecs1 ()
 in (
makeSEQdec (markdec(strdec,strdecleft,strdecright),
					     strdecs)
) end
)
 in (LrTable.NT 77,(result,strdec1left,strdecs1right),rest671) end
| (253,(_,(MlyValue.strdecs strdecs1,_,strdecs1right))::(_,(_,
SEMICOLON1left,_))::rest671) => let val result=MlyValue.strdecs(fn _
 => let val strdecs as strdecs1=strdecs1 ()
 in (strdecs) end
)
 in (LrTable.NT 77,(result,SEMICOLON1left,strdecs1right),rest671) end
| (254,rest671) => let val result=MlyValue.strdecs(fn _ => (SeqDec[]))
 in (LrTable.NT 77,(result,defaultPos,defaultPos),rest671) end
| (255,(_,(MlyValue.sdecs sdecs1,_,sdecs1right))::(_,(MlyValue.sdec 
sdec1,sdecleft as sdec1left,sdecright))::rest671) => let val result=
MlyValue.sdecs(fn _ => let val sdec as sdec1=sdec1 ()
val sdecs as sdecs1=sdecs1 ()
 in (makeSEQdec (markdec(sdec,sdecleft,sdecright),
					     sdecs))
 end
)
 in (LrTable.NT 79,(result,sdec1left,sdecs1right),rest671) end
| (256,(_,(MlyValue.sdecs sdecs1,_,sdecs1right))::(_,(_,SEMICOLON1left
,_))::rest671) => let val result=MlyValue.sdecs(fn _ => let val sdecs
 as sdecs1=sdecs1 ()
 in (sdecs) end
)
 in (LrTable.NT 79,(result,SEMICOLON1left,sdecs1right),rest671) end
| (257,rest671) => let val result=MlyValue.sdecs(fn _ => (SeqDec[]))
 in (LrTable.NT 79,(result,defaultPos,defaultPos),rest671) end
| (258,(_,(MlyValue.strb strb1,_,strb1right))::(_,(_,STRUCTURE1left,_)
)::rest671) => let val result=MlyValue.strdec(fn _ => let val strb as 
strb1=strb1 ()
 in (StrDec strb) end
)
 in (LrTable.NT 76,(result,STRUCTURE1left,strb1right),rest671) end
| (259,(_,(_,_,END1right))::(_,(MlyValue.strdecs strdecs2,strdecs2left
,strdecs2right))::_::(_,(MlyValue.strdecs strdecs1,strdecs1left,
strdecs1right))::(_,(_,LOCAL1left,_))::rest671) => let val result=
MlyValue.strdec(fn _ => let val strdecs1=strdecs1 ()
val strdecs2=strdecs2 ()
 in (
LocalDec(markdec(strdecs1,
				     strdecs1left,strdecs1right),
  			       markdec(strdecs2,strdecs2left,strdecs2right))
) end
)
 in (LrTable.NT 76,(result,LOCAL1left,END1right),rest671) end
| (260,(_,(MlyValue.fctb fctb1,_,fctb1right))::(_,(_,FUNCTOR1left,_))
::rest671) => let val result=MlyValue.strdec(fn _ => let val fctb as 
fctb1=fctb1 ()
 in (StrDec fctb) end
)
 in (LrTable.NT 76,(result,FUNCTOR1left,fctb1right),rest671) end
| (261,(_,(MlyValue.strb strb1,_,strb1right))::(_,(_,FUNCTOR1left,_))
::rest671) => let val result=MlyValue.strdec(fn _ => let val strb as 
strb1=strb1 ()
 in (StrDec strb) end
)
 in (LrTable.NT 76,(result,FUNCTOR1left,strb1right),rest671) end
| (262,(_,(MlyValue.ldec ldec1,ldecleft as ldec1left,ldecright as 
ldec1right))::rest671) => let val result=MlyValue.strdec(fn _ => let 
val ldec as ldec1=ldec1 ()
 in (markdec(ldec,ldecleft,ldecright)) end
)
 in (LrTable.NT 76,(result,ldec1left,ldec1right),rest671) end
| (263,(_,(MlyValue.str str1,_,strright as str1right))::_::(_,(
MlyValue.sign sign1,_,_))::_::(_,(MlyValue.ident ident1,_,_))::_::(_,(
_,STRUCTUREleft as STRUCTURE1left,_))::rest671) => let val result=
MlyValue.strdec(fn _ => let val ident as ident1=ident1 ()
val sign as sign1=sign1 ()
val str as str1=str1 ()
 in (
markdec(StrRecDec{name=strSymbol ident, def=str,
						   constraint=sign},
					 STRUCTUREleft, strright)
) end
)
 in (LrTable.NT 76,(result,STRUCTURE1left,str1right),rest671) end
| (264,(_,(MlyValue.strb strb1,_,strb1right))::(_,(_,STRUCTURE1left,_)
)::rest671) => let val result=MlyValue.sdec(fn _ => let val strb as 
strb1=strb1 ()
 in (StrDec strb) end
)
 in (LrTable.NT 78,(result,STRUCTURE1left,strb1right),rest671) end
| (265,(_,(MlyValue.sigb sigb1,_,sigb1right))::(_,(_,SIGNATURE1left,_)
)::rest671) => let val result=MlyValue.sdec(fn _ => let val sigb as 
sigb1=sigb1 ()
 in (SigDec sigb) end
)
 in (LrTable.NT 78,(result,SIGNATURE1left,sigb1right),rest671) end
| (266,(_,(MlyValue.fctb fctb1,_,fctb1right))::(_,(_,FUNCTOR1left,_))
::rest671) => let val result=MlyValue.sdec(fn _ => let val fctb as 
fctb1=fctb1 ()
 in (StrDec fctb) end
)
 in (LrTable.NT 78,(result,FUNCTOR1left,fctb1right),rest671) end
| (267,(_,(MlyValue.strb strb1,_,strb1right))::(_,(_,FUNCTOR1left,_))
::rest671) => let val result=MlyValue.sdec(fn _ => let val strb as 
strb1=strb1 ()
 in (StrDec strb) end
)
 in (LrTable.NT 78,(result,FUNCTOR1left,strb1right),rest671) end
| (268,(_,(_,_,END1right))::(_,(MlyValue.sdecs sdecs2,sdecs2left,
sdecs2right))::_::(_,(MlyValue.sdecs sdecs1,sdecs1left,sdecs1right))::
(_,(_,LOCAL1left,_))::rest671) => let val result=MlyValue.sdec(fn _
 => let val sdecs1=sdecs1 ()
val sdecs2=sdecs2 ()
 in (
LocalDec(markdec(sdecs1,
						     sdecs1left,sdecs1right),
				    markdec(sdecs2,sdecs2left,sdecs2right))
) end
)
 in (LrTable.NT 78,(result,LOCAL1left,END1right),rest671) end
| (269,(_,(MlyValue.ldec ldec1,ldecleft as ldec1left,ldecright as 
ldec1right))::rest671) => let val result=MlyValue.sdec(fn _ => let 
val ldec as ldec1=ldec1 ()
 in (markdec(ldec,ldecleft,ldecright)) end
)
 in (LrTable.NT 78,(result,ldec1left,ldec1right),rest671) end
| (270,(_,(MlyValue.str str1,_,strright as str1right))::_::(_,(
MlyValue.sign sign1,_,_))::_::(_,(MlyValue.ident ident1,_,_))::_::(_,(
_,STRUCTUREleft as STRUCTURE1left,_))::rest671) => let val result=
MlyValue.sdec(fn _ => let val ident as ident1=ident1 ()
val sign as sign1=sign1 ()
val str as str1=str1 ()
 in (
markdec(StrRecDec{name=strSymbol ident, def=str,
						   constraint=sign},
					 STRUCTUREleft, strright)
) end
)
 in (LrTable.NT 78,(result,STRUCTURE1left,str1right),rest671) end
| (271,(_,(MlyValue.str str1,_,strright as str1right))::_::(_,(
MlyValue.sigconstraint_op sigconstraint_op1,_,_))::(_,(MlyValue.ident 
ident1,identleft as ident1left,_))::rest671) => let val result=
MlyValue.strb(fn _ => let val ident as ident1=ident1 ()
val sigconstraint_op as sigconstraint_op1=sigconstraint_op1 ()
val str as str1=str1 ()
 in (
[MarkStrb(Strb{name = strSymbol ident,def = str,
					constraint=sigconstraint_op},
				   (identleft,strright))]
) end
)
 in (LrTable.NT 80,(result,ident1left,str1right),rest671) end
| (272,(_,(MlyValue.strb strb2,_,strb2right))::_::(_,(MlyValue.strb 
strb1,strb1left,_))::rest671) => let val result=MlyValue.strb(fn _ => 
let val strb1=strb1 ()
val strb2=strb2 ()
 in (strb1 @ strb2) end
)
 in (LrTable.NT 80,(result,strb1left,strb2right),rest671) end
| (273,(_,(MlyValue.sign sign1,_,sign1right))::_::(_,(MlyValue.ID ID1,
ID1left,_))::rest671) => let val result=MlyValue.fparam(fn _ => let 
val ID as ID1=ID1 ()
val sign as sign1=sign1 ()
 in ((SOME(strSymbol ID),sign)) end
)
 in (LrTable.NT 81,(result,ID1left,sign1right),rest671) end
| (274,(_,(MlyValue.spec_s spec_s1,spec_sleft as spec_s1left,
spec_sright as spec_s1right))::rest671) => let val result=
MlyValue.fparam(fn _ => let val spec_s as spec_s1=spec_s1 ()
 in (
(NONE,MarkSig(BaseSig(spec_s),
					       (spec_sleft,spec_sright))))
 end
)
 in (LrTable.NT 81,(result,spec_s1left,spec_s1right),rest671) end
| (275,(_,(_,_,RPAREN1right))::(_,(MlyValue.fparam fparam1,_,_))::(_,(
_,LPAREN1left,_))::rest671) => let val result=MlyValue.fparamList(fn _
 => let val fparam as fparam1=fparam1 ()
 in ([fparam]) end
)
 in (LrTable.NT 82,(result,LPAREN1left,RPAREN1right),rest671) end
| (276,(_,(MlyValue.fparamList fparamList1,_,fparamList1right))::_::(_
,(MlyValue.fparam fparam1,_,_))::(_,(_,LPAREN1left,_))::rest671) => 
let val result=MlyValue.fparamList(fn _ => let val fparam as fparam1=
fparam1 ()
val fparamList as fparamList1=fparamList1 ()
 in (fparam::fparamList) end
)
 in (LrTable.NT 82,(result,LPAREN1left,fparamList1right),rest671) end
| (277,(_,(MlyValue.str str1,_,strright as str1right))::_::(_,(
MlyValue.sigconstraint_op sigconstraint_op1,_,_))::(_,(
MlyValue.fparamList fparamList1,_,_))::(_,(MlyValue.ident ident1,
identleft as ident1left,_))::rest671) => let val result=MlyValue.fctb(
fn _ => let val ident as ident1=ident1 ()
val fparamList as fparamList1=fparamList1 ()
val sigconstraint_op as sigconstraint_op1=sigconstraint_op1 ()
val str as str1=str1 ()
 in (
[MarkStrb(Strb {name = strSymbol ident,
                                 def = BaseFct{params=fparamList, body=str,
				              constraint=sigconstraint_op},
				 constraint = NoSig},
			   (identleft,strright))]
) end
)
 in (LrTable.NT 83,(result,ident1left,str1right),rest671) end
| (278,(_,(MlyValue.fctb fctb2,_,fctb2right))::_::(_,(MlyValue.fctb 
fctb1,fctb1left,_))::rest671) => let val result=MlyValue.fctb(fn _ => 
let val fctb1=fctb1 ()
val fctb2=fctb2 ()
 in (fctb1 @ fctb2) end
)
 in (LrTable.NT 83,(result,fctb1left,fctb2right),rest671) end
| (279,(_,(MlyValue.sdecs sdecs1,sdecsleft,sdecsright as sdecs1right))
::(_,(_,IMPL1left,_))::rest671) => let val result=MlyValue.top(fn _
 => let val sdecs as sdecs1=sdecs1 ()
 in (marktop(ImplTop(sdecs), sdecsleft, sdecsright)) end
)
 in (LrTable.NT 84,(result,IMPL1left,sdecs1right),rest671) end
| (280,(_,(MlyValue.topspec_s topspec_s1,topspec_sleft,topspec_sright
 as topspec_s1right))::(_,(_,INTER1left,_))::rest671) => let val 
result=MlyValue.top(fn _ => let val topspec_s as topspec_s1=topspec_s1
 ()
 in (marktop(InterTop(topspec_s), topspec_sleft, topspec_sright)) end
)
 in (LrTable.NT 84,(result,INTER1left,topspec_s1right),rest671) end
| _ => raise (mlyAction i392)
end
val void = MlyValue.VOID
val extract = fn a => (fn MlyValue.top x => x
| _ => let exception ParseInternal
	in raise ParseInternal end) a ()
end
end
structure Tokens : ML_TOKENS =
struct
type svalue = ParserData.svalue
type ('a,'b) token = ('a,'b) Token.token
fun EOF (p1,p2) = Token.TOKEN (ParserData.LrTable.T 0,(
ParserData.MlyValue.VOID,p1,p2))
fun SEMICOLON (p1,p2) = Token.TOKEN (ParserData.LrTable.T 1,(
ParserData.MlyValue.VOID,p1,p2))
fun ID (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 2,(
ParserData.MlyValue.ID (fn () => i),p1,p2))
fun TYVAR (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 3,(
ParserData.MlyValue.TYVAR (fn () => i),p1,p2))
fun INT (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 4,(
ParserData.MlyValue.INT (fn () => i),p1,p2))
fun INT0 (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 5,(
ParserData.MlyValue.INT0 (fn () => i),p1,p2))
fun DIGIT (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 6,(
ParserData.MlyValue.DIGIT (fn () => i),p1,p2))
fun WORD (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 7,(
ParserData.MlyValue.WORD (fn () => i),p1,p2))
fun REAL (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 8,(
ParserData.MlyValue.REAL (fn () => i),p1,p2))
fun STRING (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 9,(
ParserData.MlyValue.STRING (fn () => i),p1,p2))
fun CHAR (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 10,(
ParserData.MlyValue.CHAR (fn () => i),p1,p2))
fun ABSTYPE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 11,(
ParserData.MlyValue.VOID,p1,p2))
fun AND (p1,p2) = Token.TOKEN (ParserData.LrTable.T 12,(
ParserData.MlyValue.VOID,p1,p2))
fun ARROW (p1,p2) = Token.TOKEN (ParserData.LrTable.T 13,(
ParserData.MlyValue.VOID,p1,p2))
fun ARROWG (p1,p2) = Token.TOKEN (ParserData.LrTable.T 14,(
ParserData.MlyValue.VOID,p1,p2))
fun AS (p1,p2) = Token.TOKEN (ParserData.LrTable.T 15,(
ParserData.MlyValue.VOID,p1,p2))
fun BAR (p1,p2) = Token.TOKEN (ParserData.LrTable.T 16,(
ParserData.MlyValue.VOID,p1,p2))
fun CASE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 17,(
ParserData.MlyValue.VOID,p1,p2))
fun DATATYPE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 18,(
ParserData.MlyValue.VOID,p1,p2))
fun DOTDOTDOT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 19,(
ParserData.MlyValue.VOID,p1,p2))
fun ELSE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 20,(
ParserData.MlyValue.VOID,p1,p2))
fun END (p1,p2) = Token.TOKEN (ParserData.LrTable.T 21,(
ParserData.MlyValue.VOID,p1,p2))
fun EQUALOP (p1,p2) = Token.TOKEN (ParserData.LrTable.T 22,(
ParserData.MlyValue.VOID,p1,p2))
fun EQTYPE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 23,(
ParserData.MlyValue.VOID,p1,p2))
fun EXCEPTION (p1,p2) = Token.TOKEN (ParserData.LrTable.T 24,(
ParserData.MlyValue.VOID,p1,p2))
fun DO (p1,p2) = Token.TOKEN (ParserData.LrTable.T 25,(
ParserData.MlyValue.VOID,p1,p2))
fun DOT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 26,(
ParserData.MlyValue.VOID,p1,p2))
fun DARROW (p1,p2) = Token.TOKEN (ParserData.LrTable.T 27,(
ParserData.MlyValue.VOID,p1,p2))
fun FN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 28,(
ParserData.MlyValue.VOID,p1,p2))
fun FUN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 29,(
ParserData.MlyValue.VOID,p1,p2))
fun FUNCTOR (p1,p2) = Token.TOKEN (ParserData.LrTable.T 30,(
ParserData.MlyValue.VOID,p1,p2))
fun HANDLE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 31,(
ParserData.MlyValue.VOID,p1,p2))
fun HASH (p1,p2) = Token.TOKEN (ParserData.LrTable.T 32,(
ParserData.MlyValue.VOID,p1,p2))
fun IF (p1,p2) = Token.TOKEN (ParserData.LrTable.T 33,(
ParserData.MlyValue.VOID,p1,p2))
fun IN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 34,(
ParserData.MlyValue.VOID,p1,p2))
fun INCLUDE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 35,(
ParserData.MlyValue.VOID,p1,p2))
fun INFIX (p1,p2) = Token.TOKEN (ParserData.LrTable.T 36,(
ParserData.MlyValue.VOID,p1,p2))
fun INFIXR (p1,p2) = Token.TOKEN (ParserData.LrTable.T 37,(
ParserData.MlyValue.VOID,p1,p2))
fun LET (p1,p2) = Token.TOKEN (ParserData.LrTable.T 38,(
ParserData.MlyValue.VOID,p1,p2))
fun LOCAL (p1,p2) = Token.TOKEN (ParserData.LrTable.T 39,(
ParserData.MlyValue.VOID,p1,p2))
fun NONFIX (p1,p2) = Token.TOKEN (ParserData.LrTable.T 40,(
ParserData.MlyValue.VOID,p1,p2))
fun OF (p1,p2) = Token.TOKEN (ParserData.LrTable.T 41,(
ParserData.MlyValue.VOID,p1,p2))
fun OP (p1,p2) = Token.TOKEN (ParserData.LrTable.T 42,(
ParserData.MlyValue.VOID,p1,p2))
fun OPEN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 43,(
ParserData.MlyValue.VOID,p1,p2))
fun OVERLOAD (p1,p2) = Token.TOKEN (ParserData.LrTable.T 44,(
ParserData.MlyValue.VOID,p1,p2))
fun RAISE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 45,(
ParserData.MlyValue.VOID,p1,p2))
fun REC (p1,p2) = Token.TOKEN (ParserData.LrTable.T 46,(
ParserData.MlyValue.VOID,p1,p2))
fun SHARING (p1,p2) = Token.TOKEN (ParserData.LrTable.T 47,(
ParserData.MlyValue.VOID,p1,p2))
fun SIG (p1,p2) = Token.TOKEN (ParserData.LrTable.T 48,(
ParserData.MlyValue.VOID,p1,p2))
fun SIGNATURE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 49,(
ParserData.MlyValue.VOID,p1,p2))
fun STRUCT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 50,(
ParserData.MlyValue.VOID,p1,p2))
fun STRUCTURE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 51,(
ParserData.MlyValue.VOID,p1,p2))
fun THEN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 52,(
ParserData.MlyValue.VOID,p1,p2))
fun TYPE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 53,(
ParserData.MlyValue.VOID,p1,p2))
fun VAL (p1,p2) = Token.TOKEN (ParserData.LrTable.T 54,(
ParserData.MlyValue.VOID,p1,p2))
fun WHERE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 55,(
ParserData.MlyValue.VOID,p1,p2))
fun WHILE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 56,(
ParserData.MlyValue.VOID,p1,p2))
fun WILD (p1,p2) = Token.TOKEN (ParserData.LrTable.T 57,(
ParserData.MlyValue.VOID,p1,p2))
fun WITH (p1,p2) = Token.TOKEN (ParserData.LrTable.T 58,(
ParserData.MlyValue.VOID,p1,p2))
fun WITHTYPE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 59,(
ParserData.MlyValue.VOID,p1,p2))
fun ASTERISK (p1,p2) = Token.TOKEN (ParserData.LrTable.T 60,(
ParserData.MlyValue.VOID,p1,p2))
fun COLON (p1,p2) = Token.TOKEN (ParserData.LrTable.T 61,(
ParserData.MlyValue.VOID,p1,p2))
fun STRONGSEAL (p1,p2) = Token.TOKEN (ParserData.LrTable.T 62,(
ParserData.MlyValue.VOID,p1,p2))
fun WEAKSEAL (p1,p2) = Token.TOKEN (ParserData.LrTable.T 63,(
ParserData.MlyValue.VOID,p1,p2))
fun COMMA (p1,p2) = Token.TOKEN (ParserData.LrTable.T 64,(
ParserData.MlyValue.VOID,p1,p2))
fun LBRACE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 65,(
ParserData.MlyValue.VOID,p1,p2))
fun LBRACKET (p1,p2) = Token.TOKEN (ParserData.LrTable.T 66,(
ParserData.MlyValue.VOID,p1,p2))
fun LPAREN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 67,(
ParserData.MlyValue.VOID,p1,p2))
fun RBRACE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 68,(
ParserData.MlyValue.VOID,p1,p2))
fun RBRACKET (p1,p2) = Token.TOKEN (ParserData.LrTable.T 69,(
ParserData.MlyValue.VOID,p1,p2))
fun RPAREN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 70,(
ParserData.MlyValue.VOID,p1,p2))
fun ORELSE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 71,(
ParserData.MlyValue.VOID,p1,p2))
fun ANDALSO (p1,p2) = Token.TOKEN (ParserData.LrTable.T 72,(
ParserData.MlyValue.VOID,p1,p2))
fun EXTERN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 73,(
ParserData.MlyValue.VOID,p1,p2))
fun CCALL (p1,p2) = Token.TOKEN (ParserData.LrTable.T 74,(
ParserData.MlyValue.VOID,p1,p2))
fun IMPL (p1,p2) = Token.TOKEN (ParserData.LrTable.T 75,(
ParserData.MlyValue.VOID,p1,p2))
fun INTER (p1,p2) = Token.TOKEN (ParserData.LrTable.T 76,(
ParserData.MlyValue.VOID,p1,p2))
end
end
