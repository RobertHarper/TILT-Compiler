#!/bin/sh

# usage: til_slave n host commdir
#
# We create the nth slave (n is used to set window geometry) by
# running ssh inside a local xterm.  Advantage: since the X window is
# local, there is less communication and less overhead on the remote
# machine.  Drawback: When you hit ^C, the slave goes away instead of
# entering the SML/NJ top-level loop.
#
# As a hack, the host "localhost" is treated specially.
#
# commdir is a directory, visible to both master and slave, used for
# communication during the parallel make.
#
# This version works at CMU.  You should check it over before
# trying to use it at your site.
#

PATH=/usr/local/bin:/usr/bin:/bin:/usr/X11/bin:$PATH
export PATH

case $# in
3)	;;
*)
	echo 1>&2 usage: $0 n host commdir
	exit 1
	;;
esac

argn="$1"
arghost="$2"
argdir="$3"

# At CMU, scp will print diagnostics on some systems unless -q is
# specified.  On other systems, scp -q causes a usage error.

case `sys` in
i386_linux3)
	scp="scp -q"
	;;
*)
	scp="scp"
	;;
esac

# Hack for now: We do CM.make() in $mldir, which is based on $argdir.
# When this is released, we'll put @SMLload'able heaps in some known place.

mldir=`cd "$argdir/.."; pwd`

# The userid for kinit.  At CMU, this will already be set, so we don't
# care that `whoami` isn't the right thing for all systypes.

: ${USER:=`whoami`}

# The X11 geometry specification for window n.

xoffset=`echo $argn % 5 '*' 160 | bc`
yoffset=`echo $argn / 5 '*' 300 | bc`
geometry="120x12+$xoffset+$yoffset"

# The X11 title.

title="TIL $mldir @ $arghost"

# Default SML/NJ version to use (matters at CMU, harmless elsewhere)
: ${SML_VERSION:=110}

# The bourne shell script to run remotely.

cmdfile=/tmp/til_slave.$$

cmd='	PATH="'"$PATH"'"
	export PATH
	
	# We assume that unlinking $cmdfile (in /tmp) wont break
	# anything.
	rm -f '$cmdfile'

	# Required for access to AFS at CMU

	if [ "'"$arghost"'" = localhost ]
	then
		:
	else
		if kinit '$USER'
		then
			:
		else
			exit 1
		fi
	fi
	
	# Required by TIL

	SYS=`sys`
	export SYS

	HOST=`hostname`
	export HOST

	# Required by SML/NJ at CMU, harmless elsewhere

	SML_VERSION='$SML_VERSION'
	export SML_VERSION

	# Run a slave inside NJ.
	
	# Hack for now.  We should be using a custom
	# heap.  We should be using something like
	# expect(1) so the user can interrupt Manager
	# and continue to work inside NJ.
	
	cd "'"$mldir"'"
	exec sml << "END_ML"
		SMLofNJ.Internals.GC.messages false;
		CM.verbose (SOME false);
		CM.make();
		Manager.slave();
END_ML
'

# We put the command into a file because ssh doesn't send the command
# exactly to the remote sh.  Rather than using $argdir to hold the file
# (which may be on AFS -- causing synchronization problems we don't want
# to deal with), we send it to /tmp on the remote machine.  Ug.

echo "$cmd" > $cmdfile.local
if [ "$arghost" = localhost ]
then
	mv $cmdfile.local $cmdfile
else	
	$scp $cmdfile.local "$arghost:$cmdfile"
	rm -f $cmdfile.local
fi

if [ "$arghost" = localhost ]
then
	exec xterm -fn 6x10 -geometry "$geometry" -title "$title" -n "$title" \
		-e /bin/sh $cmdfile
else
	# Launch script remotely
	exec xterm -fn 6x10 -geometry "$geometry" -title "$title" -n "$title" \
		-e ssh -t -o 'ForwardX11 no' "$arghost" exec /bin/sh $cmdfile
fi
