#!/bin/sh

# usage: til_slave n count host commdir
#
# Create count slaves on host.  n is used to set window geometry.  We
# create the slaves in a remote emacs displaying on a local xterm.
# Advantage: less communication overhead.
#
# As a hack, the host "localhost" is treated specially.
#
# commdir is a directory, visible to both master and slave, used for
# communication during the parallel make.
#
# This version works at CMU.  You should check it over before
# trying to use it at your site.
#

PATH=/usr/local/bin:/usr/bin:/bin:/usr/ccs/bin:/usr/X11/bin:$PATH
export PATH

case $# in
4)	;;
*)
	echo 1>&2 usage: $0 n count host commdir
	exit 1
	;;
esac

argn="$1"
argcount="$2"
arghost="$3"
argdir="$4"

# At CMU, scp will print diagnostics on some systems unless -q is
# specified.  On other systems, scp -q causes a usage error.

case `sys 2>/dev/null` in
i386_linux3|i386_rh60)
	scp="scp -q"
	;;
*)
	scp="scp"
	;;
esac

# Where to run tilt.

tiltdir=`cd "$argdir/../.."; pwd`

# Provide a reasonable default for TILTROOT.

: ${TILTROOT:="$tiltdir"}
export TILTROOT

# The userid for kinit.  At CMU, this will already be set, so we don't
# care that `whoami` isn't the right thing for all systypes.

: ${USER:=`whoami`}

# The X11 title.

title="TIL $tiltdir @ $arghost"

# The X11 geometry specification for window n.

yoffset=`echo "$argn % 5 * 160" | bc`
xoffset=`echo "$argn / 5 * 300" | bc`
nrows=`echo "11 * $argcount" | bc`
geometry="120x$nrows+$xoffset+$yoffset"

# The bourne shell script to run remotely.

cmdfile=/tmp/til_slave.$$
elisp=/tmp/elisp.$$

cmd='	PATH="'"$PATH"'"
	export PATH

	# We assume that unlinking $cmdfile (in /tmp) wont break
	# anything.
	rm -f '$cmdfile'

	# Required for access to AFS at CMU

	if [ "'"$arghost"'" = localhost ]
	then
		:
	else
		if kinit '$USER'
		then
			:
		else
			exit 1
		fi
	fi

	# Required if user has modified

	TILTROOT="'"$TILTROOT"'"
	export TILTROOT

	# Required at CMU, harmless elsewhere.
	
	SML_VERSION="'"$SML_VERSION"'"
	export SML_VERSION

	cat << "END_EMACS" > '$elisp'
(defvar tilt-executable (concat (getenv "TILTROOT") "/Bin/tilt-nj"))
(defvar tilt-slave-args "-vs")

(require '\''comint)

(defun tilt-nth-slave (n)
  (let* ((bufname (concat "tilt slave " (int-to-string n)))
	 (buffer (make-comint bufname tilt-executable nil tilt-slave-args)))
    (switch-to-buffer buffer)
    buffer))

(defun tilt-make-slaves (n split)
  (if (= n 0)
      (balance-windows)
    (progn
      (balance-windows)
      (if split (split-window-vertically))
      (balance-windows)
      (tilt-nth-slave n)
      (tilt-make-slaves (- n 1) t))))
  
(defun tilt-slaves (n)
  (interactive "p")
  (delete-other-windows)
  (tilt-make-slaves n nil))
  
(defun tilt-slave-startup ()
  (interactive)
; (set-default-font "6x10")  Window resize due to font change here does not work with Exceed for wide (>100) windows
  (menu-bar-mode -1)
  (delete-file "'$elisp'")
  (tilt-slaves '$argcount'))
END_EMACS
	cd "'"$tiltdir"'"
	exec emacs -nw --no-init-file -l '$elisp' -f tilt-slave-startup
'

# We put the command into a file because ssh doesn't send the
# command exactly to the remote sh.  Rather than using $argdir
# to hold the file (which may be on AFS -- causing
# synchronization problems we don't want to deal with), we
# send it to /tmp on the remote machine.  Ug.

if [ "$arghost" = localhost ]
then
	echo "$cmd" > $cmdfile
else	
	echo "$cmd" > $cmdfile.local
	$scp $cmdfile.local "$arghost:$cmdfile"
	rm -f $cmdfile.local
fi

if [ "$arghost" = localhost ]
then
	exec xterm -bg black -fg yellow -fn 6x10 -geometry "$geometry" \
		-title "$title" -n "$title" -e /bin/sh $cmdfile
else
	# Launch script remotely
	exec xterm -bg black -fg yellow -fn 6x10 -geometry "$geometry" \
		-title "$title" -n "$title" -e ssh -t -o 'ForwardX11 no' \
		"$arghost" exec /bin/sh $cmdfile
fi
